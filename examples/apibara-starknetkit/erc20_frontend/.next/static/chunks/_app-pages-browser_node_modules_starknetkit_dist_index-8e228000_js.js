/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_node_modules_starknetkit_dist_index-8e228000_js"],{

/***/ "(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js":
/*!***********************************************************!*\
  !*** ./node_modules/next/dist/build/polyfills/process.js ***!
  \***********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar _global_process, _global_process1;\nmodule.exports = ((_global_process = __webpack_require__.g.process) == null ? void 0 : _global_process.env) && typeof ((_global_process1 = __webpack_require__.g.process) == null ? void 0 : _global_process1.env) === \"object\" ? __webpack_require__.g.process : __webpack_require__(/*! next/dist/compiled/process */ \"(app-pages-browser)/./node_modules/next/dist/compiled/process/browser.js\");\n\n//# sourceMappingURL=process.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvcG9seWZpbGxzL3Byb2Nlc3MuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLHFDQUFxQyxxQkFBTSxpRkFBaUYscUJBQU0sa0VBQWtFLHFCQUFNLFdBQVcsbUJBQU8sQ0FBQyw0R0FBNEI7O0FBRXpQIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvcG9seWZpbGxzL3Byb2Nlc3MuanM/MjgzMSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfZ2xvYmFsX3Byb2Nlc3MsIF9nbG9iYWxfcHJvY2VzczE7XG5tb2R1bGUuZXhwb3J0cyA9ICgoX2dsb2JhbF9wcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3MpID09IG51bGwgPyB2b2lkIDAgOiBfZ2xvYmFsX3Byb2Nlc3MuZW52KSAmJiB0eXBlb2YgKChfZ2xvYmFsX3Byb2Nlc3MxID0gZ2xvYmFsLnByb2Nlc3MpID09IG51bGwgPyB2b2lkIDAgOiBfZ2xvYmFsX3Byb2Nlc3MxLmVudikgPT09IFwib2JqZWN0XCIgPyBnbG9iYWwucHJvY2VzcyA6IHJlcXVpcmUoXCJuZXh0L2Rpc3QvY29tcGlsZWQvcHJvY2Vzc1wiKTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJvY2Vzcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/process/browser.js":
/*!************************************************************!*\
  !*** ./node_modules/next/dist/compiled/process/browser.js ***!
  \************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var __dirname = \"/\";\n(function(){var e={229:function(e){var t=e.exports={};var r;var n;function defaultSetTimout(){throw new Error(\"setTimeout has not been defined\")}function defaultClearTimeout(){throw new Error(\"clearTimeout has not been defined\")}(function(){try{if(typeof setTimeout===\"function\"){r=setTimeout}else{r=defaultSetTimout}}catch(e){r=defaultSetTimout}try{if(typeof clearTimeout===\"function\"){n=clearTimeout}else{n=defaultClearTimeout}}catch(e){n=defaultClearTimeout}})();function runTimeout(e){if(r===setTimeout){return setTimeout(e,0)}if((r===defaultSetTimout||!r)&&setTimeout){r=setTimeout;return setTimeout(e,0)}try{return r(e,0)}catch(t){try{return r.call(null,e,0)}catch(t){return r.call(this,e,0)}}}function runClearTimeout(e){if(n===clearTimeout){return clearTimeout(e)}if((n===defaultClearTimeout||!n)&&clearTimeout){n=clearTimeout;return clearTimeout(e)}try{return n(e)}catch(t){try{return n.call(null,e)}catch(t){return n.call(this,e)}}}var i=[];var o=false;var u;var a=-1;function cleanUpNextTick(){if(!o||!u){return}o=false;if(u.length){i=u.concat(i)}else{a=-1}if(i.length){drainQueue()}}function drainQueue(){if(o){return}var e=runTimeout(cleanUpNextTick);o=true;var t=i.length;while(t){u=i;i=[];while(++a<t){if(u){u[a].run()}}a=-1;t=i.length}u=null;o=false;runClearTimeout(e)}t.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1){for(var r=1;r<arguments.length;r++){t[r-1]=arguments[r]}}i.push(new Item(e,t));if(i.length===1&&!o){runTimeout(drainQueue)}};function Item(e,t){this.fun=e;this.array=t}Item.prototype.run=function(){this.fun.apply(null,this.array)};t.title=\"browser\";t.browser=true;t.env={};t.argv=[];t.version=\"\";t.versions={};function noop(){}t.on=noop;t.addListener=noop;t.once=noop;t.off=noop;t.removeListener=noop;t.removeAllListeners=noop;t.emit=noop;t.prependListener=noop;t.prependOnceListener=noop;t.listeners=function(e){return[]};t.binding=function(e){throw new Error(\"process.binding is not supported\")};t.cwd=function(){return\"/\"};t.chdir=function(e){throw new Error(\"process.chdir is not supported\")};t.umask=function(){return 0}}};var t={};function __nccwpck_require__(r){var n=t[r];if(n!==undefined){return n.exports}var i=t[r]={exports:{}};var o=true;try{e[r](i,i.exports,__nccwpck_require__);o=false}finally{if(o)delete t[r]}return i.exports}if(typeof __nccwpck_require__!==\"undefined\")__nccwpck_require__.ab=__dirname+\"/\";var r=__nccwpck_require__(229);module.exports=r})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvcHJvY2Vzcy9icm93c2VyLmpzIiwibWFwcGluZ3MiOiI7QUFBQSxZQUFZLE9BQU8sZ0JBQWdCLG1CQUFtQixNQUFNLE1BQU0sNEJBQTRCLG1EQUFtRCwrQkFBK0IscURBQXFELFlBQVksSUFBSSxtQ0FBbUMsYUFBYSxLQUFLLG9CQUFvQixTQUFTLG1CQUFtQixJQUFJLHFDQUFxQyxlQUFlLEtBQUssdUJBQXVCLFNBQVMsdUJBQXVCLElBQUksdUJBQXVCLG1CQUFtQix1QkFBdUIsMkNBQTJDLGFBQWEsdUJBQXVCLElBQUksY0FBYyxTQUFTLElBQUksd0JBQXdCLFNBQVMsMEJBQTBCLDRCQUE0QixxQkFBcUIsdUJBQXVCLGdEQUFnRCxlQUFlLHVCQUF1QixJQUFJLFlBQVksU0FBUyxJQUFJLHNCQUFzQixTQUFTLHdCQUF3QixTQUFTLFlBQVksTUFBTSxTQUFTLDJCQUEyQixXQUFXLE9BQU8sUUFBUSxhQUFhLGNBQWMsS0FBSyxLQUFLLGFBQWEsY0FBYyxzQkFBc0IsTUFBTSxPQUFPLGtDQUFrQyxPQUFPLGVBQWUsU0FBUyxJQUFJLEtBQUssYUFBYSxNQUFNLFlBQVksS0FBSyxXQUFXLE9BQU8sUUFBUSxtQkFBbUIsdUJBQXVCLG9DQUFvQyx1QkFBdUIsWUFBWSxtQkFBbUIsS0FBSyxxQkFBcUIsc0JBQXNCLHFCQUFxQix5QkFBeUIsbUJBQW1CLFdBQVcsYUFBYSw4QkFBOEIsaUNBQWlDLGtCQUFrQixlQUFlLFNBQVMsVUFBVSxhQUFhLGNBQWMsaUJBQWlCLFVBQVUsbUJBQW1CLFlBQVksV0FBVyxzQkFBc0IsMEJBQTBCLFlBQVksdUJBQXVCLDJCQUEyQix3QkFBd0IsVUFBVSxzQkFBc0IscURBQXFELGlCQUFpQixXQUFXLG9CQUFvQixtREFBbUQsbUJBQW1CLFlBQVksU0FBUyxnQ0FBZ0MsV0FBVyxrQkFBa0IsaUJBQWlCLFlBQVksWUFBWSxXQUFXLElBQUksc0NBQXNDLFFBQVEsUUFBUSxpQkFBaUIsaUJBQWlCLG1FQUFtRSxTQUFTLEtBQUssK0JBQStCLGlCQUFpQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL3Byb2Nlc3MvYnJvd3Nlci5qcz9iYmI1Il0sInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigpe3ZhciBlPXsyMjk6ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5leHBvcnRzPXt9O3ZhciByO3ZhciBuO2Z1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKXt0aHJvdyBuZXcgRXJyb3IoXCJzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkXCIpfWZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQoKXt0aHJvdyBuZXcgRXJyb3IoXCJjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWRcIil9KGZ1bmN0aW9uKCl7dHJ5e2lmKHR5cGVvZiBzZXRUaW1lb3V0PT09XCJmdW5jdGlvblwiKXtyPXNldFRpbWVvdXR9ZWxzZXtyPWRlZmF1bHRTZXRUaW1vdXR9fWNhdGNoKGUpe3I9ZGVmYXVsdFNldFRpbW91dH10cnl7aWYodHlwZW9mIGNsZWFyVGltZW91dD09PVwiZnVuY3Rpb25cIil7bj1jbGVhclRpbWVvdXR9ZWxzZXtuPWRlZmF1bHRDbGVhclRpbWVvdXR9fWNhdGNoKGUpe249ZGVmYXVsdENsZWFyVGltZW91dH19KSgpO2Z1bmN0aW9uIHJ1blRpbWVvdXQoZSl7aWYocj09PXNldFRpbWVvdXQpe3JldHVybiBzZXRUaW1lb3V0KGUsMCl9aWYoKHI9PT1kZWZhdWx0U2V0VGltb3V0fHwhcikmJnNldFRpbWVvdXQpe3I9c2V0VGltZW91dDtyZXR1cm4gc2V0VGltZW91dChlLDApfXRyeXtyZXR1cm4gcihlLDApfWNhdGNoKHQpe3RyeXtyZXR1cm4gci5jYWxsKG51bGwsZSwwKX1jYXRjaCh0KXtyZXR1cm4gci5jYWxsKHRoaXMsZSwwKX19fWZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChlKXtpZihuPT09Y2xlYXJUaW1lb3V0KXtyZXR1cm4gY2xlYXJUaW1lb3V0KGUpfWlmKChuPT09ZGVmYXVsdENsZWFyVGltZW91dHx8IW4pJiZjbGVhclRpbWVvdXQpe249Y2xlYXJUaW1lb3V0O3JldHVybiBjbGVhclRpbWVvdXQoZSl9dHJ5e3JldHVybiBuKGUpfWNhdGNoKHQpe3RyeXtyZXR1cm4gbi5jYWxsKG51bGwsZSl9Y2F0Y2godCl7cmV0dXJuIG4uY2FsbCh0aGlzLGUpfX19dmFyIGk9W107dmFyIG89ZmFsc2U7dmFyIHU7dmFyIGE9LTE7ZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCl7aWYoIW98fCF1KXtyZXR1cm59bz1mYWxzZTtpZih1Lmxlbmd0aCl7aT11LmNvbmNhdChpKX1lbHNle2E9LTF9aWYoaS5sZW5ndGgpe2RyYWluUXVldWUoKX19ZnVuY3Rpb24gZHJhaW5RdWV1ZSgpe2lmKG8pe3JldHVybn12YXIgZT1ydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7bz10cnVlO3ZhciB0PWkubGVuZ3RoO3doaWxlKHQpe3U9aTtpPVtdO3doaWxlKCsrYTx0KXtpZih1KXt1W2FdLnJ1bigpfX1hPS0xO3Q9aS5sZW5ndGh9dT1udWxsO289ZmFsc2U7cnVuQ2xlYXJUaW1lb3V0KGUpfXQubmV4dFRpY2s9ZnVuY3Rpb24oZSl7dmFyIHQ9bmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgtMSk7aWYoYXJndW1lbnRzLmxlbmd0aD4xKXtmb3IodmFyIHI9MTtyPGFyZ3VtZW50cy5sZW5ndGg7cisrKXt0W3ItMV09YXJndW1lbnRzW3JdfX1pLnB1c2gobmV3IEl0ZW0oZSx0KSk7aWYoaS5sZW5ndGg9PT0xJiYhbyl7cnVuVGltZW91dChkcmFpblF1ZXVlKX19O2Z1bmN0aW9uIEl0ZW0oZSx0KXt0aGlzLmZ1bj1lO3RoaXMuYXJyYXk9dH1JdGVtLnByb3RvdHlwZS5ydW49ZnVuY3Rpb24oKXt0aGlzLmZ1bi5hcHBseShudWxsLHRoaXMuYXJyYXkpfTt0LnRpdGxlPVwiYnJvd3NlclwiO3QuYnJvd3Nlcj10cnVlO3QuZW52PXt9O3QuYXJndj1bXTt0LnZlcnNpb249XCJcIjt0LnZlcnNpb25zPXt9O2Z1bmN0aW9uIG5vb3AoKXt9dC5vbj1ub29wO3QuYWRkTGlzdGVuZXI9bm9vcDt0Lm9uY2U9bm9vcDt0Lm9mZj1ub29wO3QucmVtb3ZlTGlzdGVuZXI9bm9vcDt0LnJlbW92ZUFsbExpc3RlbmVycz1ub29wO3QuZW1pdD1ub29wO3QucHJlcGVuZExpc3RlbmVyPW5vb3A7dC5wcmVwZW5kT25jZUxpc3RlbmVyPW5vb3A7dC5saXN0ZW5lcnM9ZnVuY3Rpb24oZSl7cmV0dXJuW119O3QuYmluZGluZz1mdW5jdGlvbihlKXt0aHJvdyBuZXcgRXJyb3IoXCJwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZFwiKX07dC5jd2Q9ZnVuY3Rpb24oKXtyZXR1cm5cIi9cIn07dC5jaGRpcj1mdW5jdGlvbihlKXt0aHJvdyBuZXcgRXJyb3IoXCJwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWRcIil9O3QudW1hc2s9ZnVuY3Rpb24oKXtyZXR1cm4gMH19fTt2YXIgdD17fTtmdW5jdGlvbiBfX25jY3dwY2tfcmVxdWlyZV9fKHIpe3ZhciBuPXRbcl07aWYobiE9PXVuZGVmaW5lZCl7cmV0dXJuIG4uZXhwb3J0c312YXIgaT10W3JdPXtleHBvcnRzOnt9fTt2YXIgbz10cnVlO3RyeXtlW3JdKGksaS5leHBvcnRzLF9fbmNjd3Bja19yZXF1aXJlX18pO289ZmFsc2V9ZmluYWxseXtpZihvKWRlbGV0ZSB0W3JdfXJldHVybiBpLmV4cG9ydHN9aWYodHlwZW9mIF9fbmNjd3Bja19yZXF1aXJlX18hPT1cInVuZGVmaW5lZFwiKV9fbmNjd3Bja19yZXF1aXJlX18uYWI9X19kaXJuYW1lK1wiL1wiO3ZhciByPV9fbmNjd3Bja19yZXF1aXJlX18oMjI5KTttb2R1bGUuZXhwb3J0cz1yfSkoKTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/process/browser.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/starknetkit/dist/index-8e228000.js":
/*!*********************************************************!*\
  !*** ./node_modules/starknetkit/dist/index-8e228000.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getStarknetWindowObject: function() { return /* binding */ Y_; }\n/* harmony export */ });\n/* harmony import */ var _lastConnected_b964dc30_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lastConnected-b964dc30.js */ \"(app-pages-browser)/./node_modules/starknetkit/dist/lastConnected-b964dc30.js\");\n/* harmony import */ var starknet__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! starknet */ \"(app-pages-browser)/./node_modules/starknet/dist/index.mjs\");\n/* harmony import */ var _index_ed16cdbf_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./index-ed16cdbf.js */ \"(app-pages-browser)/./node_modules/starknetkit/dist/index-ed16cdbf.js\");\n/* harmony import */ var _publicRcpNodes_3828330a_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./publicRcpNodes-3828330a.js */ \"(app-pages-browser)/./node_modules/starknetkit/dist/publicRcpNodes-3828330a.js\");\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\nvar Au = Object.defineProperty;\nvar Tu = (i, e, t) => e in i ? Au(i, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : i[e] = t;\nvar we = (i, e, t) => (Tu(i, typeof e != \"symbol\" ? e + \"\" : e, t), t);\n\n\n\n\nvar sn = { exports: {} }, $i = typeof Reflect == \"object\" ? Reflect : null, Bn = $i && typeof $i.apply == \"function\" ? $i.apply : function(e, t, s) {\n  return Function.prototype.apply.call(e, t, s);\n}, qs;\n$i && typeof $i.ownKeys == \"function\" ? qs = $i.ownKeys : Object.getOwnPropertySymbols ? qs = function(e) {\n  return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e));\n} : qs = function(e) {\n  return Object.getOwnPropertyNames(e);\n};\nfunction Lu(i) {\n  console && console.warn && console.warn(i);\n}\nvar Ya = Number.isNaN || function(e) {\n  return e !== e;\n};\nfunction Oe() {\n  Oe.init.call(this);\n}\nsn.exports = Oe;\nsn.exports.once = zu;\nOe.EventEmitter = Oe;\nOe.prototype._events = void 0;\nOe.prototype._eventsCount = 0;\nOe.prototype._maxListeners = void 0;\nvar kn = 10;\nfunction tr(i) {\n  if (typeof i != \"function\")\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof i);\n}\nObject.defineProperty(Oe, \"defaultMaxListeners\", {\n  enumerable: !0,\n  get: function() {\n    return kn;\n  },\n  set: function(i) {\n    if (typeof i != \"number\" || i < 0 || Ya(i))\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + i + \".\");\n    kn = i;\n  }\n});\nOe.init = function() {\n  (this._events === void 0 || this._events === Object.getPrototypeOf(this)._events) && (this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0), this._maxListeners = this._maxListeners || void 0;\n};\nOe.prototype.setMaxListeners = function(e) {\n  if (typeof e != \"number\" || e < 0 || Ya(e))\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + e + \".\");\n  return this._maxListeners = e, this;\n};\nfunction Ja(i) {\n  return i._maxListeners === void 0 ? Oe.defaultMaxListeners : i._maxListeners;\n}\nOe.prototype.getMaxListeners = function() {\n  return Ja(this);\n};\nOe.prototype.emit = function(e) {\n  for (var t = [], s = 1; s < arguments.length; s++)\n    t.push(arguments[s]);\n  var r = e === \"error\", n = this._events;\n  if (n !== void 0)\n    r = r && n.error === void 0;\n  else if (!r)\n    return !1;\n  if (r) {\n    var o;\n    if (t.length > 0 && (o = t[0]), o instanceof Error)\n      throw o;\n    var c = new Error(\"Unhandled error.\" + (o ? \" (\" + o.message + \")\" : \"\"));\n    throw c.context = o, c;\n  }\n  var u = n[e];\n  if (u === void 0)\n    return !1;\n  if (typeof u == \"function\")\n    Bn(u, this, t);\n  else\n    for (var d = u.length, p = tc(u, d), s = 0; s < d; ++s)\n      Bn(p[s], this, t);\n  return !0;\n};\nfunction Qa(i, e, t, s) {\n  var r, n, o;\n  if (tr(t), n = i._events, n === void 0 ? (n = i._events = /* @__PURE__ */ Object.create(null), i._eventsCount = 0) : (n.newListener !== void 0 && (i.emit(\n    \"newListener\",\n    e,\n    t.listener ? t.listener : t\n  ), n = i._events), o = n[e]), o === void 0)\n    o = n[e] = t, ++i._eventsCount;\n  else if (typeof o == \"function\" ? o = n[e] = s ? [t, o] : [o, t] : s ? o.unshift(t) : o.push(t), r = Ja(i), r > 0 && o.length > r && !o.warned) {\n    o.warned = !0;\n    var c = new Error(\"Possible EventEmitter memory leak detected. \" + o.length + \" \" + String(e) + \" listeners added. Use emitter.setMaxListeners() to increase limit\");\n    c.name = \"MaxListenersExceededWarning\", c.emitter = i, c.type = e, c.count = o.length, Lu(c);\n  }\n  return i;\n}\nOe.prototype.addListener = function(e, t) {\n  return Qa(this, e, t, !1);\n};\nOe.prototype.on = Oe.prototype.addListener;\nOe.prototype.prependListener = function(e, t) {\n  return Qa(this, e, t, !0);\n};\nfunction Mu() {\n  if (!this.fired)\n    return this.target.removeListener(this.type, this.wrapFn), this.fired = !0, arguments.length === 0 ? this.listener.call(this.target) : this.listener.apply(this.target, arguments);\n}\nfunction Xa(i, e, t) {\n  var s = { fired: !1, wrapFn: void 0, target: i, type: e, listener: t }, r = Mu.bind(s);\n  return r.listener = t, s.wrapFn = r, r;\n}\nOe.prototype.once = function(e, t) {\n  return tr(t), this.on(e, Xa(this, e, t)), this;\n};\nOe.prototype.prependOnceListener = function(e, t) {\n  return tr(t), this.prependListener(e, Xa(this, e, t)), this;\n};\nOe.prototype.removeListener = function(e, t) {\n  var s, r, n, o, c;\n  if (tr(t), r = this._events, r === void 0)\n    return this;\n  if (s = r[e], s === void 0)\n    return this;\n  if (s === t || s.listener === t)\n    --this._eventsCount === 0 ? this._events = /* @__PURE__ */ Object.create(null) : (delete r[e], r.removeListener && this.emit(\"removeListener\", e, s.listener || t));\n  else if (typeof s != \"function\") {\n    for (n = -1, o = s.length - 1; o >= 0; o--)\n      if (s[o] === t || s[o].listener === t) {\n        c = s[o].listener, n = o;\n        break;\n      }\n    if (n < 0)\n      return this;\n    n === 0 ? s.shift() : qu(s, n), s.length === 1 && (r[e] = s[0]), r.removeListener !== void 0 && this.emit(\"removeListener\", e, c || t);\n  }\n  return this;\n};\nOe.prototype.off = Oe.prototype.removeListener;\nOe.prototype.removeAllListeners = function(e) {\n  var t, s, r;\n  if (s = this._events, s === void 0)\n    return this;\n  if (s.removeListener === void 0)\n    return arguments.length === 0 ? (this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0) : s[e] !== void 0 && (--this._eventsCount === 0 ? this._events = /* @__PURE__ */ Object.create(null) : delete s[e]), this;\n  if (arguments.length === 0) {\n    var n = Object.keys(s), o;\n    for (r = 0; r < n.length; ++r)\n      o = n[r], o !== \"removeListener\" && this.removeAllListeners(o);\n    return this.removeAllListeners(\"removeListener\"), this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0, this;\n  }\n  if (t = s[e], typeof t == \"function\")\n    this.removeListener(e, t);\n  else if (t !== void 0)\n    for (r = t.length - 1; r >= 0; r--)\n      this.removeListener(e, t[r]);\n  return this;\n};\nfunction Za(i, e, t) {\n  var s = i._events;\n  if (s === void 0)\n    return [];\n  var r = s[e];\n  return r === void 0 ? [] : typeof r == \"function\" ? t ? [r.listener || r] : [r] : t ? ju(r) : tc(r, r.length);\n}\nOe.prototype.listeners = function(e) {\n  return Za(this, e, !0);\n};\nOe.prototype.rawListeners = function(e) {\n  return Za(this, e, !1);\n};\nOe.listenerCount = function(i, e) {\n  return typeof i.listenerCount == \"function\" ? i.listenerCount(e) : ec.call(i, e);\n};\nOe.prototype.listenerCount = ec;\nfunction ec(i) {\n  var e = this._events;\n  if (e !== void 0) {\n    var t = e[i];\n    if (typeof t == \"function\")\n      return 1;\n    if (t !== void 0)\n      return t.length;\n  }\n  return 0;\n}\nOe.prototype.eventNames = function() {\n  return this._eventsCount > 0 ? qs(this._events) : [];\n};\nfunction tc(i, e) {\n  for (var t = new Array(e), s = 0; s < e; ++s)\n    t[s] = i[s];\n  return t;\n}\nfunction qu(i, e) {\n  for (; e + 1 < i.length; e++)\n    i[e] = i[e + 1];\n  i.pop();\n}\nfunction ju(i) {\n  for (var e = new Array(i.length), t = 0; t < e.length; ++t)\n    e[t] = i[t].listener || i[t];\n  return e;\n}\nfunction zu(i, e) {\n  return new Promise(function(t, s) {\n    function r(o) {\n      i.removeListener(e, n), s(o);\n    }\n    function n() {\n      typeof i.removeListener == \"function\" && i.removeListener(\"error\", r), t([].slice.call(arguments));\n    }\n    ic(i, e, n, { once: !0 }), e !== \"error\" && Ku(i, r, { once: !0 });\n  });\n}\nfunction Ku(i, e, t) {\n  typeof i.on == \"function\" && ic(i, \"error\", e, t);\n}\nfunction ic(i, e, t, s) {\n  if (typeof i.on == \"function\")\n    s.once ? i.once(e, t) : i.on(e, t);\n  else if (typeof i.addEventListener == \"function\")\n    i.addEventListener(e, function r(n) {\n      s.once && i.removeEventListener(e, r), t(n);\n    });\n  else\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof i);\n}\nvar We = sn.exports;\nconst ir = /* @__PURE__ */ (0,_lastConnected_b964dc30_js__WEBPACK_IMPORTED_MODULE_0__.e)(We);\nvar sr = {}, sc = { exports: {} };\n/*! *****************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\n(function(i) {\n  var e, t, s, r, n, o, c, u, d, p, b, x, O, _, C, F, K, I, D, y, w, f, a;\n  (function(l) {\n    var L = typeof _lastConnected_b964dc30_js__WEBPACK_IMPORTED_MODULE_0__.c == \"object\" ? _lastConnected_b964dc30_js__WEBPACK_IMPORTED_MODULE_0__.c : typeof self == \"object\" ? self : typeof this == \"object\" ? this : {};\n    l(v(L, v(i.exports)));\n    function v(R, $) {\n      return R !== L && (typeof Object.create == \"function\" ? Object.defineProperty(R, \"__esModule\", { value: !0 }) : R.__esModule = !0), function(q, m) {\n        return R[q] = $ ? $(q, m) : m;\n      };\n    }\n  })(function(l) {\n    var L = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(v, R) {\n      v.__proto__ = R;\n    } || function(v, R) {\n      for (var $ in R)\n        R.hasOwnProperty($) && (v[$] = R[$]);\n    };\n    e = function(v, R) {\n      L(v, R);\n      function $() {\n        this.constructor = v;\n      }\n      v.prototype = R === null ? Object.create(R) : ($.prototype = R.prototype, new $());\n    }, t = Object.assign || function(v) {\n      for (var R, $ = 1, q = arguments.length; $ < q; $++) {\n        R = arguments[$];\n        for (var m in R)\n          Object.prototype.hasOwnProperty.call(R, m) && (v[m] = R[m]);\n      }\n      return v;\n    }, s = function(v, R) {\n      var $ = {};\n      for (var q in v)\n        Object.prototype.hasOwnProperty.call(v, q) && R.indexOf(q) < 0 && ($[q] = v[q]);\n      if (v != null && typeof Object.getOwnPropertySymbols == \"function\")\n        for (var m = 0, q = Object.getOwnPropertySymbols(v); m < q.length; m++)\n          R.indexOf(q[m]) < 0 && Object.prototype.propertyIsEnumerable.call(v, q[m]) && ($[q[m]] = v[q[m]]);\n      return $;\n    }, r = function(v, R, $, q) {\n      var m = arguments.length, E = m < 3 ? R : q === null ? q = Object.getOwnPropertyDescriptor(R, $) : q, B;\n      if (typeof Reflect == \"object\" && typeof Reflect.decorate == \"function\")\n        E = Reflect.decorate(v, R, $, q);\n      else\n        for (var z = v.length - 1; z >= 0; z--)\n          (B = v[z]) && (E = (m < 3 ? B(E) : m > 3 ? B(R, $, E) : B(R, $)) || E);\n      return m > 3 && E && Object.defineProperty(R, $, E), E;\n    }, n = function(v, R) {\n      return function($, q) {\n        R($, q, v);\n      };\n    }, o = function(v, R) {\n      if (typeof Reflect == \"object\" && typeof Reflect.metadata == \"function\")\n        return Reflect.metadata(v, R);\n    }, c = function(v, R, $, q) {\n      function m(E) {\n        return E instanceof $ ? E : new $(function(B) {\n          B(E);\n        });\n      }\n      return new ($ || ($ = Promise))(function(E, B) {\n        function z(M) {\n          try {\n            U(q.next(M));\n          } catch (H) {\n            B(H);\n          }\n        }\n        function j(M) {\n          try {\n            U(q.throw(M));\n          } catch (H) {\n            B(H);\n          }\n        }\n        function U(M) {\n          M.done ? E(M.value) : m(M.value).then(z, j);\n        }\n        U((q = q.apply(v, R || [])).next());\n      });\n    }, u = function(v, R) {\n      var $ = { label: 0, sent: function() {\n        if (E[0] & 1)\n          throw E[1];\n        return E[1];\n      }, trys: [], ops: [] }, q, m, E, B;\n      return B = { next: z(0), throw: z(1), return: z(2) }, typeof Symbol == \"function\" && (B[Symbol.iterator] = function() {\n        return this;\n      }), B;\n      function z(U) {\n        return function(M) {\n          return j([U, M]);\n        };\n      }\n      function j(U) {\n        if (q)\n          throw new TypeError(\"Generator is already executing.\");\n        for (; $; )\n          try {\n            if (q = 1, m && (E = U[0] & 2 ? m.return : U[0] ? m.throw || ((E = m.return) && E.call(m), 0) : m.next) && !(E = E.call(m, U[1])).done)\n              return E;\n            switch (m = 0, E && (U = [U[0] & 2, E.value]), U[0]) {\n              case 0:\n              case 1:\n                E = U;\n                break;\n              case 4:\n                return $.label++, { value: U[1], done: !1 };\n              case 5:\n                $.label++, m = U[1], U = [0];\n                continue;\n              case 7:\n                U = $.ops.pop(), $.trys.pop();\n                continue;\n              default:\n                if (E = $.trys, !(E = E.length > 0 && E[E.length - 1]) && (U[0] === 6 || U[0] === 2)) {\n                  $ = 0;\n                  continue;\n                }\n                if (U[0] === 3 && (!E || U[1] > E[0] && U[1] < E[3])) {\n                  $.label = U[1];\n                  break;\n                }\n                if (U[0] === 6 && $.label < E[1]) {\n                  $.label = E[1], E = U;\n                  break;\n                }\n                if (E && $.label < E[2]) {\n                  $.label = E[2], $.ops.push(U);\n                  break;\n                }\n                E[2] && $.ops.pop(), $.trys.pop();\n                continue;\n            }\n            U = R.call(v, $);\n          } catch (M) {\n            U = [6, M], m = 0;\n          } finally {\n            q = E = 0;\n          }\n        if (U[0] & 5)\n          throw U[1];\n        return { value: U[0] ? U[1] : void 0, done: !0 };\n      }\n    }, a = function(v, R, $, q) {\n      q === void 0 && (q = $), v[q] = R[$];\n    }, d = function(v, R) {\n      for (var $ in v)\n        $ !== \"default\" && !R.hasOwnProperty($) && (R[$] = v[$]);\n    }, p = function(v) {\n      var R = typeof Symbol == \"function\" && Symbol.iterator, $ = R && v[R], q = 0;\n      if ($)\n        return $.call(v);\n      if (v && typeof v.length == \"number\")\n        return {\n          next: function() {\n            return v && q >= v.length && (v = void 0), { value: v && v[q++], done: !v };\n          }\n        };\n      throw new TypeError(R ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n    }, b = function(v, R) {\n      var $ = typeof Symbol == \"function\" && v[Symbol.iterator];\n      if (!$)\n        return v;\n      var q = $.call(v), m, E = [], B;\n      try {\n        for (; (R === void 0 || R-- > 0) && !(m = q.next()).done; )\n          E.push(m.value);\n      } catch (z) {\n        B = { error: z };\n      } finally {\n        try {\n          m && !m.done && ($ = q.return) && $.call(q);\n        } finally {\n          if (B)\n            throw B.error;\n        }\n      }\n      return E;\n    }, x = function() {\n      for (var v = [], R = 0; R < arguments.length; R++)\n        v = v.concat(b(arguments[R]));\n      return v;\n    }, O = function() {\n      for (var v = 0, R = 0, $ = arguments.length; R < $; R++)\n        v += arguments[R].length;\n      for (var q = Array(v), m = 0, R = 0; R < $; R++)\n        for (var E = arguments[R], B = 0, z = E.length; B < z; B++, m++)\n          q[m] = E[B];\n      return q;\n    }, _ = function(v) {\n      return this instanceof _ ? (this.v = v, this) : new _(v);\n    }, C = function(v, R, $) {\n      if (!Symbol.asyncIterator)\n        throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n      var q = $.apply(v, R || []), m, E = [];\n      return m = {}, B(\"next\"), B(\"throw\"), B(\"return\"), m[Symbol.asyncIterator] = function() {\n        return this;\n      }, m;\n      function B(te) {\n        q[te] && (m[te] = function(G) {\n          return new Promise(function(ie, Q) {\n            E.push([te, G, ie, Q]) > 1 || z(te, G);\n          });\n        });\n      }\n      function z(te, G) {\n        try {\n          j(q[te](G));\n        } catch (ie) {\n          H(E[0][3], ie);\n        }\n      }\n      function j(te) {\n        te.value instanceof _ ? Promise.resolve(te.value.v).then(U, M) : H(E[0][2], te);\n      }\n      function U(te) {\n        z(\"next\", te);\n      }\n      function M(te) {\n        z(\"throw\", te);\n      }\n      function H(te, G) {\n        te(G), E.shift(), E.length && z(E[0][0], E[0][1]);\n      }\n    }, F = function(v) {\n      var R, $;\n      return R = {}, q(\"next\"), q(\"throw\", function(m) {\n        throw m;\n      }), q(\"return\"), R[Symbol.iterator] = function() {\n        return this;\n      }, R;\n      function q(m, E) {\n        R[m] = v[m] ? function(B) {\n          return ($ = !$) ? { value: _(v[m](B)), done: m === \"return\" } : E ? E(B) : B;\n        } : E;\n      }\n    }, K = function(v) {\n      if (!Symbol.asyncIterator)\n        throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n      var R = v[Symbol.asyncIterator], $;\n      return R ? R.call(v) : (v = typeof p == \"function\" ? p(v) : v[Symbol.iterator](), $ = {}, q(\"next\"), q(\"throw\"), q(\"return\"), $[Symbol.asyncIterator] = function() {\n        return this;\n      }, $);\n      function q(E) {\n        $[E] = v[E] && function(B) {\n          return new Promise(function(z, j) {\n            B = v[E](B), m(z, j, B.done, B.value);\n          });\n        };\n      }\n      function m(E, B, z, j) {\n        Promise.resolve(j).then(function(U) {\n          E({ value: U, done: z });\n        }, B);\n      }\n    }, I = function(v, R) {\n      return Object.defineProperty ? Object.defineProperty(v, \"raw\", { value: R }) : v.raw = R, v;\n    }, D = function(v) {\n      if (v && v.__esModule)\n        return v;\n      var R = {};\n      if (v != null)\n        for (var $ in v)\n          Object.hasOwnProperty.call(v, $) && (R[$] = v[$]);\n      return R.default = v, R;\n    }, y = function(v) {\n      return v && v.__esModule ? v : { default: v };\n    }, w = function(v, R) {\n      if (!R.has(v))\n        throw new TypeError(\"attempted to get private field on non-instance\");\n      return R.get(v);\n    }, f = function(v, R, $) {\n      if (!R.has(v))\n        throw new TypeError(\"attempted to set private field on non-instance\");\n      return R.set(v, $), $;\n    }, l(\"__extends\", e), l(\"__assign\", t), l(\"__rest\", s), l(\"__decorate\", r), l(\"__param\", n), l(\"__metadata\", o), l(\"__awaiter\", c), l(\"__generator\", u), l(\"__exportStar\", d), l(\"__createBinding\", a), l(\"__values\", p), l(\"__read\", b), l(\"__spread\", x), l(\"__spreadArrays\", O), l(\"__await\", _), l(\"__asyncGenerator\", C), l(\"__asyncDelegator\", F), l(\"__asyncValues\", K), l(\"__makeTemplateObject\", I), l(\"__importStar\", D), l(\"__importDefault\", y), l(\"__classPrivateFieldGet\", w), l(\"__classPrivateFieldSet\", f);\n  });\n})(sc);\nvar Ft = sc.exports, fs = {};\nObject.defineProperty(fs, \"__esModule\", { value: !0 });\nfunction Vu(i) {\n  if (typeof i != \"string\")\n    throw new Error(`Cannot safe json parse value of type ${typeof i}`);\n  try {\n    return JSON.parse(i);\n  } catch {\n    return i;\n  }\n}\nfs.safeJsonParse = Vu;\nfunction Bu(i) {\n  return typeof i == \"string\" ? i : JSON.stringify(i, (e, t) => typeof t > \"u\" ? null : t);\n}\nfs.safeJsonStringify = Bu;\nvar ki = { exports: {} }, Hn;\nfunction ku() {\n  return Hn || (Hn = 1, function() {\n    let i;\n    function e() {\n    }\n    i = e, i.prototype.getItem = function(t) {\n      return this.hasOwnProperty(t) ? String(this[t]) : null;\n    }, i.prototype.setItem = function(t, s) {\n      this[t] = String(s);\n    }, i.prototype.removeItem = function(t) {\n      delete this[t];\n    }, i.prototype.clear = function() {\n      const t = this;\n      Object.keys(t).forEach(function(s) {\n        t[s] = void 0, delete t[s];\n      });\n    }, i.prototype.key = function(t) {\n      return t = t || 0, Object.keys(this)[t];\n    }, i.prototype.__defineGetter__(\"length\", function() {\n      return Object.keys(this).length;\n    }), typeof _lastConnected_b964dc30_js__WEBPACK_IMPORTED_MODULE_0__.c < \"u\" && _lastConnected_b964dc30_js__WEBPACK_IMPORTED_MODULE_0__.c.localStorage ? ki.exports = _lastConnected_b964dc30_js__WEBPACK_IMPORTED_MODULE_0__.c.localStorage : typeof window < \"u\" && window.localStorage ? ki.exports = window.localStorage : ki.exports = new e();\n  }()), ki.exports;\n}\nvar yr = {}, Hi = {}, Gn;\nfunction Hu() {\n  if (Gn)\n    return Hi;\n  Gn = 1, Object.defineProperty(Hi, \"__esModule\", { value: !0 }), Hi.IKeyValueStorage = void 0;\n  class i {\n  }\n  return Hi.IKeyValueStorage = i, Hi;\n}\nvar Gi = {}, Wn;\nfunction Gu() {\n  if (Wn)\n    return Gi;\n  Wn = 1, Object.defineProperty(Gi, \"__esModule\", { value: !0 }), Gi.parseEntry = void 0;\n  const i = fs;\n  function e(t) {\n    var s;\n    return [t[0], i.safeJsonParse((s = t[1]) !== null && s !== void 0 ? s : \"\")];\n  }\n  return Gi.parseEntry = e, Gi;\n}\nvar Yn;\nfunction Wu() {\n  return Yn || (Yn = 1, function(i) {\n    Object.defineProperty(i, \"__esModule\", { value: !0 });\n    const e = Ft;\n    e.__exportStar(Hu(), i), e.__exportStar(Gu(), i);\n  }(yr)), yr;\n}\nObject.defineProperty(sr, \"__esModule\", { value: !0 });\nsr.KeyValueStorage = void 0;\nconst Ci = Ft, Jn = fs, Yu = Ci.__importDefault(ku()), Ju = Wu();\nclass rc {\n  constructor() {\n    this.localStorage = Yu.default;\n  }\n  getKeys() {\n    return Ci.__awaiter(this, void 0, void 0, function* () {\n      return Object.keys(this.localStorage);\n    });\n  }\n  getEntries() {\n    return Ci.__awaiter(this, void 0, void 0, function* () {\n      return Object.entries(this.localStorage).map(Ju.parseEntry);\n    });\n  }\n  getItem(e) {\n    return Ci.__awaiter(this, void 0, void 0, function* () {\n      const t = this.localStorage.getItem(e);\n      if (t !== null)\n        return Jn.safeJsonParse(t);\n    });\n  }\n  setItem(e, t) {\n    return Ci.__awaiter(this, void 0, void 0, function* () {\n      this.localStorage.setItem(e, Jn.safeJsonStringify(t));\n    });\n  }\n  removeItem(e) {\n    return Ci.__awaiter(this, void 0, void 0, function* () {\n      this.localStorage.removeItem(e);\n    });\n  }\n}\nsr.KeyValueStorage = rc;\nvar nc = sr.default = rc, Wt = {}, Wi = {}, V = {}, mr = {}, Yi = {}, Qn;\nfunction Qu() {\n  if (Qn)\n    return Yi;\n  Qn = 1, Object.defineProperty(Yi, \"__esModule\", { value: !0 }), Yi.delay = void 0;\n  function i(e) {\n    return new Promise((t) => {\n      setTimeout(() => {\n        t(!0);\n      }, e);\n    });\n  }\n  return Yi.delay = i, Yi;\n}\nvar mi = {}, br = {}, bi = {}, Xn;\nfunction Xu() {\n  return Xn || (Xn = 1, Object.defineProperty(bi, \"__esModule\", { value: !0 }), bi.ONE_THOUSAND = bi.ONE_HUNDRED = void 0, bi.ONE_HUNDRED = 100, bi.ONE_THOUSAND = 1e3), bi;\n}\nvar wr = {}, Zn;\nfunction Zu() {\n  return Zn || (Zn = 1, function(i) {\n    Object.defineProperty(i, \"__esModule\", { value: !0 }), i.ONE_YEAR = i.FOUR_WEEKS = i.THREE_WEEKS = i.TWO_WEEKS = i.ONE_WEEK = i.THIRTY_DAYS = i.SEVEN_DAYS = i.FIVE_DAYS = i.THREE_DAYS = i.ONE_DAY = i.TWENTY_FOUR_HOURS = i.TWELVE_HOURS = i.SIX_HOURS = i.THREE_HOURS = i.ONE_HOUR = i.SIXTY_MINUTES = i.THIRTY_MINUTES = i.TEN_MINUTES = i.FIVE_MINUTES = i.ONE_MINUTE = i.SIXTY_SECONDS = i.THIRTY_SECONDS = i.TEN_SECONDS = i.FIVE_SECONDS = i.ONE_SECOND = void 0, i.ONE_SECOND = 1, i.FIVE_SECONDS = 5, i.TEN_SECONDS = 10, i.THIRTY_SECONDS = 30, i.SIXTY_SECONDS = 60, i.ONE_MINUTE = i.SIXTY_SECONDS, i.FIVE_MINUTES = i.ONE_MINUTE * 5, i.TEN_MINUTES = i.ONE_MINUTE * 10, i.THIRTY_MINUTES = i.ONE_MINUTE * 30, i.SIXTY_MINUTES = i.ONE_MINUTE * 60, i.ONE_HOUR = i.SIXTY_MINUTES, i.THREE_HOURS = i.ONE_HOUR * 3, i.SIX_HOURS = i.ONE_HOUR * 6, i.TWELVE_HOURS = i.ONE_HOUR * 12, i.TWENTY_FOUR_HOURS = i.ONE_HOUR * 24, i.ONE_DAY = i.TWENTY_FOUR_HOURS, i.THREE_DAYS = i.ONE_DAY * 3, i.FIVE_DAYS = i.ONE_DAY * 5, i.SEVEN_DAYS = i.ONE_DAY * 7, i.THIRTY_DAYS = i.ONE_DAY * 30, i.ONE_WEEK = i.SEVEN_DAYS, i.TWO_WEEKS = i.ONE_WEEK * 2, i.THREE_WEEKS = i.ONE_WEEK * 3, i.FOUR_WEEKS = i.ONE_WEEK * 4, i.ONE_YEAR = i.ONE_DAY * 365;\n  }(wr)), wr;\n}\nvar eo;\nfunction oc() {\n  return eo || (eo = 1, function(i) {\n    Object.defineProperty(i, \"__esModule\", { value: !0 });\n    const e = Ft;\n    e.__exportStar(Xu(), i), e.__exportStar(Zu(), i);\n  }(br)), br;\n}\nvar to;\nfunction el() {\n  if (to)\n    return mi;\n  to = 1, Object.defineProperty(mi, \"__esModule\", { value: !0 }), mi.fromMiliseconds = mi.toMiliseconds = void 0;\n  const i = oc();\n  function e(s) {\n    return s * i.ONE_THOUSAND;\n  }\n  mi.toMiliseconds = e;\n  function t(s) {\n    return Math.floor(s / i.ONE_THOUSAND);\n  }\n  return mi.fromMiliseconds = t, mi;\n}\nvar io;\nfunction tl() {\n  return io || (io = 1, function(i) {\n    Object.defineProperty(i, \"__esModule\", { value: !0 });\n    const e = Ft;\n    e.__exportStar(Qu(), i), e.__exportStar(el(), i);\n  }(mr)), mr;\n}\nvar Ri = {}, so;\nfunction il() {\n  if (so)\n    return Ri;\n  so = 1, Object.defineProperty(Ri, \"__esModule\", { value: !0 }), Ri.Watch = void 0;\n  class i {\n    constructor() {\n      this.timestamps = /* @__PURE__ */ new Map();\n    }\n    start(t) {\n      if (this.timestamps.has(t))\n        throw new Error(`Watch already started for label: ${t}`);\n      this.timestamps.set(t, { started: Date.now() });\n    }\n    stop(t) {\n      const s = this.get(t);\n      if (typeof s.elapsed < \"u\")\n        throw new Error(`Watch already stopped for label: ${t}`);\n      const r = Date.now() - s.started;\n      this.timestamps.set(t, { started: s.started, elapsed: r });\n    }\n    get(t) {\n      const s = this.timestamps.get(t);\n      if (typeof s > \"u\")\n        throw new Error(`No timestamp found for label: ${t}`);\n      return s;\n    }\n    elapsed(t) {\n      const s = this.get(t);\n      return s.elapsed || Date.now() - s.started;\n    }\n  }\n  return Ri.Watch = i, Ri.default = i, Ri;\n}\nvar vr = {}, Ji = {}, ro;\nfunction sl() {\n  if (ro)\n    return Ji;\n  ro = 1, Object.defineProperty(Ji, \"__esModule\", { value: !0 }), Ji.IWatch = void 0;\n  class i {\n  }\n  return Ji.IWatch = i, Ji;\n}\nvar no;\nfunction rl() {\n  return no || (no = 1, function(i) {\n    Object.defineProperty(i, \"__esModule\", { value: !0 }), Ft.__exportStar(sl(), i);\n  }(vr)), vr;\n}\n(function(i) {\n  Object.defineProperty(i, \"__esModule\", { value: !0 });\n  const e = Ft;\n  e.__exportStar(tl(), i), e.__exportStar(il(), i), e.__exportStar(rl(), i), e.__exportStar(oc(), i);\n})(V);\nvar _r = {}, Qi = {};\nlet Nt = class {\n};\nconst nl = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  IEvents: Nt\n}, Symbol.toStringTag, { value: \"Module\" })), ol = /* @__PURE__ */ (0,_lastConnected_b964dc30_js__WEBPACK_IMPORTED_MODULE_0__.g)(nl);\nvar oo;\nfunction al() {\n  if (oo)\n    return Qi;\n  oo = 1, Object.defineProperty(Qi, \"__esModule\", { value: !0 }), Qi.IHeartBeat = void 0;\n  const i = ol;\n  class e extends i.IEvents {\n    constructor(s) {\n      super();\n    }\n  }\n  return Qi.IHeartBeat = e, Qi;\n}\nvar ao;\nfunction ac() {\n  return ao || (ao = 1, function(i) {\n    Object.defineProperty(i, \"__esModule\", { value: !0 }), Ft.__exportStar(al(), i);\n  }(_r)), _r;\n}\nvar Er = {}, wi = {}, co;\nfunction cl() {\n  if (co)\n    return wi;\n  co = 1, Object.defineProperty(wi, \"__esModule\", { value: !0 }), wi.HEARTBEAT_EVENTS = wi.HEARTBEAT_INTERVAL = void 0;\n  const i = V;\n  return wi.HEARTBEAT_INTERVAL = i.FIVE_SECONDS, wi.HEARTBEAT_EVENTS = {\n    pulse: \"heartbeat_pulse\"\n  }, wi;\n}\nvar ho;\nfunction cc() {\n  return ho || (ho = 1, function(i) {\n    Object.defineProperty(i, \"__esModule\", { value: !0 }), Ft.__exportStar(cl(), i);\n  }(Er)), Er;\n}\nvar uo;\nfunction hl() {\n  if (uo)\n    return Wi;\n  uo = 1, Object.defineProperty(Wi, \"__esModule\", { value: !0 }), Wi.HeartBeat = void 0;\n  const i = Ft, e = We, t = V, s = ac(), r = cc();\n  class n extends s.IHeartBeat {\n    constructor(c) {\n      super(c), this.events = new e.EventEmitter(), this.interval = r.HEARTBEAT_INTERVAL, this.interval = c?.interval || r.HEARTBEAT_INTERVAL;\n    }\n    static init(c) {\n      return i.__awaiter(this, void 0, void 0, function* () {\n        const u = new n(c);\n        return yield u.init(), u;\n      });\n    }\n    init() {\n      return i.__awaiter(this, void 0, void 0, function* () {\n        yield this.initialize();\n      });\n    }\n    stop() {\n      clearInterval(this.intervalRef);\n    }\n    on(c, u) {\n      this.events.on(c, u);\n    }\n    once(c, u) {\n      this.events.once(c, u);\n    }\n    off(c, u) {\n      this.events.off(c, u);\n    }\n    removeListener(c, u) {\n      this.events.removeListener(c, u);\n    }\n    initialize() {\n      return i.__awaiter(this, void 0, void 0, function* () {\n        this.intervalRef = setInterval(() => this.pulse(), t.toMiliseconds(this.interval));\n      });\n    }\n    pulse() {\n      this.events.emit(r.HEARTBEAT_EVENTS.pulse);\n    }\n  }\n  return Wi.HeartBeat = n, Wi;\n}\n(function(i) {\n  Object.defineProperty(i, \"__esModule\", { value: !0 });\n  const e = Ft;\n  e.__exportStar(hl(), i), e.__exportStar(ac(), i), e.__exportStar(cc(), i);\n})(Wt);\nvar ee = {}, Sr, lo;\nfunction ul() {\n  if (lo)\n    return Sr;\n  lo = 1;\n  function i(t) {\n    try {\n      return JSON.stringify(t);\n    } catch {\n      return '\"[Circular]\"';\n    }\n  }\n  Sr = e;\n  function e(t, s, r) {\n    var n = r && r.stringify || i, o = 1;\n    if (typeof t == \"object\" && t !== null) {\n      var c = s.length + o;\n      if (c === 1)\n        return t;\n      var u = new Array(c);\n      u[0] = n(t);\n      for (var d = 1; d < c; d++)\n        u[d] = n(s[d]);\n      return u.join(\" \");\n    }\n    if (typeof t != \"string\")\n      return t;\n    var p = s.length;\n    if (p === 0)\n      return t;\n    for (var b = \"\", x = 1 - o, O = -1, _ = t && t.length || 0, C = 0; C < _; ) {\n      if (t.charCodeAt(C) === 37 && C + 1 < _) {\n        switch (O = O > -1 ? O : 0, t.charCodeAt(C + 1)) {\n          case 100:\n          case 102:\n            if (x >= p || s[x] == null)\n              break;\n            O < C && (b += t.slice(O, C)), b += Number(s[x]), O = C + 2, C++;\n            break;\n          case 105:\n            if (x >= p || s[x] == null)\n              break;\n            O < C && (b += t.slice(O, C)), b += Math.floor(Number(s[x])), O = C + 2, C++;\n            break;\n          case 79:\n          case 111:\n          case 106:\n            if (x >= p || s[x] === void 0)\n              break;\n            O < C && (b += t.slice(O, C));\n            var F = typeof s[x];\n            if (F === \"string\") {\n              b += \"'\" + s[x] + \"'\", O = C + 2, C++;\n              break;\n            }\n            if (F === \"function\") {\n              b += s[x].name || \"<anonymous>\", O = C + 2, C++;\n              break;\n            }\n            b += n(s[x]), O = C + 2, C++;\n            break;\n          case 115:\n            if (x >= p)\n              break;\n            O < C && (b += t.slice(O, C)), b += String(s[x]), O = C + 2, C++;\n            break;\n          case 37:\n            O < C && (b += t.slice(O, C)), b += \"%\", O = C + 2, C++, x--;\n            break;\n        }\n        ++x;\n      }\n      ++C;\n    }\n    return O === -1 ? t : (O < _ && (b += t.slice(O)), b);\n  }\n  return Sr;\n}\nvar Ir, fo;\nfunction ll() {\n  if (fo)\n    return Ir;\n  fo = 1;\n  const i = ul();\n  Ir = r;\n  const e = w().console || {}, t = {\n    mapHttpRequest: _,\n    mapHttpResponse: _,\n    wrapRequestSerializer: C,\n    wrapResponseSerializer: C,\n    wrapErrorSerializer: C,\n    req: _,\n    res: _,\n    err: x\n  };\n  function s(f, a) {\n    return Array.isArray(f) ? f.filter(function(L) {\n      return L !== \"!stdSerializers.err\";\n    }) : f === !0 ? Object.keys(a) : !1;\n  }\n  function r(f) {\n    f = f || {}, f.browser = f.browser || {};\n    const a = f.browser.transmit;\n    if (a && typeof a.send != \"function\")\n      throw Error(\"pino: transmit option must have a send function\");\n    const l = f.browser.write || e;\n    f.browser.write && (f.browser.asObject = !0);\n    const L = f.serializers || {}, v = s(f.browser.serialize, L);\n    let R = f.browser.serialize;\n    Array.isArray(f.browser.serialize) && f.browser.serialize.indexOf(\"!stdSerializers.err\") > -1 && (R = !1);\n    const $ = [\"error\", \"fatal\", \"warn\", \"info\", \"debug\", \"trace\"];\n    typeof l == \"function\" && (l.error = l.fatal = l.warn = l.info = l.debug = l.trace = l), f.enabled === !1 && (f.level = \"silent\");\n    const q = f.level || \"info\", m = Object.create(l);\n    m.log || (m.log = F), Object.defineProperty(m, \"levelVal\", {\n      get: B\n    }), Object.defineProperty(m, \"level\", {\n      get: z,\n      set: j\n    });\n    const E = {\n      transmit: a,\n      serialize: v,\n      asObject: f.browser.asObject,\n      levels: $,\n      timestamp: O(f)\n    };\n    m.levels = r.levels, m.level = q, m.setMaxListeners = m.getMaxListeners = m.emit = m.addListener = m.on = m.prependListener = m.once = m.prependOnceListener = m.removeListener = m.removeAllListeners = m.listeners = m.listenerCount = m.eventNames = m.write = m.flush = F, m.serializers = L, m._serialize = v, m._stdErrSerialize = R, m.child = U, a && (m._logEvent = b());\n    function B() {\n      return this.level === \"silent\" ? 1 / 0 : this.levels.values[this.level];\n    }\n    function z() {\n      return this._level;\n    }\n    function j(M) {\n      if (M !== \"silent\" && !this.levels.values[M])\n        throw Error(\"unknown level \" + M);\n      this._level = M, n(E, m, \"error\", \"log\"), n(E, m, \"fatal\", \"error\"), n(E, m, \"warn\", \"error\"), n(E, m, \"info\", \"log\"), n(E, m, \"debug\", \"log\"), n(E, m, \"trace\", \"log\");\n    }\n    function U(M, H) {\n      if (!M)\n        throw new Error(\"missing bindings for child Pino\");\n      H = H || {}, v && M.serializers && (H.serializers = M.serializers);\n      const te = H.serializers;\n      if (v && te) {\n        var G = Object.assign({}, L, te), ie = f.browser.serialize === !0 ? Object.keys(G) : v;\n        delete M.serializers, u([M], ie, G, this._stdErrSerialize);\n      }\n      function Q(se) {\n        this._childLevel = (se._childLevel | 0) + 1, this.error = d(se, M, \"error\"), this.fatal = d(se, M, \"fatal\"), this.warn = d(se, M, \"warn\"), this.info = d(se, M, \"info\"), this.debug = d(se, M, \"debug\"), this.trace = d(se, M, \"trace\"), G && (this.serializers = G, this._serialize = ie), a && (this._logEvent = b(\n          [].concat(se._logEvent.bindings, M)\n        ));\n      }\n      return Q.prototype = this, new Q(this);\n    }\n    return m;\n  }\n  r.levels = {\n    values: {\n      fatal: 60,\n      error: 50,\n      warn: 40,\n      info: 30,\n      debug: 20,\n      trace: 10\n    },\n    labels: {\n      10: \"trace\",\n      20: \"debug\",\n      30: \"info\",\n      40: \"warn\",\n      50: \"error\",\n      60: \"fatal\"\n    }\n  }, r.stdSerializers = t, r.stdTimeFunctions = Object.assign({}, { nullTime: K, epochTime: I, unixTime: D, isoTime: y });\n  function n(f, a, l, L) {\n    const v = Object.getPrototypeOf(a);\n    a[l] = a.levelVal > a.levels.values[l] ? F : v[l] ? v[l] : e[l] || e[L] || F, o(f, a, l);\n  }\n  function o(f, a, l) {\n    !f.transmit && a[l] === F || (a[l] = function(L) {\n      return function() {\n        const R = f.timestamp(), $ = new Array(arguments.length), q = Object.getPrototypeOf && Object.getPrototypeOf(this) === e ? e : this;\n        for (var m = 0; m < $.length; m++)\n          $[m] = arguments[m];\n        if (f.serialize && !f.asObject && u($, this._serialize, this.serializers, this._stdErrSerialize), f.asObject ? L.call(q, c(this, l, $, R)) : L.apply(q, $), f.transmit) {\n          const E = f.transmit.level || a.level, B = r.levels.values[E], z = r.levels.values[l];\n          if (z < B)\n            return;\n          p(this, {\n            ts: R,\n            methodLevel: l,\n            methodValue: z,\n            transmitLevel: E,\n            transmitValue: r.levels.values[f.transmit.level || a.level],\n            send: f.transmit.send,\n            val: a.levelVal\n          }, $);\n        }\n      };\n    }(a[l]));\n  }\n  function c(f, a, l, L) {\n    f._serialize && u(l, f._serialize, f.serializers, f._stdErrSerialize);\n    const v = l.slice();\n    let R = v[0];\n    const $ = {};\n    L && ($.time = L), $.level = r.levels.values[a];\n    let q = (f._childLevel | 0) + 1;\n    if (q < 1 && (q = 1), R !== null && typeof R == \"object\") {\n      for (; q-- && typeof v[0] == \"object\"; )\n        Object.assign($, v.shift());\n      R = v.length ? i(v.shift(), v) : void 0;\n    } else\n      typeof R == \"string\" && (R = i(v.shift(), v));\n    return R !== void 0 && ($.msg = R), $;\n  }\n  function u(f, a, l, L) {\n    for (const v in f)\n      if (L && f[v] instanceof Error)\n        f[v] = r.stdSerializers.err(f[v]);\n      else if (typeof f[v] == \"object\" && !Array.isArray(f[v]))\n        for (const R in f[v])\n          a && a.indexOf(R) > -1 && R in l && (f[v][R] = l[R](f[v][R]));\n  }\n  function d(f, a, l) {\n    return function() {\n      const L = new Array(1 + arguments.length);\n      L[0] = a;\n      for (var v = 1; v < L.length; v++)\n        L[v] = arguments[v - 1];\n      return f[l].apply(this, L);\n    };\n  }\n  function p(f, a, l) {\n    const L = a.send, v = a.ts, R = a.methodLevel, $ = a.methodValue, q = a.val, m = f._logEvent.bindings;\n    u(\n      l,\n      f._serialize || Object.keys(f.serializers),\n      f.serializers,\n      f._stdErrSerialize === void 0 ? !0 : f._stdErrSerialize\n    ), f._logEvent.ts = v, f._logEvent.messages = l.filter(function(E) {\n      return m.indexOf(E) === -1;\n    }), f._logEvent.level.label = R, f._logEvent.level.value = $, L(R, f._logEvent, q), f._logEvent = b(m);\n  }\n  function b(f) {\n    return {\n      ts: 0,\n      messages: [],\n      bindings: f || [],\n      level: { label: \"\", value: 0 }\n    };\n  }\n  function x(f) {\n    const a = {\n      type: f.constructor.name,\n      msg: f.message,\n      stack: f.stack\n    };\n    for (const l in f)\n      a[l] === void 0 && (a[l] = f[l]);\n    return a;\n  }\n  function O(f) {\n    return typeof f.timestamp == \"function\" ? f.timestamp : f.timestamp === !1 ? K : I;\n  }\n  function _() {\n    return {};\n  }\n  function C(f) {\n    return f;\n  }\n  function F() {\n  }\n  function K() {\n    return !1;\n  }\n  function I() {\n    return Date.now();\n  }\n  function D() {\n    return Math.round(Date.now() / 1e3);\n  }\n  function y() {\n    return new Date(Date.now()).toISOString();\n  }\n  function w() {\n    function f(a) {\n      return typeof a < \"u\" && a;\n    }\n    try {\n      return typeof globalThis < \"u\" || Object.defineProperty(Object.prototype, \"globalThis\", {\n        get: function() {\n          return delete Object.prototype.globalThis, this.globalThis = this;\n        },\n        configurable: !0\n      }), globalThis;\n    } catch {\n      return f(self) || f(window) || f(this) || {};\n    }\n  }\n  return Ir;\n}\nvar vi = {}, po;\nfunction hc() {\n  return po || (po = 1, Object.defineProperty(vi, \"__esModule\", { value: !0 }), vi.PINO_CUSTOM_CONTEXT_KEY = vi.PINO_LOGGER_DEFAULTS = void 0, vi.PINO_LOGGER_DEFAULTS = {\n    level: \"info\"\n  }, vi.PINO_CUSTOM_CONTEXT_KEY = \"custom_context\"), vi;\n}\nvar yt = {}, go;\nfunction dl() {\n  if (go)\n    return yt;\n  go = 1, Object.defineProperty(yt, \"__esModule\", { value: !0 }), yt.generateChildLogger = yt.formatChildLoggerContext = yt.getLoggerContext = yt.setBrowserLoggerContext = yt.getBrowserLoggerContext = yt.getDefaultLoggerOptions = void 0;\n  const i = hc();\n  function e(c) {\n    return Object.assign(Object.assign({}, c), { level: c?.level || i.PINO_LOGGER_DEFAULTS.level });\n  }\n  yt.getDefaultLoggerOptions = e;\n  function t(c, u = i.PINO_CUSTOM_CONTEXT_KEY) {\n    return c[u] || \"\";\n  }\n  yt.getBrowserLoggerContext = t;\n  function s(c, u, d = i.PINO_CUSTOM_CONTEXT_KEY) {\n    return c[d] = u, c;\n  }\n  yt.setBrowserLoggerContext = s;\n  function r(c, u = i.PINO_CUSTOM_CONTEXT_KEY) {\n    let d = \"\";\n    return typeof c.bindings > \"u\" ? d = t(c, u) : d = c.bindings().context || \"\", d;\n  }\n  yt.getLoggerContext = r;\n  function n(c, u, d = i.PINO_CUSTOM_CONTEXT_KEY) {\n    const p = r(c, d);\n    return p.trim() ? `${p}/${u}` : u;\n  }\n  yt.formatChildLoggerContext = n;\n  function o(c, u, d = i.PINO_CUSTOM_CONTEXT_KEY) {\n    const p = n(c, u, d), b = c.child({ context: p });\n    return s(b, p, d);\n  }\n  return yt.generateChildLogger = o, yt;\n}\n(function(i) {\n  Object.defineProperty(i, \"__esModule\", { value: !0 }), i.pino = void 0;\n  const e = Ft, t = e.__importDefault(ll());\n  Object.defineProperty(i, \"pino\", { enumerable: !0, get: function() {\n    return t.default;\n  } }), e.__exportStar(hc(), i), e.__exportStar(dl(), i);\n})(ee);\nlet fl = class extends Nt {\n  constructor(e) {\n    super(), this.opts = e, this.protocol = \"wc\", this.version = 2;\n  }\n}, pl = class extends Nt {\n  constructor(e, t) {\n    super(), this.core = e, this.logger = t, this.records = /* @__PURE__ */ new Map();\n  }\n}, gl = class {\n  constructor(e, t) {\n    this.logger = e, this.core = t;\n  }\n}, yl = class extends Nt {\n  constructor(e, t) {\n    super(), this.relayer = e, this.logger = t;\n  }\n}, ml = class extends Nt {\n  constructor(e) {\n    super();\n  }\n}, bl = class {\n  constructor(e, t, s, r) {\n    this.core = e, this.logger = t, this.name = s;\n  }\n}, wl = class extends Nt {\n  constructor(e, t) {\n    super(), this.relayer = e, this.logger = t;\n  }\n}, vl = class extends Nt {\n  constructor(e, t) {\n    super(), this.core = e, this.logger = t;\n  }\n}, _l = class {\n  constructor(e, t) {\n    this.projectId = e, this.logger = t;\n  }\n}, El = class {\n  constructor(e) {\n    this.opts = e, this.protocol = \"wc\", this.version = 2;\n  }\n}, Sl = class {\n  constructor(e) {\n    this.client = e;\n  }\n};\nconst Il = (i) => JSON.stringify(i, (e, t) => typeof t == \"bigint\" ? t.toString() + \"n\" : t), Dl = (i) => {\n  const e = /([\\[:])?(\\d{17,}|(?:[9](?:[1-9]07199254740991|0[1-9]7199254740991|00[8-9]199254740991|007[2-9]99254740991|007199[3-9]54740991|0071992[6-9]4740991|00719925[5-9]740991|007199254[8-9]40991|0071992547[5-9]0991|00719925474[1-9]991|00719925474099[2-9])))([,\\}\\]])/g, t = i.replace(e, '$1\"$2n\"$3');\n  return JSON.parse(t, (s, r) => typeof r == \"string\" && r.match(/^\\d+n$/) ? BigInt(r.substring(0, r.length - 1)) : r);\n};\nfunction rn(i) {\n  if (typeof i != \"string\")\n    throw new Error(`Cannot safe json parse value of type ${typeof i}`);\n  try {\n    return Dl(i);\n  } catch {\n    return i;\n  }\n}\nfunction rr(i) {\n  return typeof i == \"string\" ? i : Il(i) || \"\";\n}\nvar nn = {}, li = {}, nr = {}, or = {};\nObject.defineProperty(or, \"__esModule\", { value: !0 });\nor.BrowserRandomSource = void 0;\nconst yo = 65536;\nclass xl {\n  constructor() {\n    this.isAvailable = !1, this.isInstantiated = !1;\n    const e = typeof self < \"u\" ? self.crypto || self.msCrypto : null;\n    e && e.getRandomValues !== void 0 && (this._crypto = e, this.isAvailable = !0, this.isInstantiated = !0);\n  }\n  randomBytes(e) {\n    if (!this.isAvailable || !this._crypto)\n      throw new Error(\"Browser random byte generator is not available.\");\n    const t = new Uint8Array(e);\n    for (let s = 0; s < t.length; s += yo)\n      this._crypto.getRandomValues(t.subarray(s, s + Math.min(t.length - s, yo)));\n    return t;\n  }\n}\nor.BrowserRandomSource = xl;\nfunction Ol(i) {\n  throw new Error('Could not dynamically require \"' + i + '\". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');\n}\nvar ar = {}, Pt = {};\nObject.defineProperty(Pt, \"__esModule\", { value: !0 });\nfunction Nl(i) {\n  for (var e = 0; e < i.length; e++)\n    i[e] = 0;\n  return i;\n}\nPt.wipe = Nl;\nconst Pl = {}, Rl = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  default: Pl\n}, Symbol.toStringTag, { value: \"Module\" })), Cl = /* @__PURE__ */ (0,_lastConnected_b964dc30_js__WEBPACK_IMPORTED_MODULE_0__.g)(Rl);\nObject.defineProperty(ar, \"__esModule\", { value: !0 });\nar.NodeRandomSource = void 0;\nconst Al = Pt;\nclass Tl {\n  constructor() {\n    if (this.isAvailable = !1, this.isInstantiated = !1, typeof Ol < \"u\") {\n      const e = Cl;\n      e && e.randomBytes && (this._crypto = e, this.isAvailable = !0, this.isInstantiated = !0);\n    }\n  }\n  randomBytes(e) {\n    if (!this.isAvailable || !this._crypto)\n      throw new Error(\"Node.js random byte generator is not available.\");\n    let t = this._crypto.randomBytes(e);\n    if (t.length !== e)\n      throw new Error(\"NodeRandomSource: got fewer bytes than requested\");\n    const s = new Uint8Array(e);\n    for (let r = 0; r < s.length; r++)\n      s[r] = t[r];\n    return (0, Al.wipe)(t), s;\n  }\n}\nar.NodeRandomSource = Tl;\nObject.defineProperty(nr, \"__esModule\", { value: !0 });\nnr.SystemRandomSource = void 0;\nconst $l = or, Fl = ar;\nclass Ul {\n  constructor() {\n    if (this.isAvailable = !1, this.name = \"\", this._source = new $l.BrowserRandomSource(), this._source.isAvailable) {\n      this.isAvailable = !0, this.name = \"Browser\";\n      return;\n    }\n    if (this._source = new Fl.NodeRandomSource(), this._source.isAvailable) {\n      this.isAvailable = !0, this.name = \"Node\";\n      return;\n    }\n  }\n  randomBytes(e) {\n    if (!this.isAvailable)\n      throw new Error(\"System random byte generator is not available.\");\n    return this._source.randomBytes(e);\n  }\n}\nnr.SystemRandomSource = Ul;\nvar oe = {}, uc = {};\n(function(i) {\n  Object.defineProperty(i, \"__esModule\", { value: !0 });\n  function e(c, u) {\n    var d = c >>> 16 & 65535, p = c & 65535, b = u >>> 16 & 65535, x = u & 65535;\n    return p * x + (d * x + p * b << 16 >>> 0) | 0;\n  }\n  i.mul = Math.imul || e;\n  function t(c, u) {\n    return c + u | 0;\n  }\n  i.add = t;\n  function s(c, u) {\n    return c - u | 0;\n  }\n  i.sub = s;\n  function r(c, u) {\n    return c << u | c >>> 32 - u;\n  }\n  i.rotl = r;\n  function n(c, u) {\n    return c << 32 - u | c >>> u;\n  }\n  i.rotr = n;\n  function o(c) {\n    return typeof c == \"number\" && isFinite(c) && Math.floor(c) === c;\n  }\n  i.isInteger = Number.isInteger || o, i.MAX_SAFE_INTEGER = 9007199254740991, i.isSafeInteger = function(c) {\n    return i.isInteger(c) && c >= -i.MAX_SAFE_INTEGER && c <= i.MAX_SAFE_INTEGER;\n  };\n})(uc);\nObject.defineProperty(oe, \"__esModule\", { value: !0 });\nvar lc = uc;\nfunction Ll(i, e) {\n  return e === void 0 && (e = 0), (i[e + 0] << 8 | i[e + 1]) << 16 >> 16;\n}\noe.readInt16BE = Ll;\nfunction Ml(i, e) {\n  return e === void 0 && (e = 0), (i[e + 0] << 8 | i[e + 1]) >>> 0;\n}\noe.readUint16BE = Ml;\nfunction ql(i, e) {\n  return e === void 0 && (e = 0), (i[e + 1] << 8 | i[e]) << 16 >> 16;\n}\noe.readInt16LE = ql;\nfunction jl(i, e) {\n  return e === void 0 && (e = 0), (i[e + 1] << 8 | i[e]) >>> 0;\n}\noe.readUint16LE = jl;\nfunction dc(i, e, t) {\n  return e === void 0 && (e = new Uint8Array(2)), t === void 0 && (t = 0), e[t + 0] = i >>> 8, e[t + 1] = i >>> 0, e;\n}\noe.writeUint16BE = dc;\noe.writeInt16BE = dc;\nfunction fc(i, e, t) {\n  return e === void 0 && (e = new Uint8Array(2)), t === void 0 && (t = 0), e[t + 0] = i >>> 0, e[t + 1] = i >>> 8, e;\n}\noe.writeUint16LE = fc;\noe.writeInt16LE = fc;\nfunction Mr(i, e) {\n  return e === void 0 && (e = 0), i[e] << 24 | i[e + 1] << 16 | i[e + 2] << 8 | i[e + 3];\n}\noe.readInt32BE = Mr;\nfunction qr(i, e) {\n  return e === void 0 && (e = 0), (i[e] << 24 | i[e + 1] << 16 | i[e + 2] << 8 | i[e + 3]) >>> 0;\n}\noe.readUint32BE = qr;\nfunction jr(i, e) {\n  return e === void 0 && (e = 0), i[e + 3] << 24 | i[e + 2] << 16 | i[e + 1] << 8 | i[e];\n}\noe.readInt32LE = jr;\nfunction zr(i, e) {\n  return e === void 0 && (e = 0), (i[e + 3] << 24 | i[e + 2] << 16 | i[e + 1] << 8 | i[e]) >>> 0;\n}\noe.readUint32LE = zr;\nfunction ks(i, e, t) {\n  return e === void 0 && (e = new Uint8Array(4)), t === void 0 && (t = 0), e[t + 0] = i >>> 24, e[t + 1] = i >>> 16, e[t + 2] = i >>> 8, e[t + 3] = i >>> 0, e;\n}\noe.writeUint32BE = ks;\noe.writeInt32BE = ks;\nfunction Hs(i, e, t) {\n  return e === void 0 && (e = new Uint8Array(4)), t === void 0 && (t = 0), e[t + 0] = i >>> 0, e[t + 1] = i >>> 8, e[t + 2] = i >>> 16, e[t + 3] = i >>> 24, e;\n}\noe.writeUint32LE = Hs;\noe.writeInt32LE = Hs;\nfunction zl(i, e) {\n  e === void 0 && (e = 0);\n  var t = Mr(i, e), s = Mr(i, e + 4);\n  return t * 4294967296 + s - (s >> 31) * 4294967296;\n}\noe.readInt64BE = zl;\nfunction Kl(i, e) {\n  e === void 0 && (e = 0);\n  var t = qr(i, e), s = qr(i, e + 4);\n  return t * 4294967296 + s;\n}\noe.readUint64BE = Kl;\nfunction Vl(i, e) {\n  e === void 0 && (e = 0);\n  var t = jr(i, e), s = jr(i, e + 4);\n  return s * 4294967296 + t - (t >> 31) * 4294967296;\n}\noe.readInt64LE = Vl;\nfunction Bl(i, e) {\n  e === void 0 && (e = 0);\n  var t = zr(i, e), s = zr(i, e + 4);\n  return s * 4294967296 + t;\n}\noe.readUint64LE = Bl;\nfunction pc(i, e, t) {\n  return e === void 0 && (e = new Uint8Array(8)), t === void 0 && (t = 0), ks(i / 4294967296 >>> 0, e, t), ks(i >>> 0, e, t + 4), e;\n}\noe.writeUint64BE = pc;\noe.writeInt64BE = pc;\nfunction gc(i, e, t) {\n  return e === void 0 && (e = new Uint8Array(8)), t === void 0 && (t = 0), Hs(i >>> 0, e, t), Hs(i / 4294967296 >>> 0, e, t + 4), e;\n}\noe.writeUint64LE = gc;\noe.writeInt64LE = gc;\nfunction kl(i, e, t) {\n  if (t === void 0 && (t = 0), i % 8 !== 0)\n    throw new Error(\"readUintBE supports only bitLengths divisible by 8\");\n  if (i / 8 > e.length - t)\n    throw new Error(\"readUintBE: array is too short for the given bitLength\");\n  for (var s = 0, r = 1, n = i / 8 + t - 1; n >= t; n--)\n    s += e[n] * r, r *= 256;\n  return s;\n}\noe.readUintBE = kl;\nfunction Hl(i, e, t) {\n  if (t === void 0 && (t = 0), i % 8 !== 0)\n    throw new Error(\"readUintLE supports only bitLengths divisible by 8\");\n  if (i / 8 > e.length - t)\n    throw new Error(\"readUintLE: array is too short for the given bitLength\");\n  for (var s = 0, r = 1, n = t; n < t + i / 8; n++)\n    s += e[n] * r, r *= 256;\n  return s;\n}\noe.readUintLE = Hl;\nfunction Gl(i, e, t, s) {\n  if (t === void 0 && (t = new Uint8Array(i / 8)), s === void 0 && (s = 0), i % 8 !== 0)\n    throw new Error(\"writeUintBE supports only bitLengths divisible by 8\");\n  if (!lc.isSafeInteger(e))\n    throw new Error(\"writeUintBE value must be an integer\");\n  for (var r = 1, n = i / 8 + s - 1; n >= s; n--)\n    t[n] = e / r & 255, r *= 256;\n  return t;\n}\noe.writeUintBE = Gl;\nfunction Wl(i, e, t, s) {\n  if (t === void 0 && (t = new Uint8Array(i / 8)), s === void 0 && (s = 0), i % 8 !== 0)\n    throw new Error(\"writeUintLE supports only bitLengths divisible by 8\");\n  if (!lc.isSafeInteger(e))\n    throw new Error(\"writeUintLE value must be an integer\");\n  for (var r = 1, n = s; n < s + i / 8; n++)\n    t[n] = e / r & 255, r *= 256;\n  return t;\n}\noe.writeUintLE = Wl;\nfunction Yl(i, e) {\n  e === void 0 && (e = 0);\n  var t = new DataView(i.buffer, i.byteOffset, i.byteLength);\n  return t.getFloat32(e);\n}\noe.readFloat32BE = Yl;\nfunction Jl(i, e) {\n  e === void 0 && (e = 0);\n  var t = new DataView(i.buffer, i.byteOffset, i.byteLength);\n  return t.getFloat32(e, !0);\n}\noe.readFloat32LE = Jl;\nfunction Ql(i, e) {\n  e === void 0 && (e = 0);\n  var t = new DataView(i.buffer, i.byteOffset, i.byteLength);\n  return t.getFloat64(e);\n}\noe.readFloat64BE = Ql;\nfunction Xl(i, e) {\n  e === void 0 && (e = 0);\n  var t = new DataView(i.buffer, i.byteOffset, i.byteLength);\n  return t.getFloat64(e, !0);\n}\noe.readFloat64LE = Xl;\nfunction Zl(i, e, t) {\n  e === void 0 && (e = new Uint8Array(4)), t === void 0 && (t = 0);\n  var s = new DataView(e.buffer, e.byteOffset, e.byteLength);\n  return s.setFloat32(t, i), e;\n}\noe.writeFloat32BE = Zl;\nfunction ed(i, e, t) {\n  e === void 0 && (e = new Uint8Array(4)), t === void 0 && (t = 0);\n  var s = new DataView(e.buffer, e.byteOffset, e.byteLength);\n  return s.setFloat32(t, i, !0), e;\n}\noe.writeFloat32LE = ed;\nfunction td(i, e, t) {\n  e === void 0 && (e = new Uint8Array(8)), t === void 0 && (t = 0);\n  var s = new DataView(e.buffer, e.byteOffset, e.byteLength);\n  return s.setFloat64(t, i), e;\n}\noe.writeFloat64BE = td;\nfunction id(i, e, t) {\n  e === void 0 && (e = new Uint8Array(8)), t === void 0 && (t = 0);\n  var s = new DataView(e.buffer, e.byteOffset, e.byteLength);\n  return s.setFloat64(t, i, !0), e;\n}\noe.writeFloat64LE = id;\n(function(i) {\n  Object.defineProperty(i, \"__esModule\", { value: !0 }), i.randomStringForEntropy = i.randomString = i.randomUint32 = i.randomBytes = i.defaultRandomSource = void 0;\n  const e = nr, t = oe, s = Pt;\n  i.defaultRandomSource = new e.SystemRandomSource();\n  function r(d, p = i.defaultRandomSource) {\n    return p.randomBytes(d);\n  }\n  i.randomBytes = r;\n  function n(d = i.defaultRandomSource) {\n    const p = r(4, d), b = (0, t.readUint32LE)(p);\n    return (0, s.wipe)(p), b;\n  }\n  i.randomUint32 = n;\n  const o = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\n  function c(d, p = o, b = i.defaultRandomSource) {\n    if (p.length < 2)\n      throw new Error(\"randomString charset is too short\");\n    if (p.length > 256)\n      throw new Error(\"randomString charset is too long\");\n    let x = \"\";\n    const O = p.length, _ = 256 - 256 % O;\n    for (; d > 0; ) {\n      const C = r(Math.ceil(d * 256 / _), b);\n      for (let F = 0; F < C.length && d > 0; F++) {\n        const K = C[F];\n        K < _ && (x += p.charAt(K % O), d--);\n      }\n      (0, s.wipe)(C);\n    }\n    return x;\n  }\n  i.randomString = c;\n  function u(d, p = o, b = i.defaultRandomSource) {\n    const x = Math.ceil(d / (Math.log(p.length) / Math.LN2));\n    return c(x, p, b);\n  }\n  i.randomStringForEntropy = u;\n})(li);\nvar yc = {};\n(function(i) {\n  Object.defineProperty(i, \"__esModule\", { value: !0 });\n  var e = oe, t = Pt;\n  i.DIGEST_LENGTH = 64, i.BLOCK_SIZE = 128;\n  var s = (\n    /** @class */\n    function() {\n      function c() {\n        this.digestLength = i.DIGEST_LENGTH, this.blockSize = i.BLOCK_SIZE, this._stateHi = new Int32Array(8), this._stateLo = new Int32Array(8), this._tempHi = new Int32Array(16), this._tempLo = new Int32Array(16), this._buffer = new Uint8Array(256), this._bufferLength = 0, this._bytesHashed = 0, this._finished = !1, this.reset();\n      }\n      return c.prototype._initState = function() {\n        this._stateHi[0] = 1779033703, this._stateHi[1] = 3144134277, this._stateHi[2] = 1013904242, this._stateHi[3] = 2773480762, this._stateHi[4] = 1359893119, this._stateHi[5] = 2600822924, this._stateHi[6] = 528734635, this._stateHi[7] = 1541459225, this._stateLo[0] = 4089235720, this._stateLo[1] = 2227873595, this._stateLo[2] = 4271175723, this._stateLo[3] = 1595750129, this._stateLo[4] = 2917565137, this._stateLo[5] = 725511199, this._stateLo[6] = 4215389547, this._stateLo[7] = 327033209;\n      }, c.prototype.reset = function() {\n        return this._initState(), this._bufferLength = 0, this._bytesHashed = 0, this._finished = !1, this;\n      }, c.prototype.clean = function() {\n        t.wipe(this._buffer), t.wipe(this._tempHi), t.wipe(this._tempLo), this.reset();\n      }, c.prototype.update = function(u, d) {\n        if (d === void 0 && (d = u.length), this._finished)\n          throw new Error(\"SHA512: can't update because hash was finished.\");\n        var p = 0;\n        if (this._bytesHashed += d, this._bufferLength > 0) {\n          for (; this._bufferLength < i.BLOCK_SIZE && d > 0; )\n            this._buffer[this._bufferLength++] = u[p++], d--;\n          this._bufferLength === this.blockSize && (n(this._tempHi, this._tempLo, this._stateHi, this._stateLo, this._buffer, 0, this.blockSize), this._bufferLength = 0);\n        }\n        for (d >= this.blockSize && (p = n(this._tempHi, this._tempLo, this._stateHi, this._stateLo, u, p, d), d %= this.blockSize); d > 0; )\n          this._buffer[this._bufferLength++] = u[p++], d--;\n        return this;\n      }, c.prototype.finish = function(u) {\n        if (!this._finished) {\n          var d = this._bytesHashed, p = this._bufferLength, b = d / 536870912 | 0, x = d << 3, O = d % 128 < 112 ? 128 : 256;\n          this._buffer[p] = 128;\n          for (var _ = p + 1; _ < O - 8; _++)\n            this._buffer[_] = 0;\n          e.writeUint32BE(b, this._buffer, O - 8), e.writeUint32BE(x, this._buffer, O - 4), n(this._tempHi, this._tempLo, this._stateHi, this._stateLo, this._buffer, 0, O), this._finished = !0;\n        }\n        for (var _ = 0; _ < this.digestLength / 8; _++)\n          e.writeUint32BE(this._stateHi[_], u, _ * 8), e.writeUint32BE(this._stateLo[_], u, _ * 8 + 4);\n        return this;\n      }, c.prototype.digest = function() {\n        var u = new Uint8Array(this.digestLength);\n        return this.finish(u), u;\n      }, c.prototype.saveState = function() {\n        if (this._finished)\n          throw new Error(\"SHA256: cannot save finished state\");\n        return {\n          stateHi: new Int32Array(this._stateHi),\n          stateLo: new Int32Array(this._stateLo),\n          buffer: this._bufferLength > 0 ? new Uint8Array(this._buffer) : void 0,\n          bufferLength: this._bufferLength,\n          bytesHashed: this._bytesHashed\n        };\n      }, c.prototype.restoreState = function(u) {\n        return this._stateHi.set(u.stateHi), this._stateLo.set(u.stateLo), this._bufferLength = u.bufferLength, u.buffer && this._buffer.set(u.buffer), this._bytesHashed = u.bytesHashed, this._finished = !1, this;\n      }, c.prototype.cleanSavedState = function(u) {\n        t.wipe(u.stateHi), t.wipe(u.stateLo), u.buffer && t.wipe(u.buffer), u.bufferLength = 0, u.bytesHashed = 0;\n      }, c;\n    }()\n  );\n  i.SHA512 = s;\n  var r = new Int32Array([\n    1116352408,\n    3609767458,\n    1899447441,\n    602891725,\n    3049323471,\n    3964484399,\n    3921009573,\n    2173295548,\n    961987163,\n    4081628472,\n    1508970993,\n    3053834265,\n    2453635748,\n    2937671579,\n    2870763221,\n    3664609560,\n    3624381080,\n    2734883394,\n    310598401,\n    1164996542,\n    607225278,\n    1323610764,\n    1426881987,\n    3590304994,\n    1925078388,\n    4068182383,\n    2162078206,\n    991336113,\n    2614888103,\n    633803317,\n    3248222580,\n    3479774868,\n    3835390401,\n    2666613458,\n    4022224774,\n    944711139,\n    264347078,\n    2341262773,\n    604807628,\n    2007800933,\n    770255983,\n    1495990901,\n    1249150122,\n    1856431235,\n    1555081692,\n    3175218132,\n    1996064986,\n    2198950837,\n    2554220882,\n    3999719339,\n    2821834349,\n    766784016,\n    2952996808,\n    2566594879,\n    3210313671,\n    3203337956,\n    3336571891,\n    1034457026,\n    3584528711,\n    2466948901,\n    113926993,\n    3758326383,\n    338241895,\n    168717936,\n    666307205,\n    1188179964,\n    773529912,\n    1546045734,\n    1294757372,\n    1522805485,\n    1396182291,\n    2643833823,\n    1695183700,\n    2343527390,\n    1986661051,\n    1014477480,\n    2177026350,\n    1206759142,\n    2456956037,\n    344077627,\n    2730485921,\n    1290863460,\n    2820302411,\n    3158454273,\n    3259730800,\n    3505952657,\n    3345764771,\n    106217008,\n    3516065817,\n    3606008344,\n    3600352804,\n    1432725776,\n    4094571909,\n    1467031594,\n    275423344,\n    851169720,\n    430227734,\n    3100823752,\n    506948616,\n    1363258195,\n    659060556,\n    3750685593,\n    883997877,\n    3785050280,\n    958139571,\n    3318307427,\n    1322822218,\n    3812723403,\n    1537002063,\n    2003034995,\n    1747873779,\n    3602036899,\n    1955562222,\n    1575990012,\n    2024104815,\n    1125592928,\n    2227730452,\n    2716904306,\n    2361852424,\n    442776044,\n    2428436474,\n    593698344,\n    2756734187,\n    3733110249,\n    3204031479,\n    2999351573,\n    3329325298,\n    3815920427,\n    3391569614,\n    3928383900,\n    3515267271,\n    566280711,\n    3940187606,\n    3454069534,\n    4118630271,\n    4000239992,\n    116418474,\n    1914138554,\n    174292421,\n    2731055270,\n    289380356,\n    3203993006,\n    460393269,\n    320620315,\n    685471733,\n    587496836,\n    852142971,\n    1086792851,\n    1017036298,\n    365543100,\n    1126000580,\n    2618297676,\n    1288033470,\n    3409855158,\n    1501505948,\n    4234509866,\n    1607167915,\n    987167468,\n    1816402316,\n    1246189591\n  ]);\n  function n(c, u, d, p, b, x, O) {\n    for (var _ = d[0], C = d[1], F = d[2], K = d[3], I = d[4], D = d[5], y = d[6], w = d[7], f = p[0], a = p[1], l = p[2], L = p[3], v = p[4], R = p[5], $ = p[6], q = p[7], m, E, B, z, j, U, M, H; O >= 128; ) {\n      for (var te = 0; te < 16; te++) {\n        var G = 8 * te + x;\n        c[te] = e.readUint32BE(b, G), u[te] = e.readUint32BE(b, G + 4);\n      }\n      for (var te = 0; te < 80; te++) {\n        var ie = _, Q = C, se = F, T = K, A = I, N = D, h = y, S = w, W = f, X = a, fe = l, ve = L, ge = v, Se = R, Me = $, $e = q;\n        if (m = w, E = q, j = E & 65535, U = E >>> 16, M = m & 65535, H = m >>> 16, m = (I >>> 14 | v << 32 - 14) ^ (I >>> 18 | v << 32 - 18) ^ (v >>> 41 - 32 | I << 32 - (41 - 32)), E = (v >>> 14 | I << 32 - 14) ^ (v >>> 18 | I << 32 - 18) ^ (I >>> 41 - 32 | v << 32 - (41 - 32)), j += E & 65535, U += E >>> 16, M += m & 65535, H += m >>> 16, m = I & D ^ ~I & y, E = v & R ^ ~v & $, j += E & 65535, U += E >>> 16, M += m & 65535, H += m >>> 16, m = r[te * 2], E = r[te * 2 + 1], j += E & 65535, U += E >>> 16, M += m & 65535, H += m >>> 16, m = c[te % 16], E = u[te % 16], j += E & 65535, U += E >>> 16, M += m & 65535, H += m >>> 16, U += j >>> 16, M += U >>> 16, H += M >>> 16, B = M & 65535 | H << 16, z = j & 65535 | U << 16, m = B, E = z, j = E & 65535, U = E >>> 16, M = m & 65535, H = m >>> 16, m = (_ >>> 28 | f << 32 - 28) ^ (f >>> 34 - 32 | _ << 32 - (34 - 32)) ^ (f >>> 39 - 32 | _ << 32 - (39 - 32)), E = (f >>> 28 | _ << 32 - 28) ^ (_ >>> 34 - 32 | f << 32 - (34 - 32)) ^ (_ >>> 39 - 32 | f << 32 - (39 - 32)), j += E & 65535, U += E >>> 16, M += m & 65535, H += m >>> 16, m = _ & C ^ _ & F ^ C & F, E = f & a ^ f & l ^ a & l, j += E & 65535, U += E >>> 16, M += m & 65535, H += m >>> 16, U += j >>> 16, M += U >>> 16, H += M >>> 16, S = M & 65535 | H << 16, $e = j & 65535 | U << 16, m = T, E = ve, j = E & 65535, U = E >>> 16, M = m & 65535, H = m >>> 16, m = B, E = z, j += E & 65535, U += E >>> 16, M += m & 65535, H += m >>> 16, U += j >>> 16, M += U >>> 16, H += M >>> 16, T = M & 65535 | H << 16, ve = j & 65535 | U << 16, C = ie, F = Q, K = se, I = T, D = A, y = N, w = h, _ = S, a = W, l = X, L = fe, v = ve, R = ge, $ = Se, q = Me, f = $e, te % 16 === 15)\n          for (var G = 0; G < 16; G++)\n            m = c[G], E = u[G], j = E & 65535, U = E >>> 16, M = m & 65535, H = m >>> 16, m = c[(G + 9) % 16], E = u[(G + 9) % 16], j += E & 65535, U += E >>> 16, M += m & 65535, H += m >>> 16, B = c[(G + 1) % 16], z = u[(G + 1) % 16], m = (B >>> 1 | z << 32 - 1) ^ (B >>> 8 | z << 32 - 8) ^ B >>> 7, E = (z >>> 1 | B << 32 - 1) ^ (z >>> 8 | B << 32 - 8) ^ (z >>> 7 | B << 32 - 7), j += E & 65535, U += E >>> 16, M += m & 65535, H += m >>> 16, B = c[(G + 14) % 16], z = u[(G + 14) % 16], m = (B >>> 19 | z << 32 - 19) ^ (z >>> 61 - 32 | B << 32 - (61 - 32)) ^ B >>> 6, E = (z >>> 19 | B << 32 - 19) ^ (B >>> 61 - 32 | z << 32 - (61 - 32)) ^ (z >>> 6 | B << 32 - 6), j += E & 65535, U += E >>> 16, M += m & 65535, H += m >>> 16, U += j >>> 16, M += U >>> 16, H += M >>> 16, c[G] = M & 65535 | H << 16, u[G] = j & 65535 | U << 16;\n      }\n      m = _, E = f, j = E & 65535, U = E >>> 16, M = m & 65535, H = m >>> 16, m = d[0], E = p[0], j += E & 65535, U += E >>> 16, M += m & 65535, H += m >>> 16, U += j >>> 16, M += U >>> 16, H += M >>> 16, d[0] = _ = M & 65535 | H << 16, p[0] = f = j & 65535 | U << 16, m = C, E = a, j = E & 65535, U = E >>> 16, M = m & 65535, H = m >>> 16, m = d[1], E = p[1], j += E & 65535, U += E >>> 16, M += m & 65535, H += m >>> 16, U += j >>> 16, M += U >>> 16, H += M >>> 16, d[1] = C = M & 65535 | H << 16, p[1] = a = j & 65535 | U << 16, m = F, E = l, j = E & 65535, U = E >>> 16, M = m & 65535, H = m >>> 16, m = d[2], E = p[2], j += E & 65535, U += E >>> 16, M += m & 65535, H += m >>> 16, U += j >>> 16, M += U >>> 16, H += M >>> 16, d[2] = F = M & 65535 | H << 16, p[2] = l = j & 65535 | U << 16, m = K, E = L, j = E & 65535, U = E >>> 16, M = m & 65535, H = m >>> 16, m = d[3], E = p[3], j += E & 65535, U += E >>> 16, M += m & 65535, H += m >>> 16, U += j >>> 16, M += U >>> 16, H += M >>> 16, d[3] = K = M & 65535 | H << 16, p[3] = L = j & 65535 | U << 16, m = I, E = v, j = E & 65535, U = E >>> 16, M = m & 65535, H = m >>> 16, m = d[4], E = p[4], j += E & 65535, U += E >>> 16, M += m & 65535, H += m >>> 16, U += j >>> 16, M += U >>> 16, H += M >>> 16, d[4] = I = M & 65535 | H << 16, p[4] = v = j & 65535 | U << 16, m = D, E = R, j = E & 65535, U = E >>> 16, M = m & 65535, H = m >>> 16, m = d[5], E = p[5], j += E & 65535, U += E >>> 16, M += m & 65535, H += m >>> 16, U += j >>> 16, M += U >>> 16, H += M >>> 16, d[5] = D = M & 65535 | H << 16, p[5] = R = j & 65535 | U << 16, m = y, E = $, j = E & 65535, U = E >>> 16, M = m & 65535, H = m >>> 16, m = d[6], E = p[6], j += E & 65535, U += E >>> 16, M += m & 65535, H += m >>> 16, U += j >>> 16, M += U >>> 16, H += M >>> 16, d[6] = y = M & 65535 | H << 16, p[6] = $ = j & 65535 | U << 16, m = w, E = q, j = E & 65535, U = E >>> 16, M = m & 65535, H = m >>> 16, m = d[7], E = p[7], j += E & 65535, U += E >>> 16, M += m & 65535, H += m >>> 16, U += j >>> 16, M += U >>> 16, H += M >>> 16, d[7] = w = M & 65535 | H << 16, p[7] = q = j & 65535 | U << 16, x += 128, O -= 128;\n    }\n    return x;\n  }\n  function o(c) {\n    var u = new s();\n    u.update(c);\n    var d = u.digest();\n    return u.clean(), d;\n  }\n  i.hash = o;\n})(yc);\n(function(i) {\n  Object.defineProperty(i, \"__esModule\", { value: !0 }), i.convertSecretKeyToX25519 = i.convertPublicKeyToX25519 = i.verify = i.sign = i.extractPublicKeyFromSecretKey = i.generateKeyPair = i.generateKeyPairFromSeed = i.SEED_LENGTH = i.SECRET_KEY_LENGTH = i.PUBLIC_KEY_LENGTH = i.SIGNATURE_LENGTH = void 0;\n  const e = li, t = yc, s = Pt;\n  i.SIGNATURE_LENGTH = 64, i.PUBLIC_KEY_LENGTH = 32, i.SECRET_KEY_LENGTH = 64, i.SEED_LENGTH = 32;\n  function r(T) {\n    const A = new Float64Array(16);\n    if (T)\n      for (let N = 0; N < T.length; N++)\n        A[N] = T[N];\n    return A;\n  }\n  const n = new Uint8Array(32);\n  n[0] = 9;\n  const o = r(), c = r([1]), u = r([\n    30883,\n    4953,\n    19914,\n    30187,\n    55467,\n    16705,\n    2637,\n    112,\n    59544,\n    30585,\n    16505,\n    36039,\n    65139,\n    11119,\n    27886,\n    20995\n  ]), d = r([\n    61785,\n    9906,\n    39828,\n    60374,\n    45398,\n    33411,\n    5274,\n    224,\n    53552,\n    61171,\n    33010,\n    6542,\n    64743,\n    22239,\n    55772,\n    9222\n  ]), p = r([\n    54554,\n    36645,\n    11616,\n    51542,\n    42930,\n    38181,\n    51040,\n    26924,\n    56412,\n    64982,\n    57905,\n    49316,\n    21502,\n    52590,\n    14035,\n    8553\n  ]), b = r([\n    26200,\n    26214,\n    26214,\n    26214,\n    26214,\n    26214,\n    26214,\n    26214,\n    26214,\n    26214,\n    26214,\n    26214,\n    26214,\n    26214,\n    26214,\n    26214\n  ]), x = r([\n    41136,\n    18958,\n    6951,\n    50414,\n    58488,\n    44335,\n    6150,\n    12099,\n    55207,\n    15867,\n    153,\n    11085,\n    57099,\n    20417,\n    9344,\n    11139\n  ]);\n  function O(T, A) {\n    for (let N = 0; N < 16; N++)\n      T[N] = A[N] | 0;\n  }\n  function _(T) {\n    let A = 1;\n    for (let N = 0; N < 16; N++) {\n      let h = T[N] + A + 65535;\n      A = Math.floor(h / 65536), T[N] = h - A * 65536;\n    }\n    T[0] += A - 1 + 37 * (A - 1);\n  }\n  function C(T, A, N) {\n    const h = ~(N - 1);\n    for (let S = 0; S < 16; S++) {\n      const W = h & (T[S] ^ A[S]);\n      T[S] ^= W, A[S] ^= W;\n    }\n  }\n  function F(T, A) {\n    const N = r(), h = r();\n    for (let S = 0; S < 16; S++)\n      h[S] = A[S];\n    _(h), _(h), _(h);\n    for (let S = 0; S < 2; S++) {\n      N[0] = h[0] - 65517;\n      for (let X = 1; X < 15; X++)\n        N[X] = h[X] - 65535 - (N[X - 1] >> 16 & 1), N[X - 1] &= 65535;\n      N[15] = h[15] - 32767 - (N[14] >> 16 & 1);\n      const W = N[15] >> 16 & 1;\n      N[14] &= 65535, C(h, N, 1 - W);\n    }\n    for (let S = 0; S < 16; S++)\n      T[2 * S] = h[S] & 255, T[2 * S + 1] = h[S] >> 8;\n  }\n  function K(T, A) {\n    let N = 0;\n    for (let h = 0; h < 32; h++)\n      N |= T[h] ^ A[h];\n    return (1 & N - 1 >>> 8) - 1;\n  }\n  function I(T, A) {\n    const N = new Uint8Array(32), h = new Uint8Array(32);\n    return F(N, T), F(h, A), K(N, h);\n  }\n  function D(T) {\n    const A = new Uint8Array(32);\n    return F(A, T), A[0] & 1;\n  }\n  function y(T, A) {\n    for (let N = 0; N < 16; N++)\n      T[N] = A[2 * N] + (A[2 * N + 1] << 8);\n    T[15] &= 32767;\n  }\n  function w(T, A, N) {\n    for (let h = 0; h < 16; h++)\n      T[h] = A[h] + N[h];\n  }\n  function f(T, A, N) {\n    for (let h = 0; h < 16; h++)\n      T[h] = A[h] - N[h];\n  }\n  function a(T, A, N) {\n    let h, S, W = 0, X = 0, fe = 0, ve = 0, ge = 0, Se = 0, Me = 0, $e = 0, be = 0, ye = 0, pe = 0, le = 0, ue = 0, he = 0, ce = 0, re = 0, de = 0, me = 0, ne = 0, _e = 0, Ee = 0, De = 0, xe = 0, Ie = 0, Ut = 0, qt = 0, si = 0, Dt = 0, fi = 0, Ki = 0, Os = 0, qe = N[0], Fe = N[1], je = N[2], ze = N[3], Ke = N[4], Ue = N[5], Qe = N[6], Xe = N[7], Ze = N[8], et = N[9], tt = N[10], Ye = N[11], Ve = N[12], Ae = N[13], it = N[14], st = N[15];\n    h = A[0], W += h * qe, X += h * Fe, fe += h * je, ve += h * ze, ge += h * Ke, Se += h * Ue, Me += h * Qe, $e += h * Xe, be += h * Ze, ye += h * et, pe += h * tt, le += h * Ye, ue += h * Ve, he += h * Ae, ce += h * it, re += h * st, h = A[1], X += h * qe, fe += h * Fe, ve += h * je, ge += h * ze, Se += h * Ke, Me += h * Ue, $e += h * Qe, be += h * Xe, ye += h * Ze, pe += h * et, le += h * tt, ue += h * Ye, he += h * Ve, ce += h * Ae, re += h * it, de += h * st, h = A[2], fe += h * qe, ve += h * Fe, ge += h * je, Se += h * ze, Me += h * Ke, $e += h * Ue, be += h * Qe, ye += h * Xe, pe += h * Ze, le += h * et, ue += h * tt, he += h * Ye, ce += h * Ve, re += h * Ae, de += h * it, me += h * st, h = A[3], ve += h * qe, ge += h * Fe, Se += h * je, Me += h * ze, $e += h * Ke, be += h * Ue, ye += h * Qe, pe += h * Xe, le += h * Ze, ue += h * et, he += h * tt, ce += h * Ye, re += h * Ve, de += h * Ae, me += h * it, ne += h * st, h = A[4], ge += h * qe, Se += h * Fe, Me += h * je, $e += h * ze, be += h * Ke, ye += h * Ue, pe += h * Qe, le += h * Xe, ue += h * Ze, he += h * et, ce += h * tt, re += h * Ye, de += h * Ve, me += h * Ae, ne += h * it, _e += h * st, h = A[5], Se += h * qe, Me += h * Fe, $e += h * je, be += h * ze, ye += h * Ke, pe += h * Ue, le += h * Qe, ue += h * Xe, he += h * Ze, ce += h * et, re += h * tt, de += h * Ye, me += h * Ve, ne += h * Ae, _e += h * it, Ee += h * st, h = A[6], Me += h * qe, $e += h * Fe, be += h * je, ye += h * ze, pe += h * Ke, le += h * Ue, ue += h * Qe, he += h * Xe, ce += h * Ze, re += h * et, de += h * tt, me += h * Ye, ne += h * Ve, _e += h * Ae, Ee += h * it, De += h * st, h = A[7], $e += h * qe, be += h * Fe, ye += h * je, pe += h * ze, le += h * Ke, ue += h * Ue, he += h * Qe, ce += h * Xe, re += h * Ze, de += h * et, me += h * tt, ne += h * Ye, _e += h * Ve, Ee += h * Ae, De += h * it, xe += h * st, h = A[8], be += h * qe, ye += h * Fe, pe += h * je, le += h * ze, ue += h * Ke, he += h * Ue, ce += h * Qe, re += h * Xe, de += h * Ze, me += h * et, ne += h * tt, _e += h * Ye, Ee += h * Ve, De += h * Ae, xe += h * it, Ie += h * st, h = A[9], ye += h * qe, pe += h * Fe, le += h * je, ue += h * ze, he += h * Ke, ce += h * Ue, re += h * Qe, de += h * Xe, me += h * Ze, ne += h * et, _e += h * tt, Ee += h * Ye, De += h * Ve, xe += h * Ae, Ie += h * it, Ut += h * st, h = A[10], pe += h * qe, le += h * Fe, ue += h * je, he += h * ze, ce += h * Ke, re += h * Ue, de += h * Qe, me += h * Xe, ne += h * Ze, _e += h * et, Ee += h * tt, De += h * Ye, xe += h * Ve, Ie += h * Ae, Ut += h * it, qt += h * st, h = A[11], le += h * qe, ue += h * Fe, he += h * je, ce += h * ze, re += h * Ke, de += h * Ue, me += h * Qe, ne += h * Xe, _e += h * Ze, Ee += h * et, De += h * tt, xe += h * Ye, Ie += h * Ve, Ut += h * Ae, qt += h * it, si += h * st, h = A[12], ue += h * qe, he += h * Fe, ce += h * je, re += h * ze, de += h * Ke, me += h * Ue, ne += h * Qe, _e += h * Xe, Ee += h * Ze, De += h * et, xe += h * tt, Ie += h * Ye, Ut += h * Ve, qt += h * Ae, si += h * it, Dt += h * st, h = A[13], he += h * qe, ce += h * Fe, re += h * je, de += h * ze, me += h * Ke, ne += h * Ue, _e += h * Qe, Ee += h * Xe, De += h * Ze, xe += h * et, Ie += h * tt, Ut += h * Ye, qt += h * Ve, si += h * Ae, Dt += h * it, fi += h * st, h = A[14], ce += h * qe, re += h * Fe, de += h * je, me += h * ze, ne += h * Ke, _e += h * Ue, Ee += h * Qe, De += h * Xe, xe += h * Ze, Ie += h * et, Ut += h * tt, qt += h * Ye, si += h * Ve, Dt += h * Ae, fi += h * it, Ki += h * st, h = A[15], re += h * qe, de += h * Fe, me += h * je, ne += h * ze, _e += h * Ke, Ee += h * Ue, De += h * Qe, xe += h * Xe, Ie += h * Ze, Ut += h * et, qt += h * tt, si += h * Ye, Dt += h * Ve, fi += h * Ae, Ki += h * it, Os += h * st, W += 38 * de, X += 38 * me, fe += 38 * ne, ve += 38 * _e, ge += 38 * Ee, Se += 38 * De, Me += 38 * xe, $e += 38 * Ie, be += 38 * Ut, ye += 38 * qt, pe += 38 * si, le += 38 * Dt, ue += 38 * fi, he += 38 * Ki, ce += 38 * Os, S = 1, h = W + S + 65535, S = Math.floor(h / 65536), W = h - S * 65536, h = X + S + 65535, S = Math.floor(h / 65536), X = h - S * 65536, h = fe + S + 65535, S = Math.floor(h / 65536), fe = h - S * 65536, h = ve + S + 65535, S = Math.floor(h / 65536), ve = h - S * 65536, h = ge + S + 65535, S = Math.floor(h / 65536), ge = h - S * 65536, h = Se + S + 65535, S = Math.floor(h / 65536), Se = h - S * 65536, h = Me + S + 65535, S = Math.floor(h / 65536), Me = h - S * 65536, h = $e + S + 65535, S = Math.floor(h / 65536), $e = h - S * 65536, h = be + S + 65535, S = Math.floor(h / 65536), be = h - S * 65536, h = ye + S + 65535, S = Math.floor(h / 65536), ye = h - S * 65536, h = pe + S + 65535, S = Math.floor(h / 65536), pe = h - S * 65536, h = le + S + 65535, S = Math.floor(h / 65536), le = h - S * 65536, h = ue + S + 65535, S = Math.floor(h / 65536), ue = h - S * 65536, h = he + S + 65535, S = Math.floor(h / 65536), he = h - S * 65536, h = ce + S + 65535, S = Math.floor(h / 65536), ce = h - S * 65536, h = re + S + 65535, S = Math.floor(h / 65536), re = h - S * 65536, W += S - 1 + 37 * (S - 1), S = 1, h = W + S + 65535, S = Math.floor(h / 65536), W = h - S * 65536, h = X + S + 65535, S = Math.floor(h / 65536), X = h - S * 65536, h = fe + S + 65535, S = Math.floor(h / 65536), fe = h - S * 65536, h = ve + S + 65535, S = Math.floor(h / 65536), ve = h - S * 65536, h = ge + S + 65535, S = Math.floor(h / 65536), ge = h - S * 65536, h = Se + S + 65535, S = Math.floor(h / 65536), Se = h - S * 65536, h = Me + S + 65535, S = Math.floor(h / 65536), Me = h - S * 65536, h = $e + S + 65535, S = Math.floor(h / 65536), $e = h - S * 65536, h = be + S + 65535, S = Math.floor(h / 65536), be = h - S * 65536, h = ye + S + 65535, S = Math.floor(h / 65536), ye = h - S * 65536, h = pe + S + 65535, S = Math.floor(h / 65536), pe = h - S * 65536, h = le + S + 65535, S = Math.floor(h / 65536), le = h - S * 65536, h = ue + S + 65535, S = Math.floor(h / 65536), ue = h - S * 65536, h = he + S + 65535, S = Math.floor(h / 65536), he = h - S * 65536, h = ce + S + 65535, S = Math.floor(h / 65536), ce = h - S * 65536, h = re + S + 65535, S = Math.floor(h / 65536), re = h - S * 65536, W += S - 1 + 37 * (S - 1), T[0] = W, T[1] = X, T[2] = fe, T[3] = ve, T[4] = ge, T[5] = Se, T[6] = Me, T[7] = $e, T[8] = be, T[9] = ye, T[10] = pe, T[11] = le, T[12] = ue, T[13] = he, T[14] = ce, T[15] = re;\n  }\n  function l(T, A) {\n    a(T, A, A);\n  }\n  function L(T, A) {\n    const N = r();\n    let h;\n    for (h = 0; h < 16; h++)\n      N[h] = A[h];\n    for (h = 253; h >= 0; h--)\n      l(N, N), h !== 2 && h !== 4 && a(N, N, A);\n    for (h = 0; h < 16; h++)\n      T[h] = N[h];\n  }\n  function v(T, A) {\n    const N = r();\n    let h;\n    for (h = 0; h < 16; h++)\n      N[h] = A[h];\n    for (h = 250; h >= 0; h--)\n      l(N, N), h !== 1 && a(N, N, A);\n    for (h = 0; h < 16; h++)\n      T[h] = N[h];\n  }\n  function R(T, A) {\n    const N = r(), h = r(), S = r(), W = r(), X = r(), fe = r(), ve = r(), ge = r(), Se = r();\n    f(N, T[1], T[0]), f(Se, A[1], A[0]), a(N, N, Se), w(h, T[0], T[1]), w(Se, A[0], A[1]), a(h, h, Se), a(S, T[3], A[3]), a(S, S, d), a(W, T[2], A[2]), w(W, W, W), f(X, h, N), f(fe, W, S), w(ve, W, S), w(ge, h, N), a(T[0], X, fe), a(T[1], ge, ve), a(T[2], ve, fe), a(T[3], X, ge);\n  }\n  function $(T, A, N) {\n    for (let h = 0; h < 4; h++)\n      C(T[h], A[h], N);\n  }\n  function q(T, A) {\n    const N = r(), h = r(), S = r();\n    L(S, A[2]), a(N, A[0], S), a(h, A[1], S), F(T, h), T[31] ^= D(N) << 7;\n  }\n  function m(T, A, N) {\n    O(T[0], o), O(T[1], c), O(T[2], c), O(T[3], o);\n    for (let h = 255; h >= 0; --h) {\n      const S = N[h / 8 | 0] >> (h & 7) & 1;\n      $(T, A, S), R(A, T), R(T, T), $(T, A, S);\n    }\n  }\n  function E(T, A) {\n    const N = [r(), r(), r(), r()];\n    O(N[0], p), O(N[1], b), O(N[2], c), a(N[3], p, b), m(T, N, A);\n  }\n  function B(T) {\n    if (T.length !== i.SEED_LENGTH)\n      throw new Error(`ed25519: seed must be ${i.SEED_LENGTH} bytes`);\n    const A = (0, t.hash)(T);\n    A[0] &= 248, A[31] &= 127, A[31] |= 64;\n    const N = new Uint8Array(32), h = [r(), r(), r(), r()];\n    E(h, A), q(N, h);\n    const S = new Uint8Array(64);\n    return S.set(T), S.set(N, 32), {\n      publicKey: N,\n      secretKey: S\n    };\n  }\n  i.generateKeyPairFromSeed = B;\n  function z(T) {\n    const A = (0, e.randomBytes)(32, T), N = B(A);\n    return (0, s.wipe)(A), N;\n  }\n  i.generateKeyPair = z;\n  function j(T) {\n    if (T.length !== i.SECRET_KEY_LENGTH)\n      throw new Error(`ed25519: secret key must be ${i.SECRET_KEY_LENGTH} bytes`);\n    return new Uint8Array(T.subarray(32));\n  }\n  i.extractPublicKeyFromSecretKey = j;\n  const U = new Float64Array([\n    237,\n    211,\n    245,\n    92,\n    26,\n    99,\n    18,\n    88,\n    214,\n    156,\n    247,\n    162,\n    222,\n    249,\n    222,\n    20,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    16\n  ]);\n  function M(T, A) {\n    let N, h, S, W;\n    for (h = 63; h >= 32; --h) {\n      for (N = 0, S = h - 32, W = h - 12; S < W; ++S)\n        A[S] += N - 16 * A[h] * U[S - (h - 32)], N = Math.floor((A[S] + 128) / 256), A[S] -= N * 256;\n      A[S] += N, A[h] = 0;\n    }\n    for (N = 0, S = 0; S < 32; S++)\n      A[S] += N - (A[31] >> 4) * U[S], N = A[S] >> 8, A[S] &= 255;\n    for (S = 0; S < 32; S++)\n      A[S] -= N * U[S];\n    for (h = 0; h < 32; h++)\n      A[h + 1] += A[h] >> 8, T[h] = A[h] & 255;\n  }\n  function H(T) {\n    const A = new Float64Array(64);\n    for (let N = 0; N < 64; N++)\n      A[N] = T[N];\n    for (let N = 0; N < 64; N++)\n      T[N] = 0;\n    M(T, A);\n  }\n  function te(T, A) {\n    const N = new Float64Array(64), h = [r(), r(), r(), r()], S = (0, t.hash)(T.subarray(0, 32));\n    S[0] &= 248, S[31] &= 127, S[31] |= 64;\n    const W = new Uint8Array(64);\n    W.set(S.subarray(32), 32);\n    const X = new t.SHA512();\n    X.update(W.subarray(32)), X.update(A);\n    const fe = X.digest();\n    X.clean(), H(fe), E(h, fe), q(W, h), X.reset(), X.update(W.subarray(0, 32)), X.update(T.subarray(32)), X.update(A);\n    const ve = X.digest();\n    H(ve);\n    for (let ge = 0; ge < 32; ge++)\n      N[ge] = fe[ge];\n    for (let ge = 0; ge < 32; ge++)\n      for (let Se = 0; Se < 32; Se++)\n        N[ge + Se] += ve[ge] * S[Se];\n    return M(W.subarray(32), N), W;\n  }\n  i.sign = te;\n  function G(T, A) {\n    const N = r(), h = r(), S = r(), W = r(), X = r(), fe = r(), ve = r();\n    return O(T[2], c), y(T[1], A), l(S, T[1]), a(W, S, u), f(S, S, T[2]), w(W, T[2], W), l(X, W), l(fe, X), a(ve, fe, X), a(N, ve, S), a(N, N, W), v(N, N), a(N, N, S), a(N, N, W), a(N, N, W), a(T[0], N, W), l(h, T[0]), a(h, h, W), I(h, S) && a(T[0], T[0], x), l(h, T[0]), a(h, h, W), I(h, S) ? -1 : (D(T[0]) === A[31] >> 7 && f(T[0], o, T[0]), a(T[3], T[0], T[1]), 0);\n  }\n  function ie(T, A, N) {\n    const h = new Uint8Array(32), S = [r(), r(), r(), r()], W = [r(), r(), r(), r()];\n    if (N.length !== i.SIGNATURE_LENGTH)\n      throw new Error(`ed25519: signature must be ${i.SIGNATURE_LENGTH} bytes`);\n    if (G(W, T))\n      return !1;\n    const X = new t.SHA512();\n    X.update(N.subarray(0, 32)), X.update(T), X.update(A);\n    const fe = X.digest();\n    return H(fe), m(S, W, fe), E(W, N.subarray(32)), R(S, W), q(h, S), !K(N, h);\n  }\n  i.verify = ie;\n  function Q(T) {\n    let A = [r(), r(), r(), r()];\n    if (G(A, T))\n      throw new Error(\"Ed25519: invalid public key\");\n    let N = r(), h = r(), S = A[1];\n    w(N, c, S), f(h, c, S), L(h, h), a(N, N, h);\n    let W = new Uint8Array(32);\n    return F(W, N), W;\n  }\n  i.convertPublicKeyToX25519 = Q;\n  function se(T) {\n    const A = (0, t.hash)(T.subarray(0, 32));\n    A[0] &= 248, A[31] &= 127, A[31] |= 64;\n    const N = new Uint8Array(A.subarray(0, 32));\n    return (0, s.wipe)(A), N;\n  }\n  i.convertSecretKeyToX25519 = se;\n})(nn);\nconst sd = \"EdDSA\", rd = \"JWT\", mc = \".\", bc = \"base64url\", nd = \"utf8\", od = \"utf8\", ad = \":\", cd = \"did\", hd = \"key\", mo = \"base58btc\", ud = \"z\", ld = \"K36\", dd = 32;\nfunction on(i) {\n  return globalThis.Buffer != null ? new Uint8Array(i.buffer, i.byteOffset, i.byteLength) : i;\n}\nfunction wc(i = 0) {\n  return globalThis.Buffer != null && globalThis.Buffer.allocUnsafe != null ? on(globalThis.Buffer.allocUnsafe(i)) : new Uint8Array(i);\n}\nfunction ls(i, e) {\n  e || (e = i.reduce((r, n) => r + n.length, 0));\n  const t = wc(e);\n  let s = 0;\n  for (const r of i)\n    t.set(r, s), s += r.length;\n  return on(t);\n}\nfunction fd(i, e) {\n  if (i.length >= 255)\n    throw new TypeError(\"Alphabet too long\");\n  for (var t = new Uint8Array(256), s = 0; s < t.length; s++)\n    t[s] = 255;\n  for (var r = 0; r < i.length; r++) {\n    var n = i.charAt(r), o = n.charCodeAt(0);\n    if (t[o] !== 255)\n      throw new TypeError(n + \" is ambiguous\");\n    t[o] = r;\n  }\n  var c = i.length, u = i.charAt(0), d = Math.log(c) / Math.log(256), p = Math.log(256) / Math.log(c);\n  function b(_) {\n    if (_ instanceof Uint8Array || (ArrayBuffer.isView(_) ? _ = new Uint8Array(_.buffer, _.byteOffset, _.byteLength) : Array.isArray(_) && (_ = Uint8Array.from(_))), !(_ instanceof Uint8Array))\n      throw new TypeError(\"Expected Uint8Array\");\n    if (_.length === 0)\n      return \"\";\n    for (var C = 0, F = 0, K = 0, I = _.length; K !== I && _[K] === 0; )\n      K++, C++;\n    for (var D = (I - K) * p + 1 >>> 0, y = new Uint8Array(D); K !== I; ) {\n      for (var w = _[K], f = 0, a = D - 1; (w !== 0 || f < F) && a !== -1; a--, f++)\n        w += 256 * y[a] >>> 0, y[a] = w % c >>> 0, w = w / c >>> 0;\n      if (w !== 0)\n        throw new Error(\"Non-zero carry\");\n      F = f, K++;\n    }\n    for (var l = D - F; l !== D && y[l] === 0; )\n      l++;\n    for (var L = u.repeat(C); l < D; ++l)\n      L += i.charAt(y[l]);\n    return L;\n  }\n  function x(_) {\n    if (typeof _ != \"string\")\n      throw new TypeError(\"Expected String\");\n    if (_.length === 0)\n      return new Uint8Array();\n    var C = 0;\n    if (_[C] !== \" \") {\n      for (var F = 0, K = 0; _[C] === u; )\n        F++, C++;\n      for (var I = (_.length - C) * d + 1 >>> 0, D = new Uint8Array(I); _[C]; ) {\n        var y = t[_.charCodeAt(C)];\n        if (y === 255)\n          return;\n        for (var w = 0, f = I - 1; (y !== 0 || w < K) && f !== -1; f--, w++)\n          y += c * D[f] >>> 0, D[f] = y % 256 >>> 0, y = y / 256 >>> 0;\n        if (y !== 0)\n          throw new Error(\"Non-zero carry\");\n        K = w, C++;\n      }\n      if (_[C] !== \" \") {\n        for (var a = I - K; a !== I && D[a] === 0; )\n          a++;\n        for (var l = new Uint8Array(F + (I - a)), L = F; a !== I; )\n          l[L++] = D[a++];\n        return l;\n      }\n    }\n  }\n  function O(_) {\n    var C = x(_);\n    if (C)\n      return C;\n    throw new Error(`Non-${e} character`);\n  }\n  return {\n    encode: b,\n    decodeUnsafe: x,\n    decode: O\n  };\n}\nvar pd = fd, gd = pd;\nconst yd = (i) => {\n  if (i instanceof Uint8Array && i.constructor.name === \"Uint8Array\")\n    return i;\n  if (i instanceof ArrayBuffer)\n    return new Uint8Array(i);\n  if (ArrayBuffer.isView(i))\n    return new Uint8Array(i.buffer, i.byteOffset, i.byteLength);\n  throw new Error(\"Unknown type, must be binary type\");\n}, md = (i) => new TextEncoder().encode(i), bd = (i) => new TextDecoder().decode(i);\nclass wd {\n  constructor(e, t, s) {\n    this.name = e, this.prefix = t, this.baseEncode = s;\n  }\n  encode(e) {\n    if (e instanceof Uint8Array)\n      return `${this.prefix}${this.baseEncode(e)}`;\n    throw Error(\"Unknown type, must be binary type\");\n  }\n}\nclass vd {\n  constructor(e, t, s) {\n    if (this.name = e, this.prefix = t, t.codePointAt(0) === void 0)\n      throw new Error(\"Invalid prefix character\");\n    this.prefixCodePoint = t.codePointAt(0), this.baseDecode = s;\n  }\n  decode(e) {\n    if (typeof e == \"string\") {\n      if (e.codePointAt(0) !== this.prefixCodePoint)\n        throw Error(`Unable to decode multibase string ${JSON.stringify(e)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);\n      return this.baseDecode(e.slice(this.prefix.length));\n    } else\n      throw Error(\"Can only multibase decode strings\");\n  }\n  or(e) {\n    return vc(this, e);\n  }\n}\nclass _d {\n  constructor(e) {\n    this.decoders = e;\n  }\n  or(e) {\n    return vc(this, e);\n  }\n  decode(e) {\n    const t = e[0], s = this.decoders[t];\n    if (s)\n      return s.decode(e);\n    throw RangeError(`Unable to decode multibase string ${JSON.stringify(e)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);\n  }\n}\nconst vc = (i, e) => new _d({\n  ...i.decoders || { [i.prefix]: i },\n  ...e.decoders || { [e.prefix]: e }\n});\nclass Ed {\n  constructor(e, t, s, r) {\n    this.name = e, this.prefix = t, this.baseEncode = s, this.baseDecode = r, this.encoder = new wd(e, t, s), this.decoder = new vd(e, t, r);\n  }\n  encode(e) {\n    return this.encoder.encode(e);\n  }\n  decode(e) {\n    return this.decoder.decode(e);\n  }\n}\nconst cr = ({ name: i, prefix: e, encode: t, decode: s }) => new Ed(i, e, t, s), ps = ({ prefix: i, name: e, alphabet: t }) => {\n  const { encode: s, decode: r } = gd(t, e);\n  return cr({\n    prefix: i,\n    name: e,\n    encode: s,\n    decode: (n) => yd(r(n))\n  });\n}, Sd = (i, e, t, s) => {\n  const r = {};\n  for (let p = 0; p < e.length; ++p)\n    r[e[p]] = p;\n  let n = i.length;\n  for (; i[n - 1] === \"=\"; )\n    --n;\n  const o = new Uint8Array(n * t / 8 | 0);\n  let c = 0, u = 0, d = 0;\n  for (let p = 0; p < n; ++p) {\n    const b = r[i[p]];\n    if (b === void 0)\n      throw new SyntaxError(`Non-${s} character`);\n    u = u << t | b, c += t, c >= 8 && (c -= 8, o[d++] = 255 & u >> c);\n  }\n  if (c >= t || 255 & u << 8 - c)\n    throw new SyntaxError(\"Unexpected end of data\");\n  return o;\n}, Id = (i, e, t) => {\n  const s = e[e.length - 1] === \"=\", r = (1 << t) - 1;\n  let n = \"\", o = 0, c = 0;\n  for (let u = 0; u < i.length; ++u)\n    for (c = c << 8 | i[u], o += 8; o > t; )\n      o -= t, n += e[r & c >> o];\n  if (o && (n += e[r & c << t - o]), s)\n    for (; n.length * t & 7; )\n      n += \"=\";\n  return n;\n}, ut = ({ name: i, prefix: e, bitsPerChar: t, alphabet: s }) => cr({\n  prefix: e,\n  name: i,\n  encode(r) {\n    return Id(r, s, t);\n  },\n  decode(r) {\n    return Sd(r, s, t, i);\n  }\n}), Dd = cr({\n  prefix: \"\\0\",\n  name: \"identity\",\n  encode: (i) => bd(i),\n  decode: (i) => md(i)\n}), xd = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  identity: Dd\n}, Symbol.toStringTag, { value: \"Module\" })), Od = ut({\n  prefix: \"0\",\n  name: \"base2\",\n  alphabet: \"01\",\n  bitsPerChar: 1\n}), Nd = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  base2: Od\n}, Symbol.toStringTag, { value: \"Module\" })), Pd = ut({\n  prefix: \"7\",\n  name: \"base8\",\n  alphabet: \"01234567\",\n  bitsPerChar: 3\n}), Rd = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  base8: Pd\n}, Symbol.toStringTag, { value: \"Module\" })), Cd = ps({\n  prefix: \"9\",\n  name: \"base10\",\n  alphabet: \"0123456789\"\n}), Ad = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  base10: Cd\n}, Symbol.toStringTag, { value: \"Module\" })), Td = ut({\n  prefix: \"f\",\n  name: \"base16\",\n  alphabet: \"0123456789abcdef\",\n  bitsPerChar: 4\n}), $d = ut({\n  prefix: \"F\",\n  name: \"base16upper\",\n  alphabet: \"0123456789ABCDEF\",\n  bitsPerChar: 4\n}), Fd = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  base16: Td,\n  base16upper: $d\n}, Symbol.toStringTag, { value: \"Module\" })), Ud = ut({\n  prefix: \"b\",\n  name: \"base32\",\n  alphabet: \"abcdefghijklmnopqrstuvwxyz234567\",\n  bitsPerChar: 5\n}), Ld = ut({\n  prefix: \"B\",\n  name: \"base32upper\",\n  alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\",\n  bitsPerChar: 5\n}), Md = ut({\n  prefix: \"c\",\n  name: \"base32pad\",\n  alphabet: \"abcdefghijklmnopqrstuvwxyz234567=\",\n  bitsPerChar: 5\n}), qd = ut({\n  prefix: \"C\",\n  name: \"base32padupper\",\n  alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=\",\n  bitsPerChar: 5\n}), jd = ut({\n  prefix: \"v\",\n  name: \"base32hex\",\n  alphabet: \"0123456789abcdefghijklmnopqrstuv\",\n  bitsPerChar: 5\n}), zd = ut({\n  prefix: \"V\",\n  name: \"base32hexupper\",\n  alphabet: \"0123456789ABCDEFGHIJKLMNOPQRSTUV\",\n  bitsPerChar: 5\n}), Kd = ut({\n  prefix: \"t\",\n  name: \"base32hexpad\",\n  alphabet: \"0123456789abcdefghijklmnopqrstuv=\",\n  bitsPerChar: 5\n}), Vd = ut({\n  prefix: \"T\",\n  name: \"base32hexpadupper\",\n  alphabet: \"0123456789ABCDEFGHIJKLMNOPQRSTUV=\",\n  bitsPerChar: 5\n}), Bd = ut({\n  prefix: \"h\",\n  name: \"base32z\",\n  alphabet: \"ybndrfg8ejkmcpqxot1uwisza345h769\",\n  bitsPerChar: 5\n}), kd = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  base32: Ud,\n  base32hex: jd,\n  base32hexpad: Kd,\n  base32hexpadupper: Vd,\n  base32hexupper: zd,\n  base32pad: Md,\n  base32padupper: qd,\n  base32upper: Ld,\n  base32z: Bd\n}, Symbol.toStringTag, { value: \"Module\" })), Hd = ps({\n  prefix: \"k\",\n  name: \"base36\",\n  alphabet: \"0123456789abcdefghijklmnopqrstuvwxyz\"\n}), Gd = ps({\n  prefix: \"K\",\n  name: \"base36upper\",\n  alphabet: \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n}), Wd = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  base36: Hd,\n  base36upper: Gd\n}, Symbol.toStringTag, { value: \"Module\" })), Yd = ps({\n  name: \"base58btc\",\n  prefix: \"z\",\n  alphabet: \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"\n}), Jd = ps({\n  name: \"base58flickr\",\n  prefix: \"Z\",\n  alphabet: \"123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ\"\n}), Qd = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  base58btc: Yd,\n  base58flickr: Jd\n}, Symbol.toStringTag, { value: \"Module\" })), Xd = ut({\n  prefix: \"m\",\n  name: \"base64\",\n  alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\",\n  bitsPerChar: 6\n}), Zd = ut({\n  prefix: \"M\",\n  name: \"base64pad\",\n  alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\",\n  bitsPerChar: 6\n}), ef = ut({\n  prefix: \"u\",\n  name: \"base64url\",\n  alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\",\n  bitsPerChar: 6\n}), tf = ut({\n  prefix: \"U\",\n  name: \"base64urlpad\",\n  alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=\",\n  bitsPerChar: 6\n}), sf = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  base64: Xd,\n  base64pad: Zd,\n  base64url: ef,\n  base64urlpad: tf\n}, Symbol.toStringTag, { value: \"Module\" })), _c = Array.from(\"🚀🪐☄🛰🌌🌑🌒🌓🌔🌕🌖🌗🌘🌍🌏🌎🐉☀💻🖥💾💿😂❤😍🤣😊🙏💕😭😘👍😅👏😁🔥🥰💔💖💙😢🤔😆🙄💪😉☺👌🤗💜😔😎😇🌹🤦🎉💞✌✨🤷😱😌🌸🙌😋💗💚😏💛🙂💓🤩😄😀🖤😃💯🙈👇🎶😒🤭❣😜💋👀😪😑💥🙋😞😩😡🤪👊🥳😥🤤👉💃😳✋😚😝😴🌟😬🙃🍀🌷😻😓⭐✅🥺🌈😈🤘💦✔😣🏃💐☹🎊💘😠☝😕🌺🎂🌻😐🖕💝🙊😹🗣💫💀👑🎵🤞😛🔴😤🌼😫⚽🤙☕🏆🤫👈😮🙆🍻🍃🐶💁😲🌿🧡🎁⚡🌞🎈❌✊👋😰🤨😶🤝🚶💰🍓💢🤟🙁🚨💨🤬✈🎀🍺🤓😙💟🌱😖👶🥴▶➡❓💎💸⬇😨🌚🦋😷🕺⚠🙅😟😵👎🤲🤠🤧📌🔵💅🧐🐾🍒😗🤑🌊🤯🐷☎💧😯💆👆🎤🙇🍑❄🌴💣🐸💌📍🥀🤢👅💡💩👐📸👻🤐🤮🎼🥵🚩🍎🍊👼💍📣🥂\"), rf = _c.reduce((i, e, t) => (i[t] = e, i), []), nf = _c.reduce((i, e, t) => (i[e.codePointAt(0)] = t, i), []);\nfunction of(i) {\n  return i.reduce((e, t) => (e += rf[t], e), \"\");\n}\nfunction af(i) {\n  const e = [];\n  for (const t of i) {\n    const s = nf[t.codePointAt(0)];\n    if (s === void 0)\n      throw new Error(`Non-base256emoji character: ${t}`);\n    e.push(s);\n  }\n  return new Uint8Array(e);\n}\nconst cf = cr({\n  prefix: \"🚀\",\n  name: \"base256emoji\",\n  encode: of,\n  decode: af\n}), hf = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  base256emoji: cf\n}, Symbol.toStringTag, { value: \"Module\" }));\nnew TextEncoder();\nnew TextDecoder();\nconst bo = {\n  ...xd,\n  ...Nd,\n  ...Rd,\n  ...Ad,\n  ...Fd,\n  ...kd,\n  ...Wd,\n  ...Qd,\n  ...sf,\n  ...hf\n};\nfunction Ec(i, e, t, s) {\n  return {\n    name: i,\n    prefix: e,\n    encoder: {\n      name: i,\n      prefix: e,\n      encode: t\n    },\n    decoder: { decode: s }\n  };\n}\nconst wo = Ec(\"utf8\", \"u\", (i) => \"u\" + new TextDecoder(\"utf8\").decode(i), (i) => new TextEncoder().encode(i.substring(1))), Dr = Ec(\"ascii\", \"a\", (i) => {\n  let e = \"a\";\n  for (let t = 0; t < i.length; t++)\n    e += String.fromCharCode(i[t]);\n  return e;\n}, (i) => {\n  i = i.substring(1);\n  const e = wc(i.length);\n  for (let t = 0; t < i.length; t++)\n    e[t] = i.charCodeAt(t);\n  return e;\n}), Sc = {\n  utf8: wo,\n  \"utf-8\": wo,\n  hex: bo.base16,\n  latin1: Dr,\n  ascii: Dr,\n  binary: Dr,\n  ...bo\n};\nfunction Ne(i, e = \"utf8\") {\n  const t = Sc[e];\n  if (!t)\n    throw new Error(`Unsupported encoding \"${e}\"`);\n  return (e === \"utf8\" || e === \"utf-8\") && globalThis.Buffer != null && globalThis.Buffer.from != null ? globalThis.Buffer.from(i.buffer, i.byteOffset, i.byteLength).toString(\"utf8\") : t.encoder.encode(i).substring(1);\n}\nfunction Ce(i, e = \"utf8\") {\n  const t = Sc[e];\n  if (!t)\n    throw new Error(`Unsupported encoding \"${e}\"`);\n  return (e === \"utf8\" || e === \"utf-8\") && globalThis.Buffer != null && globalThis.Buffer.from != null ? on(globalThis.Buffer.from(i, \"utf-8\")) : t.decoder.decode(`${t.prefix}${i}`);\n}\nfunction Gs(i) {\n  return Ne(Ce(rr(i), nd), bc);\n}\nfunction an(i) {\n  const e = Ce(ld, mo), t = ud + Ne(ls([e, i]), mo);\n  return [cd, hd, t].join(ad);\n}\nfunction uf(i) {\n  return Ne(i, bc);\n}\nfunction lf(i) {\n  return Ce([Gs(i.header), Gs(i.payload)].join(mc), od);\n}\nfunction df(i) {\n  return [\n    Gs(i.header),\n    Gs(i.payload),\n    uf(i.signature)\n  ].join(mc);\n}\nfunction Ws(i = li.randomBytes(dd)) {\n  return nn.generateKeyPairFromSeed(i);\n}\nasync function Ic(i, e, t, s, r = V.fromMiliseconds(Date.now())) {\n  const n = { alg: sd, typ: rd }, o = an(s.publicKey), c = r + t, u = { iss: o, sub: i, aud: e, iat: r, exp: c }, d = lf({ header: n, payload: u }), p = nn.sign(s.secretKey, d);\n  return df({ header: n, payload: u, signature: p });\n}\nvar gs = {}, hr = {};\nObject.defineProperty(hr, \"__esModule\", { value: !0 });\nvar pt = oe, Kr = Pt, ff = 20;\nfunction pf(i, e, t) {\n  for (var s = 1634760805, r = 857760878, n = 2036477234, o = 1797285236, c = t[3] << 24 | t[2] << 16 | t[1] << 8 | t[0], u = t[7] << 24 | t[6] << 16 | t[5] << 8 | t[4], d = t[11] << 24 | t[10] << 16 | t[9] << 8 | t[8], p = t[15] << 24 | t[14] << 16 | t[13] << 8 | t[12], b = t[19] << 24 | t[18] << 16 | t[17] << 8 | t[16], x = t[23] << 24 | t[22] << 16 | t[21] << 8 | t[20], O = t[27] << 24 | t[26] << 16 | t[25] << 8 | t[24], _ = t[31] << 24 | t[30] << 16 | t[29] << 8 | t[28], C = e[3] << 24 | e[2] << 16 | e[1] << 8 | e[0], F = e[7] << 24 | e[6] << 16 | e[5] << 8 | e[4], K = e[11] << 24 | e[10] << 16 | e[9] << 8 | e[8], I = e[15] << 24 | e[14] << 16 | e[13] << 8 | e[12], D = s, y = r, w = n, f = o, a = c, l = u, L = d, v = p, R = b, $ = x, q = O, m = _, E = C, B = F, z = K, j = I, U = 0; U < ff; U += 2)\n    D = D + a | 0, E ^= D, E = E >>> 32 - 16 | E << 16, R = R + E | 0, a ^= R, a = a >>> 32 - 12 | a << 12, y = y + l | 0, B ^= y, B = B >>> 32 - 16 | B << 16, $ = $ + B | 0, l ^= $, l = l >>> 32 - 12 | l << 12, w = w + L | 0, z ^= w, z = z >>> 32 - 16 | z << 16, q = q + z | 0, L ^= q, L = L >>> 32 - 12 | L << 12, f = f + v | 0, j ^= f, j = j >>> 32 - 16 | j << 16, m = m + j | 0, v ^= m, v = v >>> 32 - 12 | v << 12, w = w + L | 0, z ^= w, z = z >>> 32 - 8 | z << 8, q = q + z | 0, L ^= q, L = L >>> 32 - 7 | L << 7, f = f + v | 0, j ^= f, j = j >>> 32 - 8 | j << 8, m = m + j | 0, v ^= m, v = v >>> 32 - 7 | v << 7, y = y + l | 0, B ^= y, B = B >>> 32 - 8 | B << 8, $ = $ + B | 0, l ^= $, l = l >>> 32 - 7 | l << 7, D = D + a | 0, E ^= D, E = E >>> 32 - 8 | E << 8, R = R + E | 0, a ^= R, a = a >>> 32 - 7 | a << 7, D = D + l | 0, j ^= D, j = j >>> 32 - 16 | j << 16, q = q + j | 0, l ^= q, l = l >>> 32 - 12 | l << 12, y = y + L | 0, E ^= y, E = E >>> 32 - 16 | E << 16, m = m + E | 0, L ^= m, L = L >>> 32 - 12 | L << 12, w = w + v | 0, B ^= w, B = B >>> 32 - 16 | B << 16, R = R + B | 0, v ^= R, v = v >>> 32 - 12 | v << 12, f = f + a | 0, z ^= f, z = z >>> 32 - 16 | z << 16, $ = $ + z | 0, a ^= $, a = a >>> 32 - 12 | a << 12, w = w + v | 0, B ^= w, B = B >>> 32 - 8 | B << 8, R = R + B | 0, v ^= R, v = v >>> 32 - 7 | v << 7, f = f + a | 0, z ^= f, z = z >>> 32 - 8 | z << 8, $ = $ + z | 0, a ^= $, a = a >>> 32 - 7 | a << 7, y = y + L | 0, E ^= y, E = E >>> 32 - 8 | E << 8, m = m + E | 0, L ^= m, L = L >>> 32 - 7 | L << 7, D = D + l | 0, j ^= D, j = j >>> 32 - 8 | j << 8, q = q + j | 0, l ^= q, l = l >>> 32 - 7 | l << 7;\n  pt.writeUint32LE(D + s | 0, i, 0), pt.writeUint32LE(y + r | 0, i, 4), pt.writeUint32LE(w + n | 0, i, 8), pt.writeUint32LE(f + o | 0, i, 12), pt.writeUint32LE(a + c | 0, i, 16), pt.writeUint32LE(l + u | 0, i, 20), pt.writeUint32LE(L + d | 0, i, 24), pt.writeUint32LE(v + p | 0, i, 28), pt.writeUint32LE(R + b | 0, i, 32), pt.writeUint32LE($ + x | 0, i, 36), pt.writeUint32LE(q + O | 0, i, 40), pt.writeUint32LE(m + _ | 0, i, 44), pt.writeUint32LE(E + C | 0, i, 48), pt.writeUint32LE(B + F | 0, i, 52), pt.writeUint32LE(z + K | 0, i, 56), pt.writeUint32LE(j + I | 0, i, 60);\n}\nfunction Dc(i, e, t, s, r) {\n  if (r === void 0 && (r = 0), i.length !== 32)\n    throw new Error(\"ChaCha: key size must be 32 bytes\");\n  if (s.length < t.length)\n    throw new Error(\"ChaCha: destination is shorter than source\");\n  var n, o;\n  if (r === 0) {\n    if (e.length !== 8 && e.length !== 12)\n      throw new Error(\"ChaCha nonce must be 8 or 12 bytes\");\n    n = new Uint8Array(16), o = n.length - e.length, n.set(e, o);\n  } else {\n    if (e.length !== 16)\n      throw new Error(\"ChaCha nonce with counter must be 16 bytes\");\n    n = e, o = r;\n  }\n  for (var c = new Uint8Array(64), u = 0; u < t.length; u += 64) {\n    pf(c, n, i);\n    for (var d = u; d < u + 64 && d < t.length; d++)\n      s[d] = t[d] ^ c[d - u];\n    yf(n, 0, o);\n  }\n  return Kr.wipe(c), r === 0 && Kr.wipe(n), s;\n}\nhr.streamXOR = Dc;\nfunction gf(i, e, t, s) {\n  return s === void 0 && (s = 0), Kr.wipe(t), Dc(i, e, t, t, s);\n}\nhr.stream = gf;\nfunction yf(i, e, t) {\n  for (var s = 1; t--; )\n    s = s + (i[e] & 255) | 0, i[e] = s & 255, s >>>= 8, e++;\n  if (s > 0)\n    throw new Error(\"ChaCha: counter overflow\");\n}\nvar xc = {}, di = {};\nObject.defineProperty(di, \"__esModule\", { value: !0 });\nfunction mf(i, e, t) {\n  return ~(i - 1) & e | i - 1 & t;\n}\ndi.select = mf;\nfunction bf(i, e) {\n  return (i | 0) - (e | 0) - 1 >>> 31 & 1;\n}\ndi.lessOrEqual = bf;\nfunction Oc(i, e) {\n  if (i.length !== e.length)\n    return 0;\n  for (var t = 0, s = 0; s < i.length; s++)\n    t |= i[s] ^ e[s];\n  return 1 & t - 1 >>> 8;\n}\ndi.compare = Oc;\nfunction wf(i, e) {\n  return i.length === 0 || e.length === 0 ? !1 : Oc(i, e) !== 0;\n}\ndi.equal = wf;\n(function(i) {\n  Object.defineProperty(i, \"__esModule\", { value: !0 });\n  var e = di, t = Pt;\n  i.DIGEST_LENGTH = 16;\n  var s = (\n    /** @class */\n    function() {\n      function o(c) {\n        this.digestLength = i.DIGEST_LENGTH, this._buffer = new Uint8Array(16), this._r = new Uint16Array(10), this._h = new Uint16Array(10), this._pad = new Uint16Array(8), this._leftover = 0, this._fin = 0, this._finished = !1;\n        var u = c[0] | c[1] << 8;\n        this._r[0] = u & 8191;\n        var d = c[2] | c[3] << 8;\n        this._r[1] = (u >>> 13 | d << 3) & 8191;\n        var p = c[4] | c[5] << 8;\n        this._r[2] = (d >>> 10 | p << 6) & 7939;\n        var b = c[6] | c[7] << 8;\n        this._r[3] = (p >>> 7 | b << 9) & 8191;\n        var x = c[8] | c[9] << 8;\n        this._r[4] = (b >>> 4 | x << 12) & 255, this._r[5] = x >>> 1 & 8190;\n        var O = c[10] | c[11] << 8;\n        this._r[6] = (x >>> 14 | O << 2) & 8191;\n        var _ = c[12] | c[13] << 8;\n        this._r[7] = (O >>> 11 | _ << 5) & 8065;\n        var C = c[14] | c[15] << 8;\n        this._r[8] = (_ >>> 8 | C << 8) & 8191, this._r[9] = C >>> 5 & 127, this._pad[0] = c[16] | c[17] << 8, this._pad[1] = c[18] | c[19] << 8, this._pad[2] = c[20] | c[21] << 8, this._pad[3] = c[22] | c[23] << 8, this._pad[4] = c[24] | c[25] << 8, this._pad[5] = c[26] | c[27] << 8, this._pad[6] = c[28] | c[29] << 8, this._pad[7] = c[30] | c[31] << 8;\n      }\n      return o.prototype._blocks = function(c, u, d) {\n        for (var p = this._fin ? 0 : 2048, b = this._h[0], x = this._h[1], O = this._h[2], _ = this._h[3], C = this._h[4], F = this._h[5], K = this._h[6], I = this._h[7], D = this._h[8], y = this._h[9], w = this._r[0], f = this._r[1], a = this._r[2], l = this._r[3], L = this._r[4], v = this._r[5], R = this._r[6], $ = this._r[7], q = this._r[8], m = this._r[9]; d >= 16; ) {\n          var E = c[u + 0] | c[u + 1] << 8;\n          b += E & 8191;\n          var B = c[u + 2] | c[u + 3] << 8;\n          x += (E >>> 13 | B << 3) & 8191;\n          var z = c[u + 4] | c[u + 5] << 8;\n          O += (B >>> 10 | z << 6) & 8191;\n          var j = c[u + 6] | c[u + 7] << 8;\n          _ += (z >>> 7 | j << 9) & 8191;\n          var U = c[u + 8] | c[u + 9] << 8;\n          C += (j >>> 4 | U << 12) & 8191, F += U >>> 1 & 8191;\n          var M = c[u + 10] | c[u + 11] << 8;\n          K += (U >>> 14 | M << 2) & 8191;\n          var H = c[u + 12] | c[u + 13] << 8;\n          I += (M >>> 11 | H << 5) & 8191;\n          var te = c[u + 14] | c[u + 15] << 8;\n          D += (H >>> 8 | te << 8) & 8191, y += te >>> 5 | p;\n          var G = 0, ie = G;\n          ie += b * w, ie += x * (5 * m), ie += O * (5 * q), ie += _ * (5 * $), ie += C * (5 * R), G = ie >>> 13, ie &= 8191, ie += F * (5 * v), ie += K * (5 * L), ie += I * (5 * l), ie += D * (5 * a), ie += y * (5 * f), G += ie >>> 13, ie &= 8191;\n          var Q = G;\n          Q += b * f, Q += x * w, Q += O * (5 * m), Q += _ * (5 * q), Q += C * (5 * $), G = Q >>> 13, Q &= 8191, Q += F * (5 * R), Q += K * (5 * v), Q += I * (5 * L), Q += D * (5 * l), Q += y * (5 * a), G += Q >>> 13, Q &= 8191;\n          var se = G;\n          se += b * a, se += x * f, se += O * w, se += _ * (5 * m), se += C * (5 * q), G = se >>> 13, se &= 8191, se += F * (5 * $), se += K * (5 * R), se += I * (5 * v), se += D * (5 * L), se += y * (5 * l), G += se >>> 13, se &= 8191;\n          var T = G;\n          T += b * l, T += x * a, T += O * f, T += _ * w, T += C * (5 * m), G = T >>> 13, T &= 8191, T += F * (5 * q), T += K * (5 * $), T += I * (5 * R), T += D * (5 * v), T += y * (5 * L), G += T >>> 13, T &= 8191;\n          var A = G;\n          A += b * L, A += x * l, A += O * a, A += _ * f, A += C * w, G = A >>> 13, A &= 8191, A += F * (5 * m), A += K * (5 * q), A += I * (5 * $), A += D * (5 * R), A += y * (5 * v), G += A >>> 13, A &= 8191;\n          var N = G;\n          N += b * v, N += x * L, N += O * l, N += _ * a, N += C * f, G = N >>> 13, N &= 8191, N += F * w, N += K * (5 * m), N += I * (5 * q), N += D * (5 * $), N += y * (5 * R), G += N >>> 13, N &= 8191;\n          var h = G;\n          h += b * R, h += x * v, h += O * L, h += _ * l, h += C * a, G = h >>> 13, h &= 8191, h += F * f, h += K * w, h += I * (5 * m), h += D * (5 * q), h += y * (5 * $), G += h >>> 13, h &= 8191;\n          var S = G;\n          S += b * $, S += x * R, S += O * v, S += _ * L, S += C * l, G = S >>> 13, S &= 8191, S += F * a, S += K * f, S += I * w, S += D * (5 * m), S += y * (5 * q), G += S >>> 13, S &= 8191;\n          var W = G;\n          W += b * q, W += x * $, W += O * R, W += _ * v, W += C * L, G = W >>> 13, W &= 8191, W += F * l, W += K * a, W += I * f, W += D * w, W += y * (5 * m), G += W >>> 13, W &= 8191;\n          var X = G;\n          X += b * m, X += x * q, X += O * $, X += _ * R, X += C * v, G = X >>> 13, X &= 8191, X += F * L, X += K * l, X += I * a, X += D * f, X += y * w, G += X >>> 13, X &= 8191, G = (G << 2) + G | 0, G = G + ie | 0, ie = G & 8191, G = G >>> 13, Q += G, b = ie, x = Q, O = se, _ = T, C = A, F = N, K = h, I = S, D = W, y = X, u += 16, d -= 16;\n        }\n        this._h[0] = b, this._h[1] = x, this._h[2] = O, this._h[3] = _, this._h[4] = C, this._h[5] = F, this._h[6] = K, this._h[7] = I, this._h[8] = D, this._h[9] = y;\n      }, o.prototype.finish = function(c, u) {\n        u === void 0 && (u = 0);\n        var d = new Uint16Array(10), p, b, x, O;\n        if (this._leftover) {\n          for (O = this._leftover, this._buffer[O++] = 1; O < 16; O++)\n            this._buffer[O] = 0;\n          this._fin = 1, this._blocks(this._buffer, 0, 16);\n        }\n        for (p = this._h[1] >>> 13, this._h[1] &= 8191, O = 2; O < 10; O++)\n          this._h[O] += p, p = this._h[O] >>> 13, this._h[O] &= 8191;\n        for (this._h[0] += p * 5, p = this._h[0] >>> 13, this._h[0] &= 8191, this._h[1] += p, p = this._h[1] >>> 13, this._h[1] &= 8191, this._h[2] += p, d[0] = this._h[0] + 5, p = d[0] >>> 13, d[0] &= 8191, O = 1; O < 10; O++)\n          d[O] = this._h[O] + p, p = d[O] >>> 13, d[O] &= 8191;\n        for (d[9] -= 8192, b = (p ^ 1) - 1, O = 0; O < 10; O++)\n          d[O] &= b;\n        for (b = ~b, O = 0; O < 10; O++)\n          this._h[O] = this._h[O] & b | d[O];\n        for (this._h[0] = (this._h[0] | this._h[1] << 13) & 65535, this._h[1] = (this._h[1] >>> 3 | this._h[2] << 10) & 65535, this._h[2] = (this._h[2] >>> 6 | this._h[3] << 7) & 65535, this._h[3] = (this._h[3] >>> 9 | this._h[4] << 4) & 65535, this._h[4] = (this._h[4] >>> 12 | this._h[5] << 1 | this._h[6] << 14) & 65535, this._h[5] = (this._h[6] >>> 2 | this._h[7] << 11) & 65535, this._h[6] = (this._h[7] >>> 5 | this._h[8] << 8) & 65535, this._h[7] = (this._h[8] >>> 8 | this._h[9] << 5) & 65535, x = this._h[0] + this._pad[0], this._h[0] = x & 65535, O = 1; O < 8; O++)\n          x = (this._h[O] + this._pad[O] | 0) + (x >>> 16) | 0, this._h[O] = x & 65535;\n        return c[u + 0] = this._h[0] >>> 0, c[u + 1] = this._h[0] >>> 8, c[u + 2] = this._h[1] >>> 0, c[u + 3] = this._h[1] >>> 8, c[u + 4] = this._h[2] >>> 0, c[u + 5] = this._h[2] >>> 8, c[u + 6] = this._h[3] >>> 0, c[u + 7] = this._h[3] >>> 8, c[u + 8] = this._h[4] >>> 0, c[u + 9] = this._h[4] >>> 8, c[u + 10] = this._h[5] >>> 0, c[u + 11] = this._h[5] >>> 8, c[u + 12] = this._h[6] >>> 0, c[u + 13] = this._h[6] >>> 8, c[u + 14] = this._h[7] >>> 0, c[u + 15] = this._h[7] >>> 8, this._finished = !0, this;\n      }, o.prototype.update = function(c) {\n        var u = 0, d = c.length, p;\n        if (this._leftover) {\n          p = 16 - this._leftover, p > d && (p = d);\n          for (var b = 0; b < p; b++)\n            this._buffer[this._leftover + b] = c[u + b];\n          if (d -= p, u += p, this._leftover += p, this._leftover < 16)\n            return this;\n          this._blocks(this._buffer, 0, 16), this._leftover = 0;\n        }\n        if (d >= 16 && (p = d - d % 16, this._blocks(c, u, p), u += p, d -= p), d) {\n          for (var b = 0; b < d; b++)\n            this._buffer[this._leftover + b] = c[u + b];\n          this._leftover += d;\n        }\n        return this;\n      }, o.prototype.digest = function() {\n        if (this._finished)\n          throw new Error(\"Poly1305 was finished\");\n        var c = new Uint8Array(16);\n        return this.finish(c), c;\n      }, o.prototype.clean = function() {\n        return t.wipe(this._buffer), t.wipe(this._r), t.wipe(this._h), t.wipe(this._pad), this._leftover = 0, this._fin = 0, this._finished = !0, this;\n      }, o;\n    }()\n  );\n  i.Poly1305 = s;\n  function r(o, c) {\n    var u = new s(o);\n    u.update(c);\n    var d = u.digest();\n    return u.clean(), d;\n  }\n  i.oneTimeAuth = r;\n  function n(o, c) {\n    return o.length !== i.DIGEST_LENGTH || c.length !== i.DIGEST_LENGTH ? !1 : e.equal(o, c);\n  }\n  i.equal = n;\n})(xc);\n(function(i) {\n  Object.defineProperty(i, \"__esModule\", { value: !0 });\n  var e = hr, t = xc, s = Pt, r = oe, n = di;\n  i.KEY_LENGTH = 32, i.NONCE_LENGTH = 12, i.TAG_LENGTH = 16;\n  var o = new Uint8Array(16), c = (\n    /** @class */\n    function() {\n      function u(d) {\n        if (this.nonceLength = i.NONCE_LENGTH, this.tagLength = i.TAG_LENGTH, d.length !== i.KEY_LENGTH)\n          throw new Error(\"ChaCha20Poly1305 needs 32-byte key\");\n        this._key = new Uint8Array(d);\n      }\n      return u.prototype.seal = function(d, p, b, x) {\n        if (d.length > 16)\n          throw new Error(\"ChaCha20Poly1305: incorrect nonce length\");\n        var O = new Uint8Array(16);\n        O.set(d, O.length - d.length);\n        var _ = new Uint8Array(32);\n        e.stream(this._key, O, _, 4);\n        var C = p.length + this.tagLength, F;\n        if (x) {\n          if (x.length !== C)\n            throw new Error(\"ChaCha20Poly1305: incorrect destination length\");\n          F = x;\n        } else\n          F = new Uint8Array(C);\n        return e.streamXOR(this._key, O, p, F, 4), this._authenticate(F.subarray(F.length - this.tagLength, F.length), _, F.subarray(0, F.length - this.tagLength), b), s.wipe(O), F;\n      }, u.prototype.open = function(d, p, b, x) {\n        if (d.length > 16)\n          throw new Error(\"ChaCha20Poly1305: incorrect nonce length\");\n        if (p.length < this.tagLength)\n          return null;\n        var O = new Uint8Array(16);\n        O.set(d, O.length - d.length);\n        var _ = new Uint8Array(32);\n        e.stream(this._key, O, _, 4);\n        var C = new Uint8Array(this.tagLength);\n        if (this._authenticate(C, _, p.subarray(0, p.length - this.tagLength), b), !n.equal(C, p.subarray(p.length - this.tagLength, p.length)))\n          return null;\n        var F = p.length - this.tagLength, K;\n        if (x) {\n          if (x.length !== F)\n            throw new Error(\"ChaCha20Poly1305: incorrect destination length\");\n          K = x;\n        } else\n          K = new Uint8Array(F);\n        return e.streamXOR(this._key, O, p.subarray(0, p.length - this.tagLength), K, 4), s.wipe(O), K;\n      }, u.prototype.clean = function() {\n        return s.wipe(this._key), this;\n      }, u.prototype._authenticate = function(d, p, b, x) {\n        var O = new t.Poly1305(p);\n        x && (O.update(x), x.length % 16 > 0 && O.update(o.subarray(x.length % 16))), O.update(b), b.length % 16 > 0 && O.update(o.subarray(b.length % 16));\n        var _ = new Uint8Array(8);\n        x && r.writeUint64LE(x.length, _), O.update(_), r.writeUint64LE(b.length, _), O.update(_);\n        for (var C = O.digest(), F = 0; F < C.length; F++)\n          d[F] = C[F];\n        O.clean(), s.wipe(C), s.wipe(_);\n      }, u;\n    }()\n  );\n  i.ChaCha20Poly1305 = c;\n})(gs);\nvar Nc = {}, ys = {}, cn = {};\nObject.defineProperty(cn, \"__esModule\", { value: !0 });\nfunction vf(i) {\n  return typeof i.saveState < \"u\" && typeof i.restoreState < \"u\" && typeof i.cleanSavedState < \"u\";\n}\ncn.isSerializableHash = vf;\nObject.defineProperty(ys, \"__esModule\", { value: !0 });\nvar jt = cn, _f = di, Ef = Pt, Pc = (\n  /** @class */\n  function() {\n    function i(e, t) {\n      this._finished = !1, this._inner = new e(), this._outer = new e(), this.blockSize = this._outer.blockSize, this.digestLength = this._outer.digestLength;\n      var s = new Uint8Array(this.blockSize);\n      t.length > this.blockSize ? this._inner.update(t).finish(s).clean() : s.set(t);\n      for (var r = 0; r < s.length; r++)\n        s[r] ^= 54;\n      this._inner.update(s);\n      for (var r = 0; r < s.length; r++)\n        s[r] ^= 106;\n      this._outer.update(s), jt.isSerializableHash(this._inner) && jt.isSerializableHash(this._outer) && (this._innerKeyedState = this._inner.saveState(), this._outerKeyedState = this._outer.saveState()), Ef.wipe(s);\n    }\n    return i.prototype.reset = function() {\n      if (!jt.isSerializableHash(this._inner) || !jt.isSerializableHash(this._outer))\n        throw new Error(\"hmac: can't reset() because hash doesn't implement restoreState()\");\n      return this._inner.restoreState(this._innerKeyedState), this._outer.restoreState(this._outerKeyedState), this._finished = !1, this;\n    }, i.prototype.clean = function() {\n      jt.isSerializableHash(this._inner) && this._inner.cleanSavedState(this._innerKeyedState), jt.isSerializableHash(this._outer) && this._outer.cleanSavedState(this._outerKeyedState), this._inner.clean(), this._outer.clean();\n    }, i.prototype.update = function(e) {\n      return this._inner.update(e), this;\n    }, i.prototype.finish = function(e) {\n      return this._finished ? (this._outer.finish(e), this) : (this._inner.finish(e), this._outer.update(e.subarray(0, this.digestLength)).finish(e), this._finished = !0, this);\n    }, i.prototype.digest = function() {\n      var e = new Uint8Array(this.digestLength);\n      return this.finish(e), e;\n    }, i.prototype.saveState = function() {\n      if (!jt.isSerializableHash(this._inner))\n        throw new Error(\"hmac: can't saveState() because hash doesn't implement it\");\n      return this._inner.saveState();\n    }, i.prototype.restoreState = function(e) {\n      if (!jt.isSerializableHash(this._inner) || !jt.isSerializableHash(this._outer))\n        throw new Error(\"hmac: can't restoreState() because hash doesn't implement it\");\n      return this._inner.restoreState(e), this._outer.restoreState(this._outerKeyedState), this._finished = !1, this;\n    }, i.prototype.cleanSavedState = function(e) {\n      if (!jt.isSerializableHash(this._inner))\n        throw new Error(\"hmac: can't cleanSavedState() because hash doesn't implement it\");\n      this._inner.cleanSavedState(e);\n    }, i;\n  }()\n);\nys.HMAC = Pc;\nfunction Sf(i, e, t) {\n  var s = new Pc(i, e);\n  s.update(t);\n  var r = s.digest();\n  return s.clean(), r;\n}\nys.hmac = Sf;\nys.equal = _f.equal;\nObject.defineProperty(Nc, \"__esModule\", { value: !0 });\nvar vo = ys, _o = Pt, If = (\n  /** @class */\n  function() {\n    function i(e, t, s, r) {\n      s === void 0 && (s = new Uint8Array(0)), this._counter = new Uint8Array(1), this._hash = e, this._info = r;\n      var n = vo.hmac(this._hash, s, t);\n      this._hmac = new vo.HMAC(e, n), this._buffer = new Uint8Array(this._hmac.digestLength), this._bufpos = this._buffer.length;\n    }\n    return i.prototype._fillBuffer = function() {\n      this._counter[0]++;\n      var e = this._counter[0];\n      if (e === 0)\n        throw new Error(\"hkdf: cannot expand more\");\n      this._hmac.reset(), e > 1 && this._hmac.update(this._buffer), this._info && this._hmac.update(this._info), this._hmac.update(this._counter), this._hmac.finish(this._buffer), this._bufpos = 0;\n    }, i.prototype.expand = function(e) {\n      for (var t = new Uint8Array(e), s = 0; s < t.length; s++)\n        this._bufpos === this._buffer.length && this._fillBuffer(), t[s] = this._buffer[this._bufpos++];\n      return t;\n    }, i.prototype.clean = function() {\n      this._hmac.clean(), _o.wipe(this._buffer), _o.wipe(this._counter), this._bufpos = 0;\n    }, i;\n  }()\n), Rc = Nc.HKDF = If, Si = {};\n(function(i) {\n  Object.defineProperty(i, \"__esModule\", { value: !0 });\n  var e = oe, t = Pt;\n  i.DIGEST_LENGTH = 32, i.BLOCK_SIZE = 64;\n  var s = (\n    /** @class */\n    function() {\n      function c() {\n        this.digestLength = i.DIGEST_LENGTH, this.blockSize = i.BLOCK_SIZE, this._state = new Int32Array(8), this._temp = new Int32Array(64), this._buffer = new Uint8Array(128), this._bufferLength = 0, this._bytesHashed = 0, this._finished = !1, this.reset();\n      }\n      return c.prototype._initState = function() {\n        this._state[0] = 1779033703, this._state[1] = 3144134277, this._state[2] = 1013904242, this._state[3] = 2773480762, this._state[4] = 1359893119, this._state[5] = 2600822924, this._state[6] = 528734635, this._state[7] = 1541459225;\n      }, c.prototype.reset = function() {\n        return this._initState(), this._bufferLength = 0, this._bytesHashed = 0, this._finished = !1, this;\n      }, c.prototype.clean = function() {\n        t.wipe(this._buffer), t.wipe(this._temp), this.reset();\n      }, c.prototype.update = function(u, d) {\n        if (d === void 0 && (d = u.length), this._finished)\n          throw new Error(\"SHA256: can't update because hash was finished.\");\n        var p = 0;\n        if (this._bytesHashed += d, this._bufferLength > 0) {\n          for (; this._bufferLength < this.blockSize && d > 0; )\n            this._buffer[this._bufferLength++] = u[p++], d--;\n          this._bufferLength === this.blockSize && (n(this._temp, this._state, this._buffer, 0, this.blockSize), this._bufferLength = 0);\n        }\n        for (d >= this.blockSize && (p = n(this._temp, this._state, u, p, d), d %= this.blockSize); d > 0; )\n          this._buffer[this._bufferLength++] = u[p++], d--;\n        return this;\n      }, c.prototype.finish = function(u) {\n        if (!this._finished) {\n          var d = this._bytesHashed, p = this._bufferLength, b = d / 536870912 | 0, x = d << 3, O = d % 64 < 56 ? 64 : 128;\n          this._buffer[p] = 128;\n          for (var _ = p + 1; _ < O - 8; _++)\n            this._buffer[_] = 0;\n          e.writeUint32BE(b, this._buffer, O - 8), e.writeUint32BE(x, this._buffer, O - 4), n(this._temp, this._state, this._buffer, 0, O), this._finished = !0;\n        }\n        for (var _ = 0; _ < this.digestLength / 4; _++)\n          e.writeUint32BE(this._state[_], u, _ * 4);\n        return this;\n      }, c.prototype.digest = function() {\n        var u = new Uint8Array(this.digestLength);\n        return this.finish(u), u;\n      }, c.prototype.saveState = function() {\n        if (this._finished)\n          throw new Error(\"SHA256: cannot save finished state\");\n        return {\n          state: new Int32Array(this._state),\n          buffer: this._bufferLength > 0 ? new Uint8Array(this._buffer) : void 0,\n          bufferLength: this._bufferLength,\n          bytesHashed: this._bytesHashed\n        };\n      }, c.prototype.restoreState = function(u) {\n        return this._state.set(u.state), this._bufferLength = u.bufferLength, u.buffer && this._buffer.set(u.buffer), this._bytesHashed = u.bytesHashed, this._finished = !1, this;\n      }, c.prototype.cleanSavedState = function(u) {\n        t.wipe(u.state), u.buffer && t.wipe(u.buffer), u.bufferLength = 0, u.bytesHashed = 0;\n      }, c;\n    }()\n  );\n  i.SHA256 = s;\n  var r = new Int32Array([\n    1116352408,\n    1899447441,\n    3049323471,\n    3921009573,\n    961987163,\n    1508970993,\n    2453635748,\n    2870763221,\n    3624381080,\n    310598401,\n    607225278,\n    1426881987,\n    1925078388,\n    2162078206,\n    2614888103,\n    3248222580,\n    3835390401,\n    4022224774,\n    264347078,\n    604807628,\n    770255983,\n    1249150122,\n    1555081692,\n    1996064986,\n    2554220882,\n    2821834349,\n    2952996808,\n    3210313671,\n    3336571891,\n    3584528711,\n    113926993,\n    338241895,\n    666307205,\n    773529912,\n    1294757372,\n    1396182291,\n    1695183700,\n    1986661051,\n    2177026350,\n    2456956037,\n    2730485921,\n    2820302411,\n    3259730800,\n    3345764771,\n    3516065817,\n    3600352804,\n    4094571909,\n    275423344,\n    430227734,\n    506948616,\n    659060556,\n    883997877,\n    958139571,\n    1322822218,\n    1537002063,\n    1747873779,\n    1955562222,\n    2024104815,\n    2227730452,\n    2361852424,\n    2428436474,\n    2756734187,\n    3204031479,\n    3329325298\n  ]);\n  function n(c, u, d, p, b) {\n    for (; b >= 64; ) {\n      for (var x = u[0], O = u[1], _ = u[2], C = u[3], F = u[4], K = u[5], I = u[6], D = u[7], y = 0; y < 16; y++) {\n        var w = p + y * 4;\n        c[y] = e.readUint32BE(d, w);\n      }\n      for (var y = 16; y < 64; y++) {\n        var f = c[y - 2], a = (f >>> 17 | f << 32 - 17) ^ (f >>> 19 | f << 32 - 19) ^ f >>> 10;\n        f = c[y - 15];\n        var l = (f >>> 7 | f << 32 - 7) ^ (f >>> 18 | f << 32 - 18) ^ f >>> 3;\n        c[y] = (a + c[y - 7] | 0) + (l + c[y - 16] | 0);\n      }\n      for (var y = 0; y < 64; y++) {\n        var a = (((F >>> 6 | F << 26) ^ (F >>> 11 | F << 21) ^ (F >>> 25 | F << 7)) + (F & K ^ ~F & I) | 0) + (D + (r[y] + c[y] | 0) | 0) | 0, l = ((x >>> 2 | x << 32 - 2) ^ (x >>> 13 | x << 32 - 13) ^ (x >>> 22 | x << 32 - 22)) + (x & O ^ x & _ ^ O & _) | 0;\n        D = I, I = K, K = F, F = C + a | 0, C = _, _ = O, O = x, x = a + l | 0;\n      }\n      u[0] += x, u[1] += O, u[2] += _, u[3] += C, u[4] += F, u[5] += K, u[6] += I, u[7] += D, p += 64, b -= 64;\n    }\n    return p;\n  }\n  function o(c) {\n    var u = new s();\n    u.update(c);\n    var d = u.digest();\n    return u.clean(), d;\n  }\n  i.hash = o;\n})(Si);\nvar ms = {};\n(function(i) {\n  Object.defineProperty(i, \"__esModule\", { value: !0 }), i.sharedKey = i.generateKeyPair = i.generateKeyPairFromSeed = i.scalarMultBase = i.scalarMult = i.SHARED_KEY_LENGTH = i.SECRET_KEY_LENGTH = i.PUBLIC_KEY_LENGTH = void 0;\n  const e = li, t = Pt;\n  i.PUBLIC_KEY_LENGTH = 32, i.SECRET_KEY_LENGTH = 32, i.SHARED_KEY_LENGTH = 32;\n  function s(y) {\n    const w = new Float64Array(16);\n    if (y)\n      for (let f = 0; f < y.length; f++)\n        w[f] = y[f];\n    return w;\n  }\n  const r = new Uint8Array(32);\n  r[0] = 9;\n  const n = s([56129, 1]);\n  function o(y) {\n    let w = 1;\n    for (let f = 0; f < 16; f++) {\n      let a = y[f] + w + 65535;\n      w = Math.floor(a / 65536), y[f] = a - w * 65536;\n    }\n    y[0] += w - 1 + 37 * (w - 1);\n  }\n  function c(y, w, f) {\n    const a = ~(f - 1);\n    for (let l = 0; l < 16; l++) {\n      const L = a & (y[l] ^ w[l]);\n      y[l] ^= L, w[l] ^= L;\n    }\n  }\n  function u(y, w) {\n    const f = s(), a = s();\n    for (let l = 0; l < 16; l++)\n      a[l] = w[l];\n    o(a), o(a), o(a);\n    for (let l = 0; l < 2; l++) {\n      f[0] = a[0] - 65517;\n      for (let v = 1; v < 15; v++)\n        f[v] = a[v] - 65535 - (f[v - 1] >> 16 & 1), f[v - 1] &= 65535;\n      f[15] = a[15] - 32767 - (f[14] >> 16 & 1);\n      const L = f[15] >> 16 & 1;\n      f[14] &= 65535, c(a, f, 1 - L);\n    }\n    for (let l = 0; l < 16; l++)\n      y[2 * l] = a[l] & 255, y[2 * l + 1] = a[l] >> 8;\n  }\n  function d(y, w) {\n    for (let f = 0; f < 16; f++)\n      y[f] = w[2 * f] + (w[2 * f + 1] << 8);\n    y[15] &= 32767;\n  }\n  function p(y, w, f) {\n    for (let a = 0; a < 16; a++)\n      y[a] = w[a] + f[a];\n  }\n  function b(y, w, f) {\n    for (let a = 0; a < 16; a++)\n      y[a] = w[a] - f[a];\n  }\n  function x(y, w, f) {\n    let a, l, L = 0, v = 0, R = 0, $ = 0, q = 0, m = 0, E = 0, B = 0, z = 0, j = 0, U = 0, M = 0, H = 0, te = 0, G = 0, ie = 0, Q = 0, se = 0, T = 0, A = 0, N = 0, h = 0, S = 0, W = 0, X = 0, fe = 0, ve = 0, ge = 0, Se = 0, Me = 0, $e = 0, be = f[0], ye = f[1], pe = f[2], le = f[3], ue = f[4], he = f[5], ce = f[6], re = f[7], de = f[8], me = f[9], ne = f[10], _e = f[11], Ee = f[12], De = f[13], xe = f[14], Ie = f[15];\n    a = w[0], L += a * be, v += a * ye, R += a * pe, $ += a * le, q += a * ue, m += a * he, E += a * ce, B += a * re, z += a * de, j += a * me, U += a * ne, M += a * _e, H += a * Ee, te += a * De, G += a * xe, ie += a * Ie, a = w[1], v += a * be, R += a * ye, $ += a * pe, q += a * le, m += a * ue, E += a * he, B += a * ce, z += a * re, j += a * de, U += a * me, M += a * ne, H += a * _e, te += a * Ee, G += a * De, ie += a * xe, Q += a * Ie, a = w[2], R += a * be, $ += a * ye, q += a * pe, m += a * le, E += a * ue, B += a * he, z += a * ce, j += a * re, U += a * de, M += a * me, H += a * ne, te += a * _e, G += a * Ee, ie += a * De, Q += a * xe, se += a * Ie, a = w[3], $ += a * be, q += a * ye, m += a * pe, E += a * le, B += a * ue, z += a * he, j += a * ce, U += a * re, M += a * de, H += a * me, te += a * ne, G += a * _e, ie += a * Ee, Q += a * De, se += a * xe, T += a * Ie, a = w[4], q += a * be, m += a * ye, E += a * pe, B += a * le, z += a * ue, j += a * he, U += a * ce, M += a * re, H += a * de, te += a * me, G += a * ne, ie += a * _e, Q += a * Ee, se += a * De, T += a * xe, A += a * Ie, a = w[5], m += a * be, E += a * ye, B += a * pe, z += a * le, j += a * ue, U += a * he, M += a * ce, H += a * re, te += a * de, G += a * me, ie += a * ne, Q += a * _e, se += a * Ee, T += a * De, A += a * xe, N += a * Ie, a = w[6], E += a * be, B += a * ye, z += a * pe, j += a * le, U += a * ue, M += a * he, H += a * ce, te += a * re, G += a * de, ie += a * me, Q += a * ne, se += a * _e, T += a * Ee, A += a * De, N += a * xe, h += a * Ie, a = w[7], B += a * be, z += a * ye, j += a * pe, U += a * le, M += a * ue, H += a * he, te += a * ce, G += a * re, ie += a * de, Q += a * me, se += a * ne, T += a * _e, A += a * Ee, N += a * De, h += a * xe, S += a * Ie, a = w[8], z += a * be, j += a * ye, U += a * pe, M += a * le, H += a * ue, te += a * he, G += a * ce, ie += a * re, Q += a * de, se += a * me, T += a * ne, A += a * _e, N += a * Ee, h += a * De, S += a * xe, W += a * Ie, a = w[9], j += a * be, U += a * ye, M += a * pe, H += a * le, te += a * ue, G += a * he, ie += a * ce, Q += a * re, se += a * de, T += a * me, A += a * ne, N += a * _e, h += a * Ee, S += a * De, W += a * xe, X += a * Ie, a = w[10], U += a * be, M += a * ye, H += a * pe, te += a * le, G += a * ue, ie += a * he, Q += a * ce, se += a * re, T += a * de, A += a * me, N += a * ne, h += a * _e, S += a * Ee, W += a * De, X += a * xe, fe += a * Ie, a = w[11], M += a * be, H += a * ye, te += a * pe, G += a * le, ie += a * ue, Q += a * he, se += a * ce, T += a * re, A += a * de, N += a * me, h += a * ne, S += a * _e, W += a * Ee, X += a * De, fe += a * xe, ve += a * Ie, a = w[12], H += a * be, te += a * ye, G += a * pe, ie += a * le, Q += a * ue, se += a * he, T += a * ce, A += a * re, N += a * de, h += a * me, S += a * ne, W += a * _e, X += a * Ee, fe += a * De, ve += a * xe, ge += a * Ie, a = w[13], te += a * be, G += a * ye, ie += a * pe, Q += a * le, se += a * ue, T += a * he, A += a * ce, N += a * re, h += a * de, S += a * me, W += a * ne, X += a * _e, fe += a * Ee, ve += a * De, ge += a * xe, Se += a * Ie, a = w[14], G += a * be, ie += a * ye, Q += a * pe, se += a * le, T += a * ue, A += a * he, N += a * ce, h += a * re, S += a * de, W += a * me, X += a * ne, fe += a * _e, ve += a * Ee, ge += a * De, Se += a * xe, Me += a * Ie, a = w[15], ie += a * be, Q += a * ye, se += a * pe, T += a * le, A += a * ue, N += a * he, h += a * ce, S += a * re, W += a * de, X += a * me, fe += a * ne, ve += a * _e, ge += a * Ee, Se += a * De, Me += a * xe, $e += a * Ie, L += 38 * Q, v += 38 * se, R += 38 * T, $ += 38 * A, q += 38 * N, m += 38 * h, E += 38 * S, B += 38 * W, z += 38 * X, j += 38 * fe, U += 38 * ve, M += 38 * ge, H += 38 * Se, te += 38 * Me, G += 38 * $e, l = 1, a = L + l + 65535, l = Math.floor(a / 65536), L = a - l * 65536, a = v + l + 65535, l = Math.floor(a / 65536), v = a - l * 65536, a = R + l + 65535, l = Math.floor(a / 65536), R = a - l * 65536, a = $ + l + 65535, l = Math.floor(a / 65536), $ = a - l * 65536, a = q + l + 65535, l = Math.floor(a / 65536), q = a - l * 65536, a = m + l + 65535, l = Math.floor(a / 65536), m = a - l * 65536, a = E + l + 65535, l = Math.floor(a / 65536), E = a - l * 65536, a = B + l + 65535, l = Math.floor(a / 65536), B = a - l * 65536, a = z + l + 65535, l = Math.floor(a / 65536), z = a - l * 65536, a = j + l + 65535, l = Math.floor(a / 65536), j = a - l * 65536, a = U + l + 65535, l = Math.floor(a / 65536), U = a - l * 65536, a = M + l + 65535, l = Math.floor(a / 65536), M = a - l * 65536, a = H + l + 65535, l = Math.floor(a / 65536), H = a - l * 65536, a = te + l + 65535, l = Math.floor(a / 65536), te = a - l * 65536, a = G + l + 65535, l = Math.floor(a / 65536), G = a - l * 65536, a = ie + l + 65535, l = Math.floor(a / 65536), ie = a - l * 65536, L += l - 1 + 37 * (l - 1), l = 1, a = L + l + 65535, l = Math.floor(a / 65536), L = a - l * 65536, a = v + l + 65535, l = Math.floor(a / 65536), v = a - l * 65536, a = R + l + 65535, l = Math.floor(a / 65536), R = a - l * 65536, a = $ + l + 65535, l = Math.floor(a / 65536), $ = a - l * 65536, a = q + l + 65535, l = Math.floor(a / 65536), q = a - l * 65536, a = m + l + 65535, l = Math.floor(a / 65536), m = a - l * 65536, a = E + l + 65535, l = Math.floor(a / 65536), E = a - l * 65536, a = B + l + 65535, l = Math.floor(a / 65536), B = a - l * 65536, a = z + l + 65535, l = Math.floor(a / 65536), z = a - l * 65536, a = j + l + 65535, l = Math.floor(a / 65536), j = a - l * 65536, a = U + l + 65535, l = Math.floor(a / 65536), U = a - l * 65536, a = M + l + 65535, l = Math.floor(a / 65536), M = a - l * 65536, a = H + l + 65535, l = Math.floor(a / 65536), H = a - l * 65536, a = te + l + 65535, l = Math.floor(a / 65536), te = a - l * 65536, a = G + l + 65535, l = Math.floor(a / 65536), G = a - l * 65536, a = ie + l + 65535, l = Math.floor(a / 65536), ie = a - l * 65536, L += l - 1 + 37 * (l - 1), y[0] = L, y[1] = v, y[2] = R, y[3] = $, y[4] = q, y[5] = m, y[6] = E, y[7] = B, y[8] = z, y[9] = j, y[10] = U, y[11] = M, y[12] = H, y[13] = te, y[14] = G, y[15] = ie;\n  }\n  function O(y, w) {\n    x(y, w, w);\n  }\n  function _(y, w) {\n    const f = s();\n    for (let a = 0; a < 16; a++)\n      f[a] = w[a];\n    for (let a = 253; a >= 0; a--)\n      O(f, f), a !== 2 && a !== 4 && x(f, f, w);\n    for (let a = 0; a < 16; a++)\n      y[a] = f[a];\n  }\n  function C(y, w) {\n    const f = new Uint8Array(32), a = new Float64Array(80), l = s(), L = s(), v = s(), R = s(), $ = s(), q = s();\n    for (let z = 0; z < 31; z++)\n      f[z] = y[z];\n    f[31] = y[31] & 127 | 64, f[0] &= 248, d(a, w);\n    for (let z = 0; z < 16; z++)\n      L[z] = a[z];\n    l[0] = R[0] = 1;\n    for (let z = 254; z >= 0; --z) {\n      const j = f[z >>> 3] >>> (z & 7) & 1;\n      c(l, L, j), c(v, R, j), p($, l, v), b(l, l, v), p(v, L, R), b(L, L, R), O(R, $), O(q, l), x(l, v, l), x(v, L, $), p($, l, v), b(l, l, v), O(L, l), b(v, R, q), x(l, v, n), p(l, l, R), x(v, v, l), x(l, R, q), x(R, L, a), O(L, $), c(l, L, j), c(v, R, j);\n    }\n    for (let z = 0; z < 16; z++)\n      a[z + 16] = l[z], a[z + 32] = v[z], a[z + 48] = L[z], a[z + 64] = R[z];\n    const m = a.subarray(32), E = a.subarray(16);\n    _(m, m), x(E, E, m);\n    const B = new Uint8Array(32);\n    return u(B, E), B;\n  }\n  i.scalarMult = C;\n  function F(y) {\n    return C(y, r);\n  }\n  i.scalarMultBase = F;\n  function K(y) {\n    if (y.length !== i.SECRET_KEY_LENGTH)\n      throw new Error(`x25519: seed must be ${i.SECRET_KEY_LENGTH} bytes`);\n    const w = new Uint8Array(y);\n    return {\n      publicKey: F(w),\n      secretKey: w\n    };\n  }\n  i.generateKeyPairFromSeed = K;\n  function I(y) {\n    const w = (0, e.randomBytes)(32, y), f = K(w);\n    return (0, t.wipe)(w), f;\n  }\n  i.generateKeyPair = I;\n  function D(y, w, f = !1) {\n    if (y.length !== i.PUBLIC_KEY_LENGTH)\n      throw new Error(\"X25519: incorrect secret key length\");\n    if (w.length !== i.PUBLIC_KEY_LENGTH)\n      throw new Error(\"X25519: incorrect public key length\");\n    const a = C(y, w);\n    if (f) {\n      let l = 0;\n      for (let L = 0; L < a.length; L++)\n        l |= a[L];\n      if (l === 0)\n        throw new Error(\"X25519: invalid shared key\");\n    }\n    return a;\n  }\n  i.sharedKey = D;\n})(ms);\nvar Eo = globalThis && globalThis.__spreadArray || function(i, e, t) {\n  if (t || arguments.length === 2)\n    for (var s = 0, r = e.length, n; s < r; s++)\n      (n || !(s in e)) && (n || (n = Array.prototype.slice.call(e, 0, s)), n[s] = e[s]);\n  return i.concat(n || Array.prototype.slice.call(e));\n}, Df = (\n  /** @class */\n  function() {\n    function i(e, t, s) {\n      this.name = e, this.version = t, this.os = s, this.type = \"browser\";\n    }\n    return i;\n  }()\n), xf = (\n  /** @class */\n  function() {\n    function i(e) {\n      this.version = e, this.type = \"node\", this.name = \"node\", this.os = process.platform;\n    }\n    return i;\n  }()\n), Of = (\n  /** @class */\n  function() {\n    function i(e, t, s, r) {\n      this.name = e, this.version = t, this.os = s, this.bot = r, this.type = \"bot-device\";\n    }\n    return i;\n  }()\n), Nf = (\n  /** @class */\n  function() {\n    function i() {\n      this.type = \"bot\", this.bot = !0, this.name = \"bot\", this.version = null, this.os = null;\n    }\n    return i;\n  }()\n), Pf = (\n  /** @class */\n  function() {\n    function i() {\n      this.type = \"react-native\", this.name = \"react-native\", this.version = null, this.os = null;\n    }\n    return i;\n  }()\n), Rf = /alexa|bot|crawl(er|ing)|facebookexternalhit|feedburner|google web preview|nagios|postrank|pingdom|slurp|spider|yahoo!|yandex/, Cf = /(nuhk|curl|Googlebot|Yammybot|Openbot|Slurp|MSNBot|Ask\\ Jeeves\\/Teoma|ia_archiver)/, So = 3, Af = [\n  [\"aol\", /AOLShield\\/([0-9\\._]+)/],\n  [\"edge\", /Edge\\/([0-9\\._]+)/],\n  [\"edge-ios\", /EdgiOS\\/([0-9\\._]+)/],\n  [\"yandexbrowser\", /YaBrowser\\/([0-9\\._]+)/],\n  [\"kakaotalk\", /KAKAOTALK\\s([0-9\\.]+)/],\n  [\"samsung\", /SamsungBrowser\\/([0-9\\.]+)/],\n  [\"silk\", /\\bSilk\\/([0-9._-]+)\\b/],\n  [\"miui\", /MiuiBrowser\\/([0-9\\.]+)$/],\n  [\"beaker\", /BeakerBrowser\\/([0-9\\.]+)/],\n  [\"edge-chromium\", /EdgA?\\/([0-9\\.]+)/],\n  [\n    \"chromium-webview\",\n    /(?!Chrom.*OPR)wv\\).*Chrom(?:e|ium)\\/([0-9\\.]+)(:?\\s|$)/\n  ],\n  [\"chrome\", /(?!Chrom.*OPR)Chrom(?:e|ium)\\/([0-9\\.]+)(:?\\s|$)/],\n  [\"phantomjs\", /PhantomJS\\/([0-9\\.]+)(:?\\s|$)/],\n  [\"crios\", /CriOS\\/([0-9\\.]+)(:?\\s|$)/],\n  [\"firefox\", /Firefox\\/([0-9\\.]+)(?:\\s|$)/],\n  [\"fxios\", /FxiOS\\/([0-9\\.]+)/],\n  [\"opera-mini\", /Opera Mini.*Version\\/([0-9\\.]+)/],\n  [\"opera\", /Opera\\/([0-9\\.]+)(?:\\s|$)/],\n  [\"opera\", /OPR\\/([0-9\\.]+)(:?\\s|$)/],\n  [\"pie\", /^Microsoft Pocket Internet Explorer\\/(\\d+\\.\\d+)$/],\n  [\"pie\", /^Mozilla\\/\\d\\.\\d+\\s\\(compatible;\\s(?:MSP?IE|MSInternet Explorer) (\\d+\\.\\d+);.*Windows CE.*\\)$/],\n  [\"netfront\", /^Mozilla\\/\\d\\.\\d+.*NetFront\\/(\\d.\\d)/],\n  [\"ie\", /Trident\\/7\\.0.*rv\\:([0-9\\.]+).*\\).*Gecko$/],\n  [\"ie\", /MSIE\\s([0-9\\.]+);.*Trident\\/[4-7].0/],\n  [\"ie\", /MSIE\\s(7\\.0)/],\n  [\"bb10\", /BB10;\\sTouch.*Version\\/([0-9\\.]+)/],\n  [\"android\", /Android\\s([0-9\\.]+)/],\n  [\"ios\", /Version\\/([0-9\\._]+).*Mobile.*Safari.*/],\n  [\"safari\", /Version\\/([0-9\\._]+).*Safari/],\n  [\"facebook\", /FB[AS]V\\/([0-9\\.]+)/],\n  [\"instagram\", /Instagram\\s([0-9\\.]+)/],\n  [\"ios-webview\", /AppleWebKit\\/([0-9\\.]+).*Mobile/],\n  [\"ios-webview\", /AppleWebKit\\/([0-9\\.]+).*Gecko\\)$/],\n  [\"curl\", /^curl\\/([0-9\\.]+)$/],\n  [\"searchbot\", Rf]\n], Io = [\n  [\"iOS\", /iP(hone|od|ad)/],\n  [\"Android OS\", /Android/],\n  [\"BlackBerry OS\", /BlackBerry|BB10/],\n  [\"Windows Mobile\", /IEMobile/],\n  [\"Amazon OS\", /Kindle/],\n  [\"Windows 3.11\", /Win16/],\n  [\"Windows 95\", /(Windows 95)|(Win95)|(Windows_95)/],\n  [\"Windows 98\", /(Windows 98)|(Win98)/],\n  [\"Windows 2000\", /(Windows NT 5.0)|(Windows 2000)/],\n  [\"Windows XP\", /(Windows NT 5.1)|(Windows XP)/],\n  [\"Windows Server 2003\", /(Windows NT 5.2)/],\n  [\"Windows Vista\", /(Windows NT 6.0)/],\n  [\"Windows 7\", /(Windows NT 6.1)/],\n  [\"Windows 8\", /(Windows NT 6.2)/],\n  [\"Windows 8.1\", /(Windows NT 6.3)/],\n  [\"Windows 10\", /(Windows NT 10.0)/],\n  [\"Windows ME\", /Windows ME/],\n  [\"Windows CE\", /Windows CE|WinCE|Microsoft Pocket Internet Explorer/],\n  [\"Open BSD\", /OpenBSD/],\n  [\"Sun OS\", /SunOS/],\n  [\"Chrome OS\", /CrOS/],\n  [\"Linux\", /(Linux)|(X11)/],\n  [\"Mac OS\", /(Mac_PowerPC)|(Macintosh)/],\n  [\"QNX\", /QNX/],\n  [\"BeOS\", /BeOS/],\n  [\"OS/2\", /OS\\/2/]\n];\nfunction hn(i) {\n  return i ? Do(i) : typeof document > \"u\" && typeof navigator < \"u\" && navigator.product === \"ReactNative\" ? new Pf() : typeof navigator < \"u\" ? Do(navigator.userAgent) : Ff();\n}\nfunction Tf(i) {\n  return i !== \"\" && Af.reduce(function(e, t) {\n    var s = t[0], r = t[1];\n    if (e)\n      return e;\n    var n = r.exec(i);\n    return !!n && [s, n];\n  }, !1);\n}\nfunction Do(i) {\n  var e = Tf(i);\n  if (!e)\n    return null;\n  var t = e[0], s = e[1];\n  if (t === \"searchbot\")\n    return new Nf();\n  var r = s[1] && s[1].split(\".\").join(\"_\").split(\"_\").slice(0, 3);\n  r ? r.length < So && (r = Eo(Eo([], r, !0), Uf(So - r.length), !0)) : r = [];\n  var n = r.join(\".\"), o = $f(i), c = Cf.exec(i);\n  return c && c[1] ? new Of(t, n, o, c[1]) : new Df(t, n, o);\n}\nfunction $f(i) {\n  for (var e = 0, t = Io.length; e < t; e++) {\n    var s = Io[e], r = s[0], n = s[1], o = n.exec(i);\n    if (o)\n      return r;\n  }\n  return null;\n}\nfunction Ff() {\n  var i = typeof process < \"u\" && process.version;\n  return i ? new xf(process.version.slice(1)) : null;\n}\nfunction Uf(i) {\n  for (var e = [], t = 0; t < i; t++)\n    e.push(\"0\");\n  return e;\n}\nvar Pe = {};\nObject.defineProperty(Pe, \"__esModule\", { value: !0 });\nPe.getLocalStorage = Pe.getLocalStorageOrThrow = Pe.getCrypto = Pe.getCryptoOrThrow = ln = Pe.getLocation = Pe.getLocationOrThrow = bs = Pe.getNavigator = Pe.getNavigatorOrThrow = un = Pe.getDocument = Pe.getDocumentOrThrow = Pe.getFromWindowOrThrow = Pe.getFromWindow = void 0;\nfunction Ii(i) {\n  let e;\n  return typeof window < \"u\" && typeof window[i] < \"u\" && (e = window[i]), e;\n}\nPe.getFromWindow = Ii;\nfunction Li(i) {\n  const e = Ii(i);\n  if (!e)\n    throw new Error(`${i} is not defined in Window`);\n  return e;\n}\nPe.getFromWindowOrThrow = Li;\nfunction Lf() {\n  return Li(\"document\");\n}\nPe.getDocumentOrThrow = Lf;\nfunction Mf() {\n  return Ii(\"document\");\n}\nvar un = Pe.getDocument = Mf;\nfunction qf() {\n  return Li(\"navigator\");\n}\nPe.getNavigatorOrThrow = qf;\nfunction jf() {\n  return Ii(\"navigator\");\n}\nvar bs = Pe.getNavigator = jf;\nfunction zf() {\n  return Li(\"location\");\n}\nPe.getLocationOrThrow = zf;\nfunction Kf() {\n  return Ii(\"location\");\n}\nvar ln = Pe.getLocation = Kf;\nfunction Vf() {\n  return Li(\"crypto\");\n}\nPe.getCryptoOrThrow = Vf;\nfunction Bf() {\n  return Ii(\"crypto\");\n}\nPe.getCrypto = Bf;\nfunction kf() {\n  return Li(\"localStorage\");\n}\nPe.getLocalStorageOrThrow = kf;\nfunction Hf() {\n  return Ii(\"localStorage\");\n}\nPe.getLocalStorage = Hf;\nvar dn = {};\nObject.defineProperty(dn, \"__esModule\", { value: !0 });\nvar fn = dn.getWindowMetadata = void 0;\nconst xo = Pe;\nfunction Gf() {\n  let i, e;\n  try {\n    i = xo.getDocumentOrThrow(), e = xo.getLocationOrThrow();\n  } catch {\n    return null;\n  }\n  function t() {\n    const b = i.getElementsByTagName(\"link\"), x = [];\n    for (let O = 0; O < b.length; O++) {\n      const _ = b[O], C = _.getAttribute(\"rel\");\n      if (C && C.toLowerCase().indexOf(\"icon\") > -1) {\n        const F = _.getAttribute(\"href\");\n        if (F)\n          if (F.toLowerCase().indexOf(\"https:\") === -1 && F.toLowerCase().indexOf(\"http:\") === -1 && F.indexOf(\"//\") !== 0) {\n            let K = e.protocol + \"//\" + e.host;\n            if (F.indexOf(\"/\") === 0)\n              K += F;\n            else {\n              const I = e.pathname.split(\"/\");\n              I.pop();\n              const D = I.join(\"/\");\n              K += D + \"/\" + F;\n            }\n            x.push(K);\n          } else if (F.indexOf(\"//\") === 0) {\n            const K = e.protocol + F;\n            x.push(K);\n          } else\n            x.push(F);\n      }\n    }\n    return x;\n  }\n  function s(...b) {\n    const x = i.getElementsByTagName(\"meta\");\n    for (let O = 0; O < x.length; O++) {\n      const _ = x[O], C = [\"itemprop\", \"property\", \"name\"].map((F) => _.getAttribute(F)).filter((F) => F ? b.includes(F) : !1);\n      if (C.length && C) {\n        const F = _.getAttribute(\"content\");\n        if (F)\n          return F;\n      }\n    }\n    return \"\";\n  }\n  function r() {\n    let b = s(\"name\", \"og:site_name\", \"og:title\", \"twitter:title\");\n    return b || (b = i.title), b;\n  }\n  function n() {\n    return s(\"description\", \"og:description\", \"twitter:description\", \"keywords\");\n  }\n  const o = r(), c = n(), u = e.origin, d = t();\n  return {\n    description: c,\n    url: u,\n    icons: d,\n    name: o\n  };\n}\nfn = dn.getWindowMetadata = Gf;\nvar ii = {}, Wf = (i) => encodeURIComponent(i).replace(/[!'()*]/g, (e) => `%${e.charCodeAt(0).toString(16).toUpperCase()}`), Cc = \"%[a-f0-9]{2}\", Oo = new RegExp(\"(\" + Cc + \")|([^%]+?)\", \"gi\"), No = new RegExp(\"(\" + Cc + \")+\", \"gi\");\nfunction Vr(i, e) {\n  try {\n    return [decodeURIComponent(i.join(\"\"))];\n  } catch {\n  }\n  if (i.length === 1)\n    return i;\n  e = e || 1;\n  var t = i.slice(0, e), s = i.slice(e);\n  return Array.prototype.concat.call([], Vr(t), Vr(s));\n}\nfunction Yf(i) {\n  try {\n    return decodeURIComponent(i);\n  } catch {\n    for (var e = i.match(Oo) || [], t = 1; t < e.length; t++)\n      i = Vr(e, t).join(\"\"), e = i.match(Oo) || [];\n    return i;\n  }\n}\nfunction Jf(i) {\n  for (var e = {\n    \"%FE%FF\": \"��\",\n    \"%FF%FE\": \"��\"\n  }, t = No.exec(i); t; ) {\n    try {\n      e[t[0]] = decodeURIComponent(t[0]);\n    } catch {\n      var s = Yf(t[0]);\n      s !== t[0] && (e[t[0]] = s);\n    }\n    t = No.exec(i);\n  }\n  e[\"%C2\"] = \"�\";\n  for (var r = Object.keys(e), n = 0; n < r.length; n++) {\n    var o = r[n];\n    i = i.replace(new RegExp(o, \"g\"), e[o]);\n  }\n  return i;\n}\nvar Qf = function(i) {\n  if (typeof i != \"string\")\n    throw new TypeError(\"Expected `encodedURI` to be of type `string`, got `\" + typeof i + \"`\");\n  try {\n    return i = i.replace(/\\+/g, \" \"), decodeURIComponent(i);\n  } catch {\n    return Jf(i);\n  }\n}, Xf = (i, e) => {\n  if (!(typeof i == \"string\" && typeof e == \"string\"))\n    throw new TypeError(\"Expected the arguments to be of type `string`\");\n  if (e === \"\")\n    return [i];\n  const t = i.indexOf(e);\n  return t === -1 ? [i] : [\n    i.slice(0, t),\n    i.slice(t + e.length)\n  ];\n}, Zf = function(i, e) {\n  for (var t = {}, s = Object.keys(i), r = Array.isArray(e), n = 0; n < s.length; n++) {\n    var o = s[n], c = i[o];\n    (r ? e.indexOf(o) !== -1 : e(o, c, i)) && (t[o] = c);\n  }\n  return t;\n};\n(function(i) {\n  const e = Wf, t = Qf, s = Xf, r = Zf, n = (I) => I == null, o = Symbol(\"encodeFragmentIdentifier\");\n  function c(I) {\n    switch (I.arrayFormat) {\n      case \"index\":\n        return (D) => (y, w) => {\n          const f = y.length;\n          return w === void 0 || I.skipNull && w === null || I.skipEmptyString && w === \"\" ? y : w === null ? [...y, [p(D, I), \"[\", f, \"]\"].join(\"\")] : [\n            ...y,\n            [p(D, I), \"[\", p(f, I), \"]=\", p(w, I)].join(\"\")\n          ];\n        };\n      case \"bracket\":\n        return (D) => (y, w) => w === void 0 || I.skipNull && w === null || I.skipEmptyString && w === \"\" ? y : w === null ? [...y, [p(D, I), \"[]\"].join(\"\")] : [...y, [p(D, I), \"[]=\", p(w, I)].join(\"\")];\n      case \"colon-list-separator\":\n        return (D) => (y, w) => w === void 0 || I.skipNull && w === null || I.skipEmptyString && w === \"\" ? y : w === null ? [...y, [p(D, I), \":list=\"].join(\"\")] : [...y, [p(D, I), \":list=\", p(w, I)].join(\"\")];\n      case \"comma\":\n      case \"separator\":\n      case \"bracket-separator\": {\n        const D = I.arrayFormat === \"bracket-separator\" ? \"[]=\" : \"=\";\n        return (y) => (w, f) => f === void 0 || I.skipNull && f === null || I.skipEmptyString && f === \"\" ? w : (f = f === null ? \"\" : f, w.length === 0 ? [[p(y, I), D, p(f, I)].join(\"\")] : [[w, p(f, I)].join(I.arrayFormatSeparator)]);\n      }\n      default:\n        return (D) => (y, w) => w === void 0 || I.skipNull && w === null || I.skipEmptyString && w === \"\" ? y : w === null ? [...y, p(D, I)] : [...y, [p(D, I), \"=\", p(w, I)].join(\"\")];\n    }\n  }\n  function u(I) {\n    let D;\n    switch (I.arrayFormat) {\n      case \"index\":\n        return (y, w, f) => {\n          if (D = /\\[(\\d*)\\]$/.exec(y), y = y.replace(/\\[\\d*\\]$/, \"\"), !D) {\n            f[y] = w;\n            return;\n          }\n          f[y] === void 0 && (f[y] = {}), f[y][D[1]] = w;\n        };\n      case \"bracket\":\n        return (y, w, f) => {\n          if (D = /(\\[\\])$/.exec(y), y = y.replace(/\\[\\]$/, \"\"), !D) {\n            f[y] = w;\n            return;\n          }\n          if (f[y] === void 0) {\n            f[y] = [w];\n            return;\n          }\n          f[y] = [].concat(f[y], w);\n        };\n      case \"colon-list-separator\":\n        return (y, w, f) => {\n          if (D = /(:list)$/.exec(y), y = y.replace(/:list$/, \"\"), !D) {\n            f[y] = w;\n            return;\n          }\n          if (f[y] === void 0) {\n            f[y] = [w];\n            return;\n          }\n          f[y] = [].concat(f[y], w);\n        };\n      case \"comma\":\n      case \"separator\":\n        return (y, w, f) => {\n          const a = typeof w == \"string\" && w.includes(I.arrayFormatSeparator), l = typeof w == \"string\" && !a && b(w, I).includes(I.arrayFormatSeparator);\n          w = l ? b(w, I) : w;\n          const L = a || l ? w.split(I.arrayFormatSeparator).map((v) => b(v, I)) : w === null ? w : b(w, I);\n          f[y] = L;\n        };\n      case \"bracket-separator\":\n        return (y, w, f) => {\n          const a = /(\\[\\])$/.test(y);\n          if (y = y.replace(/\\[\\]$/, \"\"), !a) {\n            f[y] = w && b(w, I);\n            return;\n          }\n          const l = w === null ? [] : w.split(I.arrayFormatSeparator).map((L) => b(L, I));\n          if (f[y] === void 0) {\n            f[y] = l;\n            return;\n          }\n          f[y] = [].concat(f[y], l);\n        };\n      default:\n        return (y, w, f) => {\n          if (f[y] === void 0) {\n            f[y] = w;\n            return;\n          }\n          f[y] = [].concat(f[y], w);\n        };\n    }\n  }\n  function d(I) {\n    if (typeof I != \"string\" || I.length !== 1)\n      throw new TypeError(\"arrayFormatSeparator must be single character string\");\n  }\n  function p(I, D) {\n    return D.encode ? D.strict ? e(I) : encodeURIComponent(I) : I;\n  }\n  function b(I, D) {\n    return D.decode ? t(I) : I;\n  }\n  function x(I) {\n    return Array.isArray(I) ? I.sort() : typeof I == \"object\" ? x(Object.keys(I)).sort((D, y) => Number(D) - Number(y)).map((D) => I[D]) : I;\n  }\n  function O(I) {\n    const D = I.indexOf(\"#\");\n    return D !== -1 && (I = I.slice(0, D)), I;\n  }\n  function _(I) {\n    let D = \"\";\n    const y = I.indexOf(\"#\");\n    return y !== -1 && (D = I.slice(y)), D;\n  }\n  function C(I) {\n    I = O(I);\n    const D = I.indexOf(\"?\");\n    return D === -1 ? \"\" : I.slice(D + 1);\n  }\n  function F(I, D) {\n    return D.parseNumbers && !Number.isNaN(Number(I)) && typeof I == \"string\" && I.trim() !== \"\" ? I = Number(I) : D.parseBooleans && I !== null && (I.toLowerCase() === \"true\" || I.toLowerCase() === \"false\") && (I = I.toLowerCase() === \"true\"), I;\n  }\n  function K(I, D) {\n    D = Object.assign({\n      decode: !0,\n      sort: !0,\n      arrayFormat: \"none\",\n      arrayFormatSeparator: \",\",\n      parseNumbers: !1,\n      parseBooleans: !1\n    }, D), d(D.arrayFormatSeparator);\n    const y = u(D), w = /* @__PURE__ */ Object.create(null);\n    if (typeof I != \"string\" || (I = I.trim().replace(/^[?#&]/, \"\"), !I))\n      return w;\n    for (const f of I.split(\"&\")) {\n      if (f === \"\")\n        continue;\n      let [a, l] = s(D.decode ? f.replace(/\\+/g, \" \") : f, \"=\");\n      l = l === void 0 ? null : [\"comma\", \"separator\", \"bracket-separator\"].includes(D.arrayFormat) ? l : b(l, D), y(b(a, D), l, w);\n    }\n    for (const f of Object.keys(w)) {\n      const a = w[f];\n      if (typeof a == \"object\" && a !== null)\n        for (const l of Object.keys(a))\n          a[l] = F(a[l], D);\n      else\n        w[f] = F(a, D);\n    }\n    return D.sort === !1 ? w : (D.sort === !0 ? Object.keys(w).sort() : Object.keys(w).sort(D.sort)).reduce((f, a) => {\n      const l = w[a];\n      return l && typeof l == \"object\" && !Array.isArray(l) ? f[a] = x(l) : f[a] = l, f;\n    }, /* @__PURE__ */ Object.create(null));\n  }\n  i.extract = C, i.parse = K, i.stringify = (I, D) => {\n    if (!I)\n      return \"\";\n    D = Object.assign({\n      encode: !0,\n      strict: !0,\n      arrayFormat: \"none\",\n      arrayFormatSeparator: \",\"\n    }, D), d(D.arrayFormatSeparator);\n    const y = (l) => D.skipNull && n(I[l]) || D.skipEmptyString && I[l] === \"\", w = c(D), f = {};\n    for (const l of Object.keys(I))\n      y(l) || (f[l] = I[l]);\n    const a = Object.keys(f);\n    return D.sort !== !1 && a.sort(D.sort), a.map((l) => {\n      const L = I[l];\n      return L === void 0 ? \"\" : L === null ? p(l, D) : Array.isArray(L) ? L.length === 0 && D.arrayFormat === \"bracket-separator\" ? p(l, D) + \"[]\" : L.reduce(w(l), []).join(\"&\") : p(l, D) + \"=\" + p(L, D);\n    }).filter((l) => l.length > 0).join(\"&\");\n  }, i.parseUrl = (I, D) => {\n    D = Object.assign({\n      decode: !0\n    }, D);\n    const [y, w] = s(I, \"#\");\n    return Object.assign(\n      {\n        url: y.split(\"?\")[0] || \"\",\n        query: K(C(I), D)\n      },\n      D && D.parseFragmentIdentifier && w ? { fragmentIdentifier: b(w, D) } : {}\n    );\n  }, i.stringifyUrl = (I, D) => {\n    D = Object.assign({\n      encode: !0,\n      strict: !0,\n      [o]: !0\n    }, D);\n    const y = O(I.url).split(\"?\")[0] || \"\", w = i.extract(I.url), f = i.parse(w, { sort: !1 }), a = Object.assign(f, I.query);\n    let l = i.stringify(a, D);\n    l && (l = `?${l}`);\n    let L = _(I.url);\n    return I.fragmentIdentifier && (L = `#${D[o] ? p(I.fragmentIdentifier, D) : I.fragmentIdentifier}`), `${y}${l}${L}`;\n  }, i.pick = (I, D, y) => {\n    y = Object.assign({\n      parseFragmentIdentifier: !0,\n      [o]: !1\n    }, y);\n    const { url: w, query: f, fragmentIdentifier: a } = i.parseUrl(I, y);\n    return i.stringifyUrl({\n      url: w,\n      query: r(f, D),\n      fragmentIdentifier: a\n    }, y);\n  }, i.exclude = (I, D, y) => {\n    const w = Array.isArray(D) ? (f) => !D.includes(f) : (f, a) => !D(f, a);\n    return i.pick(I, w, y);\n  };\n})(ii);\nconst Ac = {\n  waku: {\n    publish: \"waku_publish\",\n    batchPublish: \"waku_batchPublish\",\n    subscribe: \"waku_subscribe\",\n    batchSubscribe: \"waku_batchSubscribe\",\n    subscription: \"waku_subscription\",\n    unsubscribe: \"waku_unsubscribe\",\n    batchUnsubscribe: \"waku_batchUnsubscribe\"\n  },\n  irn: {\n    publish: \"irn_publish\",\n    batchPublish: \"irn_batchPublish\",\n    subscribe: \"irn_subscribe\",\n    batchSubscribe: \"irn_batchSubscribe\",\n    subscription: \"irn_subscription\",\n    unsubscribe: \"irn_unsubscribe\",\n    batchUnsubscribe: \"irn_batchUnsubscribe\"\n  },\n  iridium: {\n    publish: \"iridium_publish\",\n    batchPublish: \"iridium_batchPublish\",\n    subscribe: \"iridium_subscribe\",\n    batchSubscribe: \"iridium_batchSubscribe\",\n    subscription: \"iridium_subscription\",\n    unsubscribe: \"iridium_unsubscribe\",\n    batchUnsubscribe: \"iridium_batchUnsubscribe\"\n  }\n};\nfunction Tc(i, e) {\n  return i.includes(\":\") ? [i] : e.chains || [];\n}\nconst $c = \"base10\", vt = \"base16\", Br = \"base64pad\", pn = \"utf8\", Fc = 0, Di = 1, ep = 0, Po = 1, kr = 12, gn = 32;\nfunction tp() {\n  const i = ms.generateKeyPair();\n  return { privateKey: Ne(i.secretKey, vt), publicKey: Ne(i.publicKey, vt) };\n}\nfunction Hr() {\n  const i = li.randomBytes(gn);\n  return Ne(i, vt);\n}\nfunction ip(i, e) {\n  const t = ms.sharedKey(Ce(i, vt), Ce(e, vt), !0), s = new Rc(Si.SHA256, t).expand(gn);\n  return Ne(s, vt);\n}\nfunction sp(i) {\n  const e = Si.hash(Ce(i, vt));\n  return Ne(e, vt);\n}\nfunction Fi(i) {\n  const e = Si.hash(Ce(i, pn));\n  return Ne(e, vt);\n}\nfunction rp(i) {\n  return Ce(`${i}`, $c);\n}\nfunction ws(i) {\n  return Number(Ne(i, $c));\n}\nfunction np(i) {\n  const e = rp(typeof i.type < \"u\" ? i.type : Fc);\n  if (ws(e) === Di && typeof i.senderPublicKey > \"u\")\n    throw new Error(\"Missing sender public key for type 1 envelope\");\n  const t = typeof i.senderPublicKey < \"u\" ? Ce(i.senderPublicKey, vt) : void 0, s = typeof i.iv < \"u\" ? Ce(i.iv, vt) : li.randomBytes(kr), r = new gs.ChaCha20Poly1305(Ce(i.symKey, vt)).seal(s, Ce(i.message, pn));\n  return ap({ type: e, sealed: r, iv: s, senderPublicKey: t });\n}\nfunction op(i) {\n  const e = new gs.ChaCha20Poly1305(Ce(i.symKey, vt)), { sealed: t, iv: s } = Ys(i.encoded), r = e.open(s, t);\n  if (r === null)\n    throw new Error(\"Failed to decrypt\");\n  return Ne(r, pn);\n}\nfunction ap(i) {\n  if (ws(i.type) === Di) {\n    if (typeof i.senderPublicKey > \"u\")\n      throw new Error(\"Missing sender public key for type 1 envelope\");\n    return Ne(ls([i.type, i.senderPublicKey, i.iv, i.sealed]), Br);\n  }\n  return Ne(ls([i.type, i.iv, i.sealed]), Br);\n}\nfunction Ys(i) {\n  const e = Ce(i, Br), t = e.slice(ep, Po), s = Po;\n  if (ws(t) === Di) {\n    const c = s + gn, u = c + kr, d = e.slice(s, c), p = e.slice(c, u), b = e.slice(u);\n    return { type: t, sealed: b, iv: p, senderPublicKey: d };\n  }\n  const r = s + kr, n = e.slice(s, r), o = e.slice(r);\n  return { type: t, sealed: o, iv: n };\n}\nfunction cp(i, e) {\n  const t = Ys(i);\n  return Uc({ type: ws(t.type), senderPublicKey: typeof t.senderPublicKey < \"u\" ? Ne(t.senderPublicKey, vt) : void 0, receiverPublicKey: e?.receiverPublicKey });\n}\nfunction Uc(i) {\n  const e = i?.type || Fc;\n  if (e === Di) {\n    if (typeof i?.senderPublicKey > \"u\")\n      throw new Error(\"missing sender public key\");\n    if (typeof i?.receiverPublicKey > \"u\")\n      throw new Error(\"missing receiver public key\");\n  }\n  return { type: e, senderPublicKey: i?.senderPublicKey, receiverPublicKey: i?.receiverPublicKey };\n}\nfunction Ro(i) {\n  return i.type === Di && typeof i.senderPublicKey == \"string\" && typeof i.receiverPublicKey == \"string\";\n}\nvar hp = Object.defineProperty, Co = Object.getOwnPropertySymbols, up = Object.prototype.hasOwnProperty, lp = Object.prototype.propertyIsEnumerable, Ao = (i, e, t) => e in i ? hp(i, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : i[e] = t, To = (i, e) => {\n  for (var t in e || (e = {}))\n    up.call(e, t) && Ao(i, t, e[t]);\n  if (Co)\n    for (var t of Co(e))\n      lp.call(e, t) && Ao(i, t, e[t]);\n  return i;\n};\nconst dp = \"ReactNative\", Ot = { reactNative: \"react-native\", node: \"node\", browser: \"browser\", unknown: \"unknown\" }, fp = \"js\";\nfunction yn() {\n  return typeof process < \"u\" && typeof process.versions < \"u\" && typeof process.versions.node < \"u\";\n}\nfunction ur() {\n  return !un() && !!bs() && navigator.product === dp;\n}\nfunction vs() {\n  return !yn() && !!bs();\n}\nfunction _s() {\n  return ur() ? Ot.reactNative : yn() ? Ot.node : vs() ? Ot.browser : Ot.unknown;\n}\nfunction pp(i, e) {\n  let t = ii.parse(i);\n  return t = To(To({}, t), e), i = ii.stringify(t), i;\n}\nfunction gp() {\n  return fn() || { name: \"\", description: \"\", url: \"\", icons: [\"\"] };\n}\nfunction yp() {\n  if (_s() === Ot.reactNative && typeof global < \"u\" && typeof (global == null ? void 0 : global.Platform) < \"u\") {\n    const { OS: t, Version: s } = global.Platform;\n    return [t, s].join(\"-\");\n  }\n  const i = hn();\n  if (i === null)\n    return \"unknown\";\n  const e = i.os ? i.os.replace(\" \", \"\").toLowerCase() : \"unknown\";\n  return i.type === \"browser\" ? [e, i.name, i.version].join(\"-\") : [e, i.version].join(\"-\");\n}\nfunction mp() {\n  var i;\n  const e = _s();\n  return e === Ot.browser ? [e, ((i = ln()) == null ? void 0 : i.host) || \"unknown\"].join(\":\") : e;\n}\nfunction bp(i, e, t) {\n  const s = yp(), r = mp();\n  return [[i, e].join(\"-\"), [fp, t].join(\"-\"), s, r].join(\"/\");\n}\nfunction wp({ protocol: i, version: e, relayUrl: t, sdkVersion: s, auth: r, projectId: n, useOnCloseEvent: o }) {\n  const c = t.split(\"?\"), u = bp(i, e, s), d = { auth: r, ua: u, projectId: n, useOnCloseEvent: o || void 0 }, p = pp(c[1] || \"\", d);\n  return c[0] + \"?\" + p;\n}\nfunction _i(i, e) {\n  return i.filter((t) => e.includes(t)).length === i.length;\n}\nfunction Lc(i) {\n  return Object.fromEntries(i.entries());\n}\nfunction Mc(i) {\n  return new Map(Object.entries(i));\n}\nfunction Ai(i = V.FIVE_MINUTES, e) {\n  const t = V.toMiliseconds(i || V.FIVE_MINUTES);\n  let s, r, n;\n  return { resolve: (o) => {\n    n && s && (clearTimeout(n), s(o));\n  }, reject: (o) => {\n    n && r && (clearTimeout(n), r(o));\n  }, done: () => new Promise((o, c) => {\n    n = setTimeout(() => {\n      c(new Error(e));\n    }, t), s = o, r = c;\n  }) };\n}\nfunction ds(i, e, t) {\n  return new Promise(async (s, r) => {\n    const n = setTimeout(() => r(new Error(t)), e);\n    try {\n      const o = await i;\n      s(o);\n    } catch (o) {\n      r(o);\n    }\n    clearTimeout(n);\n  });\n}\nfunction qc(i, e) {\n  if (typeof e == \"string\" && e.startsWith(`${i}:`))\n    return e;\n  if (i.toLowerCase() === \"topic\") {\n    if (typeof e != \"string\")\n      throw new Error('Value must be \"string\" for expirer target type: topic');\n    return `topic:${e}`;\n  } else if (i.toLowerCase() === \"id\") {\n    if (typeof e != \"number\")\n      throw new Error('Value must be \"number\" for expirer target type: id');\n    return `id:${e}`;\n  }\n  throw new Error(`Unknown expirer target type: ${i}`);\n}\nfunction vp(i) {\n  return qc(\"topic\", i);\n}\nfunction _p(i) {\n  return qc(\"id\", i);\n}\nfunction jc(i) {\n  const [e, t] = i.split(\":\"), s = { id: void 0, topic: void 0 };\n  if (e === \"topic\" && typeof t == \"string\")\n    s.topic = t;\n  else if (e === \"id\" && Number.isInteger(Number(t)))\n    s.id = Number(t);\n  else\n    throw new Error(`Invalid target, expected id:number or topic:string, got ${e}:${t}`);\n  return s;\n}\nfunction Mt(i, e) {\n  return V.fromMiliseconds((e || Date.now()) + V.toMiliseconds(i));\n}\nfunction ai(i) {\n  return Date.now() >= V.toMiliseconds(i);\n}\nfunction Be(i, e) {\n  return `${i}${e ? `:${e}` : \"\"}`;\n}\nasync function Ep({ id: i, topic: e, wcDeepLink: t }) {\n  try {\n    if (!t)\n      return;\n    let r = (typeof t == \"string\" ? JSON.parse(t) : t)?.href;\n    if (typeof r != \"string\")\n      return;\n    r.endsWith(\"/\") && (r = r.slice(0, -1));\n    const n = `${r}/wc?requestId=${i}&sessionTopic=${e}`, o = _s();\n    o === Ot.browser ? n.startsWith(\"https://\") ? window.open(n, \"_blank\", \"noreferrer noopener\") : window.open(n, \"_self\", \"noreferrer noopener\") : o === Ot.reactNative && typeof (global == null ? void 0 : global.Linking) < \"u\" && await global.Linking.openURL(n);\n  } catch (s) {\n    console.error(s);\n  }\n}\nconst Sp = \"irn\";\nfunction Gr(i) {\n  return i?.relay || { protocol: Sp };\n}\nfunction js(i) {\n  const e = Ac[i];\n  if (typeof e > \"u\")\n    throw new Error(`Relay Protocol not supported: ${i}`);\n  return e;\n}\nvar Ip = Object.defineProperty, $o = Object.getOwnPropertySymbols, Dp = Object.prototype.hasOwnProperty, xp = Object.prototype.propertyIsEnumerable, Fo = (i, e, t) => e in i ? Ip(i, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : i[e] = t, Op = (i, e) => {\n  for (var t in e || (e = {}))\n    Dp.call(e, t) && Fo(i, t, e[t]);\n  if ($o)\n    for (var t of $o(e))\n      xp.call(e, t) && Fo(i, t, e[t]);\n  return i;\n};\nfunction Np(i, e = \"-\") {\n  const t = {}, s = \"relay\" + e;\n  return Object.keys(i).forEach((r) => {\n    if (r.startsWith(s)) {\n      const n = r.replace(s, \"\"), o = i[r];\n      t[n] = o;\n    }\n  }), t;\n}\nfunction Pp(i) {\n  const e = i.indexOf(\":\"), t = i.indexOf(\"?\") !== -1 ? i.indexOf(\"?\") : void 0, s = i.substring(0, e), r = i.substring(e + 1, t).split(\"@\"), n = typeof t < \"u\" ? i.substring(t) : \"\", o = ii.parse(n);\n  return { protocol: s, topic: Rp(r[0]), version: parseInt(r[1], 10), symKey: o.symKey, relay: Np(o) };\n}\nfunction Rp(i) {\n  return i.startsWith(\"//\") ? i.substring(2) : i;\n}\nfunction Cp(i, e = \"-\") {\n  const t = \"relay\", s = {};\n  return Object.keys(i).forEach((r) => {\n    const n = t + e + r;\n    i[r] && (s[n] = i[r]);\n  }), s;\n}\nfunction Ap(i) {\n  return `${i.protocol}:${i.topic}@${i.version}?` + ii.stringify(Op({ symKey: i.symKey }, Cp(i.relay)));\n}\nfunction Mi(i) {\n  const e = [];\n  return i.forEach((t) => {\n    const [s, r] = t.split(\":\");\n    e.push(`${s}:${r}`);\n  }), e;\n}\nfunction Tp(i) {\n  const e = [];\n  return Object.values(i).forEach((t) => {\n    e.push(...Mi(t.accounts));\n  }), e;\n}\nfunction $p(i, e) {\n  const t = [];\n  return Object.values(i).forEach((s) => {\n    Mi(s.accounts).includes(e) && t.push(...s.methods);\n  }), t;\n}\nfunction Fp(i, e) {\n  const t = [];\n  return Object.values(i).forEach((s) => {\n    Mi(s.accounts).includes(e) && t.push(...s.events);\n  }), t;\n}\nfunction Up(i, e) {\n  const t = zs(i, e);\n  if (t)\n    throw new Error(t.message);\n  const s = {};\n  for (const [r, n] of Object.entries(i))\n    s[r] = { methods: n.methods, events: n.events, chains: n.accounts.map((o) => `${o.split(\":\")[0]}:${o.split(\":\")[1]}`) };\n  return s;\n}\nconst Lp = { INVALID_METHOD: { message: \"Invalid method.\", code: 1001 }, INVALID_EVENT: { message: \"Invalid event.\", code: 1002 }, INVALID_UPDATE_REQUEST: { message: \"Invalid update request.\", code: 1003 }, INVALID_EXTEND_REQUEST: { message: \"Invalid extend request.\", code: 1004 }, INVALID_SESSION_SETTLE_REQUEST: { message: \"Invalid session settle request.\", code: 1005 }, UNAUTHORIZED_METHOD: { message: \"Unauthorized method.\", code: 3001 }, UNAUTHORIZED_EVENT: { message: \"Unauthorized event.\", code: 3002 }, UNAUTHORIZED_UPDATE_REQUEST: { message: \"Unauthorized update request.\", code: 3003 }, UNAUTHORIZED_EXTEND_REQUEST: { message: \"Unauthorized extend request.\", code: 3004 }, USER_REJECTED: { message: \"User rejected.\", code: 5e3 }, USER_REJECTED_CHAINS: { message: \"User rejected chains.\", code: 5001 }, USER_REJECTED_METHODS: { message: \"User rejected methods.\", code: 5002 }, USER_REJECTED_EVENTS: { message: \"User rejected events.\", code: 5003 }, UNSUPPORTED_CHAINS: { message: \"Unsupported chains.\", code: 5100 }, UNSUPPORTED_METHODS: { message: \"Unsupported methods.\", code: 5101 }, UNSUPPORTED_EVENTS: { message: \"Unsupported events.\", code: 5102 }, UNSUPPORTED_ACCOUNTS: { message: \"Unsupported accounts.\", code: 5103 }, UNSUPPORTED_NAMESPACE_KEY: { message: \"Unsupported namespace key.\", code: 5104 }, USER_DISCONNECTED: { message: \"User disconnected.\", code: 6e3 }, SESSION_SETTLEMENT_FAILED: { message: \"Session settlement failed.\", code: 7e3 }, WC_METHOD_UNSUPPORTED: { message: \"Unsupported wc_ method.\", code: 10001 } }, Mp = { NOT_INITIALIZED: { message: \"Not initialized.\", code: 1 }, NO_MATCHING_KEY: { message: \"No matching key.\", code: 2 }, RESTORE_WILL_OVERRIDE: { message: \"Restore will override.\", code: 3 }, RESUBSCRIBED: { message: \"Resubscribed.\", code: 4 }, MISSING_OR_INVALID: { message: \"Missing or invalid.\", code: 5 }, EXPIRED: { message: \"Expired.\", code: 6 }, UNKNOWN_TYPE: { message: \"Unknown type.\", code: 7 }, MISMATCHED_TOPIC: { message: \"Mismatched topic.\", code: 8 }, NON_CONFORMING_NAMESPACES: { message: \"Non conforming namespaces.\", code: 9 } };\nfunction Y(i, e) {\n  const { message: t, code: s } = Mp[i];\n  return { message: e ? `${t} ${e}` : t, code: s };\n}\nfunction nt(i, e) {\n  const { message: t, code: s } = Lp[i];\n  return { message: e ? `${t} ${e}` : t, code: s };\n}\nfunction Es(i, e) {\n  return Array.isArray(i) ? typeof e < \"u\" && i.length ? i.every(e) : !0 : !1;\n}\nfunction cs(i) {\n  return Object.getPrototypeOf(i) === Object.prototype && Object.keys(i).length;\n}\nfunction bt(i) {\n  return typeof i > \"u\";\n}\nfunction ot(i, e) {\n  return e && bt(i) ? !0 : typeof i == \"string\" && !!i.trim().length;\n}\nfunction mn(i, e) {\n  return e && bt(i) ? !0 : typeof i == \"number\" && !isNaN(i);\n}\nfunction qp(i, e) {\n  const { requiredNamespaces: t } = e, s = Object.keys(i.namespaces), r = Object.keys(t);\n  let n = !0;\n  return _i(r, s) ? (s.forEach((o) => {\n    const { accounts: c, methods: u, events: d } = i.namespaces[o], p = Mi(c), b = t[o];\n    (!_i(Tc(o, b), p) || !_i(b.methods, u) || !_i(b.events, d)) && (n = !1);\n  }), n) : !1;\n}\nfunction Js(i) {\n  return ot(i, !1) && i.includes(\":\") ? i.split(\":\").length === 2 : !1;\n}\nfunction jp(i) {\n  if (ot(i, !1) && i.includes(\":\")) {\n    const e = i.split(\":\");\n    if (e.length === 3) {\n      const t = e[0] + \":\" + e[1];\n      return !!e[2] && Js(t);\n    }\n  }\n  return !1;\n}\nfunction zp(i) {\n  if (ot(i, !1))\n    try {\n      return typeof new URL(i) < \"u\";\n    } catch {\n      return !1;\n    }\n  return !1;\n}\nfunction Kp(i) {\n  var e;\n  return (e = i?.proposer) == null ? void 0 : e.publicKey;\n}\nfunction Vp(i) {\n  return i?.topic;\n}\nfunction Bp(i, e) {\n  let t = null;\n  return ot(i?.publicKey, !1) || (t = Y(\"MISSING_OR_INVALID\", `${e} controller public key should be a string`)), t;\n}\nfunction Uo(i) {\n  let e = !0;\n  return Es(i) ? i.length && (e = i.every((t) => ot(t, !1))) : e = !1, e;\n}\nfunction kp(i, e, t) {\n  let s = null;\n  return Es(e) && e.length ? e.forEach((r) => {\n    s || Js(r) || (s = nt(\"UNSUPPORTED_CHAINS\", `${t}, chain ${r} should be a string and conform to \"namespace:chainId\" format`));\n  }) : Js(i) || (s = nt(\"UNSUPPORTED_CHAINS\", `${t}, chains must be defined as \"namespace:chainId\" e.g. \"eip155:1\": {...} in the namespace key OR as an array of CAIP-2 chainIds e.g. eip155: { chains: [\"eip155:1\", \"eip155:5\"] }`)), s;\n}\nfunction Hp(i, e, t) {\n  let s = null;\n  return Object.entries(i).forEach(([r, n]) => {\n    if (s)\n      return;\n    const o = kp(r, Tc(r, n), `${e} ${t}`);\n    o && (s = o);\n  }), s;\n}\nfunction Gp(i, e) {\n  let t = null;\n  return Es(i) ? i.forEach((s) => {\n    t || jp(s) || (t = nt(\"UNSUPPORTED_ACCOUNTS\", `${e}, account ${s} should be a string and conform to \"namespace:chainId:address\" format`));\n  }) : t = nt(\"UNSUPPORTED_ACCOUNTS\", `${e}, accounts should be an array of strings conforming to \"namespace:chainId:address\" format`), t;\n}\nfunction Wp(i, e) {\n  let t = null;\n  return Object.values(i).forEach((s) => {\n    if (t)\n      return;\n    const r = Gp(s?.accounts, `${e} namespace`);\n    r && (t = r);\n  }), t;\n}\nfunction Yp(i, e) {\n  let t = null;\n  return Uo(i?.methods) ? Uo(i?.events) || (t = nt(\"UNSUPPORTED_EVENTS\", `${e}, events should be an array of strings or empty array for no events`)) : t = nt(\"UNSUPPORTED_METHODS\", `${e}, methods should be an array of strings or empty array for no methods`), t;\n}\nfunction zc(i, e) {\n  let t = null;\n  return Object.values(i).forEach((s) => {\n    if (t)\n      return;\n    const r = Yp(s, `${e}, namespace`);\n    r && (t = r);\n  }), t;\n}\nfunction Jp(i, e, t) {\n  let s = null;\n  if (i && cs(i)) {\n    const r = zc(i, e);\n    r && (s = r);\n    const n = Hp(i, e, t);\n    n && (s = n);\n  } else\n    s = Y(\"MISSING_OR_INVALID\", `${e}, ${t} should be an object with data`);\n  return s;\n}\nfunction zs(i, e) {\n  let t = null;\n  if (i && cs(i)) {\n    const s = zc(i, e);\n    s && (t = s);\n    const r = Wp(i, e);\n    r && (t = r);\n  } else\n    t = Y(\"MISSING_OR_INVALID\", `${e}, namespaces should be an object with data`);\n  return t;\n}\nfunction Kc(i) {\n  return ot(i.protocol, !0);\n}\nfunction Qp(i, e) {\n  let t = !1;\n  return e && !i ? t = !0 : i && Es(i) && i.length && i.forEach((s) => {\n    t = Kc(s);\n  }), t;\n}\nfunction Xp(i) {\n  return typeof i == \"number\";\n}\nfunction St(i) {\n  return typeof i < \"u\" && typeof i !== null;\n}\nfunction Zp(i) {\n  return !(!i || typeof i != \"object\" || !i.code || !mn(i.code, !1) || !i.message || !ot(i.message, !1));\n}\nfunction eg(i) {\n  return !(bt(i) || !ot(i.method, !1));\n}\nfunction tg(i) {\n  return !(bt(i) || bt(i.result) && bt(i.error) || !mn(i.id, !1) || !ot(i.jsonrpc, !1));\n}\nfunction ig(i) {\n  return !(bt(i) || !ot(i.name, !1));\n}\nfunction Lo(i, e) {\n  return !(!Js(e) || !Tp(i).includes(e));\n}\nfunction sg(i, e, t) {\n  return ot(t, !1) ? $p(i, e).includes(t) : !1;\n}\nfunction rg(i, e, t) {\n  return ot(t, !1) ? Fp(i, e).includes(t) : !1;\n}\nfunction Mo(i, e, t) {\n  let s = null;\n  const r = ng(i), n = og(e), o = Object.keys(r), c = Object.keys(n), u = qo(Object.keys(i)), d = qo(Object.keys(e)), p = u.filter((b) => !d.includes(b));\n  return p.length && (s = Y(\"NON_CONFORMING_NAMESPACES\", `${t} namespaces keys don't satisfy requiredNamespaces.\n      Required: ${p.toString()}\n      Received: ${Object.keys(e).toString()}`)), _i(o, c) || (s = Y(\"NON_CONFORMING_NAMESPACES\", `${t} namespaces chains don't satisfy required namespaces.\n      Required: ${o.toString()}\n      Approved: ${c.toString()}`)), Object.keys(e).forEach((b) => {\n    if (!b.includes(\":\") || s)\n      return;\n    const x = Mi(e[b].accounts);\n    x.includes(b) || (s = Y(\"NON_CONFORMING_NAMESPACES\", `${t} namespaces accounts don't satisfy namespace accounts for ${b}\n        Required: ${b}\n        Approved: ${x.toString()}`));\n  }), o.forEach((b) => {\n    s || (_i(r[b].methods, n[b].methods) ? _i(r[b].events, n[b].events) || (s = Y(\"NON_CONFORMING_NAMESPACES\", `${t} namespaces events don't satisfy namespace events for ${b}`)) : s = Y(\"NON_CONFORMING_NAMESPACES\", `${t} namespaces methods don't satisfy namespace methods for ${b}`));\n  }), s;\n}\nfunction ng(i) {\n  const e = {};\n  return Object.keys(i).forEach((t) => {\n    var s;\n    t.includes(\":\") ? e[t] = i[t] : (s = i[t].chains) == null || s.forEach((r) => {\n      e[r] = { methods: i[t].methods, events: i[t].events };\n    });\n  }), e;\n}\nfunction qo(i) {\n  return [...new Set(i.map((e) => e.includes(\":\") ? e.split(\":\")[0] : e))];\n}\nfunction og(i) {\n  const e = {};\n  return Object.keys(i).forEach((t) => {\n    t.includes(\":\") ? e[t] = i[t] : Mi(i[t].accounts)?.forEach((r) => {\n      e[r] = { accounts: i[t].accounts.filter((n) => n.includes(`${r}:`)), methods: i[t].methods, events: i[t].events };\n    });\n  }), e;\n}\nfunction ag(i, e) {\n  return mn(i, !1) && i <= e.max && i >= e.min;\n}\nfunction jo() {\n  const i = _s();\n  return new Promise((e) => {\n    switch (i) {\n      case Ot.browser:\n        e(cg());\n        break;\n      case Ot.reactNative:\n        e(hg());\n        break;\n      case Ot.node:\n        e(ug());\n        break;\n      default:\n        e(!0);\n    }\n  });\n}\nfunction cg() {\n  return vs() && navigator?.onLine;\n}\nasync function hg() {\n  return ur() && typeof global < \"u\" && global != null && global.NetInfo ? (await (global == null ? void 0 : global.NetInfo.fetch()))?.isConnected : !0;\n}\nfunction ug() {\n  return !0;\n}\nfunction lg(i) {\n  switch (_s()) {\n    case Ot.browser:\n      dg(i);\n      break;\n    case Ot.reactNative:\n      fg(i);\n      break;\n  }\n}\nfunction dg(i) {\n  vs() && (window.addEventListener(\"online\", () => i(!0)), window.addEventListener(\"offline\", () => i(!1)));\n}\nfunction fg(i) {\n  ur() && typeof global < \"u\" && global != null && global.NetInfo && global?.NetInfo.addEventListener((e) => i(e?.isConnected));\n}\nconst xr = {};\nlet $s = class {\n  static get(e) {\n    return xr[e];\n  }\n  static set(e, t) {\n    xr[e] = t;\n  }\n  static delete(e) {\n    delete xr[e];\n  }\n};\nconst pg = \"PARSE_ERROR\", gg = \"INVALID_REQUEST\", yg = \"METHOD_NOT_FOUND\", mg = \"INVALID_PARAMS\", Vc = \"INTERNAL_ERROR\", bn = \"SERVER_ERROR\", bg = [-32700, -32600, -32601, -32602, -32603], hs = {\n  [pg]: { code: -32700, message: \"Parse error\" },\n  [gg]: { code: -32600, message: \"Invalid Request\" },\n  [yg]: { code: -32601, message: \"Method not found\" },\n  [mg]: { code: -32602, message: \"Invalid params\" },\n  [Vc]: { code: -32603, message: \"Internal error\" },\n  [bn]: { code: -32e3, message: \"Server error\" }\n}, Bc = bn;\nfunction wg(i) {\n  return bg.includes(i);\n}\nfunction zo(i) {\n  return Object.keys(hs).includes(i) ? hs[i] : hs[Bc];\n}\nfunction vg(i) {\n  const e = Object.values(hs).find((t) => t.code === i);\n  return e || hs[Bc];\n}\nfunction _g(i, e, t) {\n  return i.message.includes(\"getaddrinfo ENOTFOUND\") || i.message.includes(\"connect ECONNREFUSED\") ? new Error(`Unavailable ${t} RPC url at ${e}`) : i;\n}\nvar kc = {}, Qt = {}, Ko;\nfunction Eg() {\n  if (Ko)\n    return Qt;\n  Ko = 1, Object.defineProperty(Qt, \"__esModule\", { value: !0 }), Qt.isBrowserCryptoAvailable = Qt.getSubtleCrypto = Qt.getBrowerCrypto = void 0;\n  function i() {\n    return (_lastConnected_b964dc30_js__WEBPACK_IMPORTED_MODULE_0__.c === null || _lastConnected_b964dc30_js__WEBPACK_IMPORTED_MODULE_0__.c === void 0 ? void 0 : _lastConnected_b964dc30_js__WEBPACK_IMPORTED_MODULE_0__.c.crypto) || (_lastConnected_b964dc30_js__WEBPACK_IMPORTED_MODULE_0__.c === null || _lastConnected_b964dc30_js__WEBPACK_IMPORTED_MODULE_0__.c === void 0 ? void 0 : _lastConnected_b964dc30_js__WEBPACK_IMPORTED_MODULE_0__.c.msCrypto) || {};\n  }\n  Qt.getBrowerCrypto = i;\n  function e() {\n    const s = i();\n    return s.subtle || s.webkitSubtle;\n  }\n  Qt.getSubtleCrypto = e;\n  function t() {\n    return !!i() && !!e();\n  }\n  return Qt.isBrowserCryptoAvailable = t, Qt;\n}\nvar Xt = {}, Vo;\nfunction Sg() {\n  if (Vo)\n    return Xt;\n  Vo = 1, Object.defineProperty(Xt, \"__esModule\", { value: !0 }), Xt.isBrowser = Xt.isNode = Xt.isReactNative = void 0;\n  function i() {\n    return typeof document > \"u\" && typeof navigator < \"u\" && navigator.product === \"ReactNative\";\n  }\n  Xt.isReactNative = i;\n  function e() {\n    return typeof process < \"u\" && typeof process.versions < \"u\" && typeof process.versions.node < \"u\";\n  }\n  Xt.isNode = e;\n  function t() {\n    return !i() && !e();\n  }\n  return Xt.isBrowser = t, Xt;\n}\n(function(i) {\n  Object.defineProperty(i, \"__esModule\", { value: !0 });\n  const e = Ft;\n  e.__exportStar(Eg(), i), e.__exportStar(Sg(), i);\n})(kc);\nfunction wn(i = 3) {\n  const e = Date.now() * Math.pow(10, i), t = Math.floor(Math.random() * Math.pow(10, i));\n  return e + t;\n}\nfunction vn(i = 6) {\n  return BigInt(wn(i));\n}\nfunction ti(i, e, t) {\n  return {\n    id: t || wn(),\n    jsonrpc: \"2.0\",\n    method: i,\n    params: e\n  };\n}\nfunction xi(i, e) {\n  return {\n    id: i,\n    jsonrpc: \"2.0\",\n    result: e\n  };\n}\nfunction qi(i, e, t) {\n  return {\n    id: i,\n    jsonrpc: \"2.0\",\n    error: Ig(e, t)\n  };\n}\nfunction Ig(i, e) {\n  return typeof i > \"u\" ? zo(Vc) : (typeof i == \"string\" && (i = Object.assign(Object.assign({}, zo(bn)), { message: i })), typeof e < \"u\" && (i.data = e), wg(i.code) && (i = vg(i.code)), i);\n}\nclass Hc {\n}\nclass Dg extends Hc {\n  constructor(e) {\n    super();\n  }\n}\nclass xg extends Hc {\n  constructor() {\n    super();\n  }\n}\nclass Og extends xg {\n  constructor(e) {\n    super();\n  }\n}\nconst Ng = \"^wss?:\";\nfunction Pg(i) {\n  const e = i.match(new RegExp(/^\\w+:/, \"gi\"));\n  if (!(!e || !e.length))\n    return e[0];\n}\nfunction Rg(i, e) {\n  const t = Pg(i);\n  return typeof t > \"u\" ? !1 : new RegExp(e).test(t);\n}\nfunction Bo(i) {\n  return Rg(i, Ng);\n}\nfunction Cg(i) {\n  return new RegExp(\"wss?://localhost(:d{2,5})?\").test(i);\n}\nfunction Gc(i) {\n  return typeof i == \"object\" && \"id\" in i && \"jsonrpc\" in i && i.jsonrpc === \"2.0\";\n}\nfunction ji(i) {\n  return Gc(i) && \"method\" in i;\n}\nfunction Oi(i) {\n  return Gc(i) && (ht(i) || Ge(i));\n}\nfunction ht(i) {\n  return \"result\" in i;\n}\nfunction Ge(i) {\n  return \"error\" in i;\n}\nclass _n extends Og {\n  constructor(e) {\n    super(e), this.events = new We.EventEmitter(), this.hasRegisteredEventListeners = !1, this.connection = this.setConnection(e), this.connection.connected && this.registerEventListeners();\n  }\n  async connect(e = this.connection) {\n    await this.open(e);\n  }\n  async disconnect() {\n    await this.close();\n  }\n  on(e, t) {\n    this.events.on(e, t);\n  }\n  once(e, t) {\n    this.events.once(e, t);\n  }\n  off(e, t) {\n    this.events.off(e, t);\n  }\n  removeListener(e, t) {\n    this.events.removeListener(e, t);\n  }\n  async request(e, t) {\n    return this.requestStrict(ti(e.method, e.params || [], e.id || vn().toString()), t);\n  }\n  async requestStrict(e, t) {\n    return new Promise(async (s, r) => {\n      if (!this.connection.connected)\n        try {\n          await this.open();\n        } catch (n) {\n          r(n);\n        }\n      this.events.on(`${e.id}`, (n) => {\n        Ge(n) ? r(n.error) : s(n.result);\n      });\n      try {\n        await this.connection.send(e, t);\n      } catch (n) {\n        r(n);\n      }\n    });\n  }\n  setConnection(e = this.connection) {\n    return e;\n  }\n  onPayload(e) {\n    this.events.emit(\"payload\", e), Oi(e) ? this.events.emit(`${e.id}`, e) : this.events.emit(\"message\", {\n      type: e.method,\n      data: e.params\n    });\n  }\n  onClose(e) {\n    e && e.code === 3e3 && this.events.emit(\"error\", new Error(`WebSocket connection closed abnormally with code: ${e.code} ${e.reason ? `(${e.reason})` : \"\"}`)), this.events.emit(\"disconnect\");\n  }\n  async open(e = this.connection) {\n    this.connection === e && this.connection.connected || (this.connection.connected && this.close(), typeof e == \"string\" && (await this.connection.open(e), e = this.connection), this.connection = this.setConnection(e), await this.connection.open(), this.registerEventListeners(), this.events.emit(\"connect\"));\n  }\n  async close() {\n    await this.connection.close();\n  }\n  registerEventListeners() {\n    this.hasRegisteredEventListeners || (this.connection.on(\"payload\", (e) => this.onPayload(e)), this.connection.on(\"close\", (e) => this.onClose(e)), this.connection.on(\"error\", (e) => this.events.emit(\"error\", e)), this.connection.on(\"register_error\", (e) => this.onClose()), this.hasRegisteredEventListeners = !0);\n  }\n}\nconst Ag = () => typeof WebSocket < \"u\" ? WebSocket : typeof global < \"u\" && typeof global.WebSocket < \"u\" ? global.WebSocket : typeof window < \"u\" && typeof window.WebSocket < \"u\" ? window.WebSocket : typeof self < \"u\" && typeof self.WebSocket < \"u\" ? self.WebSocket : require(\"ws\"), Tg = () => typeof WebSocket < \"u\" || typeof global < \"u\" && typeof global.WebSocket < \"u\" || typeof window < \"u\" && typeof window.WebSocket < \"u\" || typeof self < \"u\" && typeof self.WebSocket < \"u\", ko = (i) => i.split(\"?\")[0], Ho = 10, $g = Ag();\nclass Wc {\n  constructor(e) {\n    if (this.url = e, this.events = new We.EventEmitter(), this.registering = !1, !Bo(e))\n      throw new Error(`Provided URL is not compatible with WebSocket connection: ${e}`);\n    this.url = e;\n  }\n  get connected() {\n    return typeof this.socket < \"u\";\n  }\n  get connecting() {\n    return this.registering;\n  }\n  on(e, t) {\n    this.events.on(e, t);\n  }\n  once(e, t) {\n    this.events.once(e, t);\n  }\n  off(e, t) {\n    this.events.off(e, t);\n  }\n  removeListener(e, t) {\n    this.events.removeListener(e, t);\n  }\n  async open(e = this.url) {\n    await this.register(e);\n  }\n  async close() {\n    return new Promise((e, t) => {\n      if (typeof this.socket > \"u\") {\n        t(new Error(\"Connection already closed\"));\n        return;\n      }\n      this.socket.onclose = (s) => {\n        this.onClose(s), e();\n      }, this.socket.close();\n    });\n  }\n  async send(e, t) {\n    typeof this.socket > \"u\" && (this.socket = await this.register());\n    try {\n      this.socket.send(rr(e));\n    } catch (s) {\n      this.onError(e.id, s);\n    }\n  }\n  register(e = this.url) {\n    if (!Bo(e))\n      throw new Error(`Provided URL is not compatible with WebSocket connection: ${e}`);\n    if (this.registering) {\n      const t = this.events.getMaxListeners();\n      return (this.events.listenerCount(\"register_error\") >= t || this.events.listenerCount(\"open\") >= t) && this.events.setMaxListeners(t + 1), new Promise((s, r) => {\n        this.events.once(\"register_error\", (n) => {\n          this.resetMaxListeners(), r(n);\n        }), this.events.once(\"open\", () => {\n          if (this.resetMaxListeners(), typeof this.socket > \"u\")\n            return r(new Error(\"WebSocket connection is missing or invalid\"));\n          s(this.socket);\n        });\n      });\n    }\n    return this.url = e, this.registering = !0, new Promise((t, s) => {\n      const r = kc.isReactNative() ? void 0 : { rejectUnauthorized: !Cg(e) }, n = new $g(e, [], r);\n      Tg() ? n.onerror = (o) => {\n        const c = o;\n        s(this.emitError(c.error));\n      } : n.on(\"error\", (o) => {\n        s(this.emitError(o));\n      }), n.onopen = () => {\n        this.onOpen(n), t(n);\n      };\n    });\n  }\n  onOpen(e) {\n    e.onmessage = (t) => this.onPayload(t), e.onclose = (t) => this.onClose(t), this.socket = e, this.registering = !1, this.events.emit(\"open\");\n  }\n  onClose(e) {\n    this.socket = void 0, this.registering = !1, this.events.emit(\"close\", e);\n  }\n  onPayload(e) {\n    if (typeof e.data > \"u\")\n      return;\n    const t = typeof e.data == \"string\" ? rn(e.data) : e.data;\n    this.events.emit(\"payload\", t);\n  }\n  onError(e, t) {\n    const s = this.parseError(t), r = s.message || s.toString(), n = qi(e, r);\n    this.events.emit(\"payload\", n);\n  }\n  parseError(e, t = this.url) {\n    return _g(e, ko(t), \"WS\");\n  }\n  resetMaxListeners() {\n    this.events.getMaxListeners() > Ho && this.events.setMaxListeners(Ho);\n  }\n  emitError(e) {\n    const t = this.parseError(new Error(e?.message || `WebSocket connection failed for host: ${ko(this.url)}`));\n    return this.events.emit(\"register_error\", t), t;\n  }\n}\nvar Qs = { exports: {} };\nQs.exports;\n(function(i, e) {\n  var t = 200, s = \"__lodash_hash_undefined__\", r = 1, n = 2, o = 9007199254740991, c = \"[object Arguments]\", u = \"[object Array]\", d = \"[object AsyncFunction]\", p = \"[object Boolean]\", b = \"[object Date]\", x = \"[object Error]\", O = \"[object Function]\", _ = \"[object GeneratorFunction]\", C = \"[object Map]\", F = \"[object Number]\", K = \"[object Null]\", I = \"[object Object]\", D = \"[object Promise]\", y = \"[object Proxy]\", w = \"[object RegExp]\", f = \"[object Set]\", a = \"[object String]\", l = \"[object Symbol]\", L = \"[object Undefined]\", v = \"[object WeakMap]\", R = \"[object ArrayBuffer]\", $ = \"[object DataView]\", q = \"[object Float32Array]\", m = \"[object Float64Array]\", E = \"[object Int8Array]\", B = \"[object Int16Array]\", z = \"[object Int32Array]\", j = \"[object Uint8Array]\", U = \"[object Uint8ClampedArray]\", M = \"[object Uint16Array]\", H = \"[object Uint32Array]\", te = /[\\\\^$.*+?()[\\]{}|]/g, G = /^\\[object .+?Constructor\\]$/, ie = /^(?:0|[1-9]\\d*)$/, Q = {};\n  Q[q] = Q[m] = Q[E] = Q[B] = Q[z] = Q[j] = Q[U] = Q[M] = Q[H] = !0, Q[c] = Q[u] = Q[R] = Q[p] = Q[$] = Q[b] = Q[x] = Q[O] = Q[C] = Q[F] = Q[I] = Q[w] = Q[f] = Q[a] = Q[v] = !1;\n  var se = typeof _lastConnected_b964dc30_js__WEBPACK_IMPORTED_MODULE_0__.c == \"object\" && _lastConnected_b964dc30_js__WEBPACK_IMPORTED_MODULE_0__.c && _lastConnected_b964dc30_js__WEBPACK_IMPORTED_MODULE_0__.c.Object === Object && _lastConnected_b964dc30_js__WEBPACK_IMPORTED_MODULE_0__.c, T = typeof self == \"object\" && self && self.Object === Object && self, A = se || T || Function(\"return this\")(), N = e && !e.nodeType && e, h = N && !0 && i && !i.nodeType && i, S = h && h.exports === N, W = S && se.process, X = function() {\n    try {\n      return W && W.binding && W.binding(\"util\");\n    } catch {\n    }\n  }(), fe = X && X.isTypedArray;\n  function ve(g, P) {\n    for (var k = -1, Z = g == null ? 0 : g.length, Re = 0, ae = []; ++k < Z; ) {\n      var Le = g[k];\n      P(Le, k, g) && (ae[Re++] = Le);\n    }\n    return ae;\n  }\n  function ge(g, P) {\n    for (var k = -1, Z = P.length, Re = g.length; ++k < Z; )\n      g[Re + k] = P[k];\n    return g;\n  }\n  function Se(g, P) {\n    for (var k = -1, Z = g == null ? 0 : g.length; ++k < Z; )\n      if (P(g[k], k, g))\n        return !0;\n    return !1;\n  }\n  function Me(g, P) {\n    for (var k = -1, Z = Array(g); ++k < g; )\n      Z[k] = P(k);\n    return Z;\n  }\n  function $e(g) {\n    return function(P) {\n      return g(P);\n    };\n  }\n  function be(g, P) {\n    return g.has(P);\n  }\n  function ye(g, P) {\n    return g?.[P];\n  }\n  function pe(g) {\n    var P = -1, k = Array(g.size);\n    return g.forEach(function(Z, Re) {\n      k[++P] = [Re, Z];\n    }), k;\n  }\n  function le(g, P) {\n    return function(k) {\n      return g(P(k));\n    };\n  }\n  function ue(g) {\n    var P = -1, k = Array(g.size);\n    return g.forEach(function(Z) {\n      k[++P] = Z;\n    }), k;\n  }\n  var he = Array.prototype, ce = Function.prototype, re = Object.prototype, de = A[\"__core-js_shared__\"], me = ce.toString, ne = re.hasOwnProperty, _e = function() {\n    var g = /[^.]+$/.exec(de && de.keys && de.keys.IE_PROTO || \"\");\n    return g ? \"Symbol(src)_1.\" + g : \"\";\n  }(), Ee = re.toString, De = RegExp(\n    \"^\" + me.call(ne).replace(te, \"\\\\$&\").replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, \"$1.*?\") + \"$\"\n  ), xe = S ? A.Buffer : void 0, Ie = A.Symbol, Ut = A.Uint8Array, qt = re.propertyIsEnumerable, si = he.splice, Dt = Ie ? Ie.toStringTag : void 0, fi = Object.getOwnPropertySymbols, Ki = xe ? xe.isBuffer : void 0, Os = le(Object.keys, Object), qe = Pi(A, \"DataView\"), Fe = Pi(A, \"Map\"), je = Pi(A, \"Promise\"), ze = Pi(A, \"Set\"), Ke = Pi(A, \"WeakMap\"), Ue = Pi(Object, \"create\"), Qe = gi(qe), Xe = gi(Fe), Ze = gi(je), et = gi(ze), tt = gi(Ke), Ye = Ie ? Ie.prototype : void 0, Ve = Ye ? Ye.valueOf : void 0;\n  function Ae(g) {\n    var P = -1, k = g == null ? 0 : g.length;\n    for (this.clear(); ++P < k; ) {\n      var Z = g[P];\n      this.set(Z[0], Z[1]);\n    }\n  }\n  function it() {\n    this.__data__ = Ue ? Ue(null) : {}, this.size = 0;\n  }\n  function st(g) {\n    var P = this.has(g) && delete this.__data__[g];\n    return this.size -= P ? 1 : 0, P;\n  }\n  function kh(g) {\n    var P = this.__data__;\n    if (Ue) {\n      var k = P[g];\n      return k === s ? void 0 : k;\n    }\n    return ne.call(P, g) ? P[g] : void 0;\n  }\n  function Hh(g) {\n    var P = this.__data__;\n    return Ue ? P[g] !== void 0 : ne.call(P, g);\n  }\n  function Gh(g, P) {\n    var k = this.__data__;\n    return this.size += this.has(g) ? 0 : 1, k[g] = Ue && P === void 0 ? s : P, this;\n  }\n  Ae.prototype.clear = it, Ae.prototype.delete = st, Ae.prototype.get = kh, Ae.prototype.has = Hh, Ae.prototype.set = Gh;\n  function Yt(g) {\n    var P = -1, k = g == null ? 0 : g.length;\n    for (this.clear(); ++P < k; ) {\n      var Z = g[P];\n      this.set(Z[0], Z[1]);\n    }\n  }\n  function Wh() {\n    this.__data__ = [], this.size = 0;\n  }\n  function Yh(g) {\n    var P = this.__data__, k = Ps(P, g);\n    if (k < 0)\n      return !1;\n    var Z = P.length - 1;\n    return k == Z ? P.pop() : si.call(P, k, 1), --this.size, !0;\n  }\n  function Jh(g) {\n    var P = this.__data__, k = Ps(P, g);\n    return k < 0 ? void 0 : P[k][1];\n  }\n  function Qh(g) {\n    return Ps(this.__data__, g) > -1;\n  }\n  function Xh(g, P) {\n    var k = this.__data__, Z = Ps(k, g);\n    return Z < 0 ? (++this.size, k.push([g, P])) : k[Z][1] = P, this;\n  }\n  Yt.prototype.clear = Wh, Yt.prototype.delete = Yh, Yt.prototype.get = Jh, Yt.prototype.has = Qh, Yt.prototype.set = Xh;\n  function pi(g) {\n    var P = -1, k = g == null ? 0 : g.length;\n    for (this.clear(); ++P < k; ) {\n      var Z = g[P];\n      this.set(Z[0], Z[1]);\n    }\n  }\n  function Zh() {\n    this.size = 0, this.__data__ = {\n      hash: new Ae(),\n      map: new (Fe || Yt)(),\n      string: new Ae()\n    };\n  }\n  function eu(g) {\n    var P = Rs(this, g).delete(g);\n    return this.size -= P ? 1 : 0, P;\n  }\n  function tu(g) {\n    return Rs(this, g).get(g);\n  }\n  function iu(g) {\n    return Rs(this, g).has(g);\n  }\n  function su(g, P) {\n    var k = Rs(this, g), Z = k.size;\n    return k.set(g, P), this.size += k.size == Z ? 0 : 1, this;\n  }\n  pi.prototype.clear = Zh, pi.prototype.delete = eu, pi.prototype.get = tu, pi.prototype.has = iu, pi.prototype.set = su;\n  function Ns(g) {\n    var P = -1, k = g == null ? 0 : g.length;\n    for (this.__data__ = new pi(); ++P < k; )\n      this.add(g[P]);\n  }\n  function ru(g) {\n    return this.__data__.set(g, s), this;\n  }\n  function nu(g) {\n    return this.__data__.has(g);\n  }\n  Ns.prototype.add = Ns.prototype.push = ru, Ns.prototype.has = nu;\n  function ri(g) {\n    var P = this.__data__ = new Yt(g);\n    this.size = P.size;\n  }\n  function ou() {\n    this.__data__ = new Yt(), this.size = 0;\n  }\n  function au(g) {\n    var P = this.__data__, k = P.delete(g);\n    return this.size = P.size, k;\n  }\n  function cu(g) {\n    return this.__data__.get(g);\n  }\n  function hu(g) {\n    return this.__data__.has(g);\n  }\n  function uu(g, P) {\n    var k = this.__data__;\n    if (k instanceof Yt) {\n      var Z = k.__data__;\n      if (!Fe || Z.length < t - 1)\n        return Z.push([g, P]), this.size = ++k.size, this;\n      k = this.__data__ = new pi(Z);\n    }\n    return k.set(g, P), this.size = k.size, this;\n  }\n  ri.prototype.clear = ou, ri.prototype.delete = au, ri.prototype.get = cu, ri.prototype.has = hu, ri.prototype.set = uu;\n  function lu(g, P) {\n    var k = Cs(g), Z = !k && xu(g), Re = !k && !Z && gr(g), ae = !k && !Z && !Re && Kn(g), Le = k || Z || Re || ae, rt = Le ? Me(g.length, String) : [], ct = rt.length;\n    for (var Te in g)\n      (P || ne.call(g, Te)) && !(Le && // Safari 9 has enumerable `arguments.length` in strict mode.\n      (Te == \"length\" || // Node.js 0.10 has enumerable non-index properties on buffers.\n      Re && (Te == \"offset\" || Te == \"parent\") || // PhantomJS 2 has enumerable non-index properties on typed arrays.\n      ae && (Te == \"buffer\" || Te == \"byteLength\" || Te == \"byteOffset\") || // Skip index properties.\n      _u(Te, ct))) && rt.push(Te);\n    return rt;\n  }\n  function Ps(g, P) {\n    for (var k = g.length; k--; )\n      if (Mn(g[k][0], P))\n        return k;\n    return -1;\n  }\n  function du(g, P, k) {\n    var Z = P(g);\n    return Cs(g) ? Z : ge(Z, k(g));\n  }\n  function Vi(g) {\n    return g == null ? g === void 0 ? L : K : Dt && Dt in Object(g) ? wu(g) : Du(g);\n  }\n  function $n(g) {\n    return Bi(g) && Vi(g) == c;\n  }\n  function Fn(g, P, k, Z, Re) {\n    return g === P ? !0 : g == null || P == null || !Bi(g) && !Bi(P) ? g !== g && P !== P : fu(g, P, k, Z, Fn, Re);\n  }\n  function fu(g, P, k, Z, Re, ae) {\n    var Le = Cs(g), rt = Cs(P), ct = Le ? u : ni(g), Te = rt ? u : ni(P);\n    ct = ct == c ? I : ct, Te = Te == c ? I : Te;\n    var xt = ct == I, Lt = Te == I, ft = ct == Te;\n    if (ft && gr(g)) {\n      if (!gr(P))\n        return !1;\n      Le = !0, xt = !1;\n    }\n    if (ft && !xt)\n      return ae || (ae = new ri()), Le || Kn(g) ? Un(g, P, k, Z, Re, ae) : mu(g, P, ct, k, Z, Re, ae);\n    if (!(k & r)) {\n      var Rt = xt && ne.call(g, \"__wrapped__\"), Ct = Lt && ne.call(P, \"__wrapped__\");\n      if (Rt || Ct) {\n        var oi = Rt ? g.value() : g, Jt = Ct ? P.value() : P;\n        return ae || (ae = new ri()), Re(oi, Jt, k, Z, ae);\n      }\n    }\n    return ft ? (ae || (ae = new ri()), bu(g, P, k, Z, Re, ae)) : !1;\n  }\n  function pu(g) {\n    if (!zn(g) || Su(g))\n      return !1;\n    var P = qn(g) ? De : G;\n    return P.test(gi(g));\n  }\n  function gu(g) {\n    return Bi(g) && jn(g.length) && !!Q[Vi(g)];\n  }\n  function yu(g) {\n    if (!Iu(g))\n      return Os(g);\n    var P = [];\n    for (var k in Object(g))\n      ne.call(g, k) && k != \"constructor\" && P.push(k);\n    return P;\n  }\n  function Un(g, P, k, Z, Re, ae) {\n    var Le = k & r, rt = g.length, ct = P.length;\n    if (rt != ct && !(Le && ct > rt))\n      return !1;\n    var Te = ae.get(g);\n    if (Te && ae.get(P))\n      return Te == P;\n    var xt = -1, Lt = !0, ft = k & n ? new Ns() : void 0;\n    for (ae.set(g, P), ae.set(P, g); ++xt < rt; ) {\n      var Rt = g[xt], Ct = P[xt];\n      if (Z)\n        var oi = Le ? Z(Ct, Rt, xt, P, g, ae) : Z(Rt, Ct, xt, g, P, ae);\n      if (oi !== void 0) {\n        if (oi)\n          continue;\n        Lt = !1;\n        break;\n      }\n      if (ft) {\n        if (!Se(P, function(Jt, yi) {\n          if (!be(ft, yi) && (Rt === Jt || Re(Rt, Jt, k, Z, ae)))\n            return ft.push(yi);\n        })) {\n          Lt = !1;\n          break;\n        }\n      } else if (!(Rt === Ct || Re(Rt, Ct, k, Z, ae))) {\n        Lt = !1;\n        break;\n      }\n    }\n    return ae.delete(g), ae.delete(P), Lt;\n  }\n  function mu(g, P, k, Z, Re, ae, Le) {\n    switch (k) {\n      case $:\n        if (g.byteLength != P.byteLength || g.byteOffset != P.byteOffset)\n          return !1;\n        g = g.buffer, P = P.buffer;\n      case R:\n        return !(g.byteLength != P.byteLength || !ae(new Ut(g), new Ut(P)));\n      case p:\n      case b:\n      case F:\n        return Mn(+g, +P);\n      case x:\n        return g.name == P.name && g.message == P.message;\n      case w:\n      case a:\n        return g == P + \"\";\n      case C:\n        var rt = pe;\n      case f:\n        var ct = Z & r;\n        if (rt || (rt = ue), g.size != P.size && !ct)\n          return !1;\n        var Te = Le.get(g);\n        if (Te)\n          return Te == P;\n        Z |= n, Le.set(g, P);\n        var xt = Un(rt(g), rt(P), Z, Re, ae, Le);\n        return Le.delete(g), xt;\n      case l:\n        if (Ve)\n          return Ve.call(g) == Ve.call(P);\n    }\n    return !1;\n  }\n  function bu(g, P, k, Z, Re, ae) {\n    var Le = k & r, rt = Ln(g), ct = rt.length, Te = Ln(P), xt = Te.length;\n    if (ct != xt && !Le)\n      return !1;\n    for (var Lt = ct; Lt--; ) {\n      var ft = rt[Lt];\n      if (!(Le ? ft in P : ne.call(P, ft)))\n        return !1;\n    }\n    var Rt = ae.get(g);\n    if (Rt && ae.get(P))\n      return Rt == P;\n    var Ct = !0;\n    ae.set(g, P), ae.set(P, g);\n    for (var oi = Le; ++Lt < ct; ) {\n      ft = rt[Lt];\n      var Jt = g[ft], yi = P[ft];\n      if (Z)\n        var Vn = Le ? Z(yi, Jt, ft, P, g, ae) : Z(Jt, yi, ft, g, P, ae);\n      if (!(Vn === void 0 ? Jt === yi || Re(Jt, yi, k, Z, ae) : Vn)) {\n        Ct = !1;\n        break;\n      }\n      oi || (oi = ft == \"constructor\");\n    }\n    if (Ct && !oi) {\n      var As = g.constructor, Ts = P.constructor;\n      As != Ts && \"constructor\" in g && \"constructor\" in P && !(typeof As == \"function\" && As instanceof As && typeof Ts == \"function\" && Ts instanceof Ts) && (Ct = !1);\n    }\n    return ae.delete(g), ae.delete(P), Ct;\n  }\n  function Ln(g) {\n    return du(g, Pu, vu);\n  }\n  function Rs(g, P) {\n    var k = g.__data__;\n    return Eu(P) ? k[typeof P == \"string\" ? \"string\" : \"hash\"] : k.map;\n  }\n  function Pi(g, P) {\n    var k = ye(g, P);\n    return pu(k) ? k : void 0;\n  }\n  function wu(g) {\n    var P = ne.call(g, Dt), k = g[Dt];\n    try {\n      g[Dt] = void 0;\n      var Z = !0;\n    } catch {\n    }\n    var Re = Ee.call(g);\n    return Z && (P ? g[Dt] = k : delete g[Dt]), Re;\n  }\n  var vu = fi ? function(g) {\n    return g == null ? [] : (g = Object(g), ve(fi(g), function(P) {\n      return qt.call(g, P);\n    }));\n  } : Ru, ni = Vi;\n  (qe && ni(new qe(new ArrayBuffer(1))) != $ || Fe && ni(new Fe()) != C || je && ni(je.resolve()) != D || ze && ni(new ze()) != f || Ke && ni(new Ke()) != v) && (ni = function(g) {\n    var P = Vi(g), k = P == I ? g.constructor : void 0, Z = k ? gi(k) : \"\";\n    if (Z)\n      switch (Z) {\n        case Qe:\n          return $;\n        case Xe:\n          return C;\n        case Ze:\n          return D;\n        case et:\n          return f;\n        case tt:\n          return v;\n      }\n    return P;\n  });\n  function _u(g, P) {\n    return P = P ?? o, !!P && (typeof g == \"number\" || ie.test(g)) && g > -1 && g % 1 == 0 && g < P;\n  }\n  function Eu(g) {\n    var P = typeof g;\n    return P == \"string\" || P == \"number\" || P == \"symbol\" || P == \"boolean\" ? g !== \"__proto__\" : g === null;\n  }\n  function Su(g) {\n    return !!_e && _e in g;\n  }\n  function Iu(g) {\n    var P = g && g.constructor, k = typeof P == \"function\" && P.prototype || re;\n    return g === k;\n  }\n  function Du(g) {\n    return Ee.call(g);\n  }\n  function gi(g) {\n    if (g != null) {\n      try {\n        return me.call(g);\n      } catch {\n      }\n      try {\n        return g + \"\";\n      } catch {\n      }\n    }\n    return \"\";\n  }\n  function Mn(g, P) {\n    return g === P || g !== g && P !== P;\n  }\n  var xu = $n(function() {\n    return arguments;\n  }()) ? $n : function(g) {\n    return Bi(g) && ne.call(g, \"callee\") && !qt.call(g, \"callee\");\n  }, Cs = Array.isArray;\n  function Ou(g) {\n    return g != null && jn(g.length) && !qn(g);\n  }\n  var gr = Ki || Cu;\n  function Nu(g, P) {\n    return Fn(g, P);\n  }\n  function qn(g) {\n    if (!zn(g))\n      return !1;\n    var P = Vi(g);\n    return P == O || P == _ || P == d || P == y;\n  }\n  function jn(g) {\n    return typeof g == \"number\" && g > -1 && g % 1 == 0 && g <= o;\n  }\n  function zn(g) {\n    var P = typeof g;\n    return g != null && (P == \"object\" || P == \"function\");\n  }\n  function Bi(g) {\n    return g != null && typeof g == \"object\";\n  }\n  var Kn = fe ? $e(fe) : gu;\n  function Pu(g) {\n    return Ou(g) ? lu(g) : yu(g);\n  }\n  function Ru() {\n    return [];\n  }\n  function Cu() {\n    return !1;\n  }\n  i.exports = Nu;\n})(Qs, Qs.exports);\nvar Fg = Qs.exports;\nconst Yc = /* @__PURE__ */ (0,_lastConnected_b964dc30_js__WEBPACK_IMPORTED_MODULE_0__.e)(Fg);\nfunction Ug(i, e) {\n  if (i.length >= 255)\n    throw new TypeError(\"Alphabet too long\");\n  for (var t = new Uint8Array(256), s = 0; s < t.length; s++)\n    t[s] = 255;\n  for (var r = 0; r < i.length; r++) {\n    var n = i.charAt(r), o = n.charCodeAt(0);\n    if (t[o] !== 255)\n      throw new TypeError(n + \" is ambiguous\");\n    t[o] = r;\n  }\n  var c = i.length, u = i.charAt(0), d = Math.log(c) / Math.log(256), p = Math.log(256) / Math.log(c);\n  function b(_) {\n    if (_ instanceof Uint8Array || (ArrayBuffer.isView(_) ? _ = new Uint8Array(_.buffer, _.byteOffset, _.byteLength) : Array.isArray(_) && (_ = Uint8Array.from(_))), !(_ instanceof Uint8Array))\n      throw new TypeError(\"Expected Uint8Array\");\n    if (_.length === 0)\n      return \"\";\n    for (var C = 0, F = 0, K = 0, I = _.length; K !== I && _[K] === 0; )\n      K++, C++;\n    for (var D = (I - K) * p + 1 >>> 0, y = new Uint8Array(D); K !== I; ) {\n      for (var w = _[K], f = 0, a = D - 1; (w !== 0 || f < F) && a !== -1; a--, f++)\n        w += 256 * y[a] >>> 0, y[a] = w % c >>> 0, w = w / c >>> 0;\n      if (w !== 0)\n        throw new Error(\"Non-zero carry\");\n      F = f, K++;\n    }\n    for (var l = D - F; l !== D && y[l] === 0; )\n      l++;\n    for (var L = u.repeat(C); l < D; ++l)\n      L += i.charAt(y[l]);\n    return L;\n  }\n  function x(_) {\n    if (typeof _ != \"string\")\n      throw new TypeError(\"Expected String\");\n    if (_.length === 0)\n      return new Uint8Array();\n    var C = 0;\n    if (_[C] !== \" \") {\n      for (var F = 0, K = 0; _[C] === u; )\n        F++, C++;\n      for (var I = (_.length - C) * d + 1 >>> 0, D = new Uint8Array(I); _[C]; ) {\n        var y = t[_.charCodeAt(C)];\n        if (y === 255)\n          return;\n        for (var w = 0, f = I - 1; (y !== 0 || w < K) && f !== -1; f--, w++)\n          y += c * D[f] >>> 0, D[f] = y % 256 >>> 0, y = y / 256 >>> 0;\n        if (y !== 0)\n          throw new Error(\"Non-zero carry\");\n        K = w, C++;\n      }\n      if (_[C] !== \" \") {\n        for (var a = I - K; a !== I && D[a] === 0; )\n          a++;\n        for (var l = new Uint8Array(F + (I - a)), L = F; a !== I; )\n          l[L++] = D[a++];\n        return l;\n      }\n    }\n  }\n  function O(_) {\n    var C = x(_);\n    if (C)\n      return C;\n    throw new Error(`Non-${e} character`);\n  }\n  return { encode: b, decodeUnsafe: x, decode: O };\n}\nvar Lg = Ug, Mg = Lg;\nconst Jc = (i) => {\n  if (i instanceof Uint8Array && i.constructor.name === \"Uint8Array\")\n    return i;\n  if (i instanceof ArrayBuffer)\n    return new Uint8Array(i);\n  if (ArrayBuffer.isView(i))\n    return new Uint8Array(i.buffer, i.byteOffset, i.byteLength);\n  throw new Error(\"Unknown type, must be binary type\");\n}, qg = (i) => new TextEncoder().encode(i), jg = (i) => new TextDecoder().decode(i);\nlet zg = class {\n  constructor(e, t, s) {\n    this.name = e, this.prefix = t, this.baseEncode = s;\n  }\n  encode(e) {\n    if (e instanceof Uint8Array)\n      return `${this.prefix}${this.baseEncode(e)}`;\n    throw Error(\"Unknown type, must be binary type\");\n  }\n}, Kg = class {\n  constructor(e, t, s) {\n    if (this.name = e, this.prefix = t, t.codePointAt(0) === void 0)\n      throw new Error(\"Invalid prefix character\");\n    this.prefixCodePoint = t.codePointAt(0), this.baseDecode = s;\n  }\n  decode(e) {\n    if (typeof e == \"string\") {\n      if (e.codePointAt(0) !== this.prefixCodePoint)\n        throw Error(`Unable to decode multibase string ${JSON.stringify(e)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);\n      return this.baseDecode(e.slice(this.prefix.length));\n    } else\n      throw Error(\"Can only multibase decode strings\");\n  }\n  or(e) {\n    return Qc(this, e);\n  }\n}, Vg = class {\n  constructor(e) {\n    this.decoders = e;\n  }\n  or(e) {\n    return Qc(this, e);\n  }\n  decode(e) {\n    const t = e[0], s = this.decoders[t];\n    if (s)\n      return s.decode(e);\n    throw RangeError(`Unable to decode multibase string ${JSON.stringify(e)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);\n  }\n};\nconst Qc = (i, e) => new Vg({ ...i.decoders || { [i.prefix]: i }, ...e.decoders || { [e.prefix]: e } });\nlet Bg = class {\n  constructor(e, t, s, r) {\n    this.name = e, this.prefix = t, this.baseEncode = s, this.baseDecode = r, this.encoder = new zg(e, t, s), this.decoder = new Kg(e, t, r);\n  }\n  encode(e) {\n    return this.encoder.encode(e);\n  }\n  decode(e) {\n    return this.decoder.decode(e);\n  }\n};\nconst lr = ({ name: i, prefix: e, encode: t, decode: s }) => new Bg(i, e, t, s), Ss = ({ prefix: i, name: e, alphabet: t }) => {\n  const { encode: s, decode: r } = Mg(t, e);\n  return lr({ prefix: i, name: e, encode: s, decode: (n) => Jc(r(n)) });\n}, kg = (i, e, t, s) => {\n  const r = {};\n  for (let p = 0; p < e.length; ++p)\n    r[e[p]] = p;\n  let n = i.length;\n  for (; i[n - 1] === \"=\"; )\n    --n;\n  const o = new Uint8Array(n * t / 8 | 0);\n  let c = 0, u = 0, d = 0;\n  for (let p = 0; p < n; ++p) {\n    const b = r[i[p]];\n    if (b === void 0)\n      throw new SyntaxError(`Non-${s} character`);\n    u = u << t | b, c += t, c >= 8 && (c -= 8, o[d++] = 255 & u >> c);\n  }\n  if (c >= t || 255 & u << 8 - c)\n    throw new SyntaxError(\"Unexpected end of data\");\n  return o;\n}, Hg = (i, e, t) => {\n  const s = e[e.length - 1] === \"=\", r = (1 << t) - 1;\n  let n = \"\", o = 0, c = 0;\n  for (let u = 0; u < i.length; ++u)\n    for (c = c << 8 | i[u], o += 8; o > t; )\n      o -= t, n += e[r & c >> o];\n  if (o && (n += e[r & c << t - o]), s)\n    for (; n.length * t & 7; )\n      n += \"=\";\n  return n;\n}, lt = ({ name: i, prefix: e, bitsPerChar: t, alphabet: s }) => lr({ prefix: e, name: i, encode(r) {\n  return Hg(r, s, t);\n}, decode(r) {\n  return kg(r, s, t, i);\n} }), Gg = lr({ prefix: \"\\0\", name: \"identity\", encode: (i) => jg(i), decode: (i) => qg(i) });\nvar Wg = Object.freeze({ __proto__: null, identity: Gg });\nconst Yg = lt({ prefix: \"0\", name: \"base2\", alphabet: \"01\", bitsPerChar: 1 });\nvar Jg = Object.freeze({ __proto__: null, base2: Yg });\nconst Qg = lt({ prefix: \"7\", name: \"base8\", alphabet: \"01234567\", bitsPerChar: 3 });\nvar Xg = Object.freeze({ __proto__: null, base8: Qg });\nconst Zg = Ss({ prefix: \"9\", name: \"base10\", alphabet: \"0123456789\" });\nvar ey = Object.freeze({ __proto__: null, base10: Zg });\nconst ty = lt({ prefix: \"f\", name: \"base16\", alphabet: \"0123456789abcdef\", bitsPerChar: 4 }), iy = lt({ prefix: \"F\", name: \"base16upper\", alphabet: \"0123456789ABCDEF\", bitsPerChar: 4 });\nvar sy = Object.freeze({ __proto__: null, base16: ty, base16upper: iy });\nconst ry = lt({ prefix: \"b\", name: \"base32\", alphabet: \"abcdefghijklmnopqrstuvwxyz234567\", bitsPerChar: 5 }), ny = lt({ prefix: \"B\", name: \"base32upper\", alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\", bitsPerChar: 5 }), oy = lt({ prefix: \"c\", name: \"base32pad\", alphabet: \"abcdefghijklmnopqrstuvwxyz234567=\", bitsPerChar: 5 }), ay = lt({ prefix: \"C\", name: \"base32padupper\", alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=\", bitsPerChar: 5 }), cy = lt({ prefix: \"v\", name: \"base32hex\", alphabet: \"0123456789abcdefghijklmnopqrstuv\", bitsPerChar: 5 }), hy = lt({ prefix: \"V\", name: \"base32hexupper\", alphabet: \"0123456789ABCDEFGHIJKLMNOPQRSTUV\", bitsPerChar: 5 }), uy = lt({ prefix: \"t\", name: \"base32hexpad\", alphabet: \"0123456789abcdefghijklmnopqrstuv=\", bitsPerChar: 5 }), ly = lt({ prefix: \"T\", name: \"base32hexpadupper\", alphabet: \"0123456789ABCDEFGHIJKLMNOPQRSTUV=\", bitsPerChar: 5 }), dy = lt({ prefix: \"h\", name: \"base32z\", alphabet: \"ybndrfg8ejkmcpqxot1uwisza345h769\", bitsPerChar: 5 });\nvar fy = Object.freeze({ __proto__: null, base32: ry, base32upper: ny, base32pad: oy, base32padupper: ay, base32hex: cy, base32hexupper: hy, base32hexpad: uy, base32hexpadupper: ly, base32z: dy });\nconst py = Ss({ prefix: \"k\", name: \"base36\", alphabet: \"0123456789abcdefghijklmnopqrstuvwxyz\" }), gy = Ss({ prefix: \"K\", name: \"base36upper\", alphabet: \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\" });\nvar yy = Object.freeze({ __proto__: null, base36: py, base36upper: gy });\nconst my = Ss({ name: \"base58btc\", prefix: \"z\", alphabet: \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\" }), by = Ss({ name: \"base58flickr\", prefix: \"Z\", alphabet: \"123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ\" });\nvar wy = Object.freeze({ __proto__: null, base58btc: my, base58flickr: by });\nconst vy = lt({ prefix: \"m\", name: \"base64\", alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\", bitsPerChar: 6 }), _y = lt({ prefix: \"M\", name: \"base64pad\", alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\", bitsPerChar: 6 }), Ey = lt({ prefix: \"u\", name: \"base64url\", alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\", bitsPerChar: 6 }), Sy = lt({ prefix: \"U\", name: \"base64urlpad\", alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=\", bitsPerChar: 6 });\nvar Iy = Object.freeze({ __proto__: null, base64: vy, base64pad: _y, base64url: Ey, base64urlpad: Sy });\nconst Xc = Array.from(\"🚀🪐☄🛰🌌🌑🌒🌓🌔🌕🌖🌗🌘🌍🌏🌎🐉☀💻🖥💾💿😂❤😍🤣😊🙏💕😭😘👍😅👏😁🔥🥰💔💖💙😢🤔😆🙄💪😉☺👌🤗💜😔😎😇🌹🤦🎉💞✌✨🤷😱😌🌸🙌😋💗💚😏💛🙂💓🤩😄😀🖤😃💯🙈👇🎶😒🤭❣😜💋👀😪😑💥🙋😞😩😡🤪👊🥳😥🤤👉💃😳✋😚😝😴🌟😬🙃🍀🌷😻😓⭐✅🥺🌈😈🤘💦✔😣🏃💐☹🎊💘😠☝😕🌺🎂🌻😐🖕💝🙊😹🗣💫💀👑🎵🤞😛🔴😤🌼😫⚽🤙☕🏆🤫👈😮🙆🍻🍃🐶💁😲🌿🧡🎁⚡🌞🎈❌✊👋😰🤨😶🤝🚶💰🍓💢🤟🙁🚨💨🤬✈🎀🍺🤓😙💟🌱😖👶🥴▶➡❓💎💸⬇😨🌚🦋😷🕺⚠🙅😟😵👎🤲🤠🤧📌🔵💅🧐🐾🍒😗🤑🌊🤯🐷☎💧😯💆👆🎤🙇🍑❄🌴💣🐸💌📍🥀🤢👅💡💩👐📸👻🤐🤮🎼🥵🚩🍎🍊👼💍📣🥂\"), Dy = Xc.reduce((i, e, t) => (i[t] = e, i), []), xy = Xc.reduce((i, e, t) => (i[e.codePointAt(0)] = t, i), []);\nfunction Oy(i) {\n  return i.reduce((e, t) => (e += Dy[t], e), \"\");\n}\nfunction Ny(i) {\n  const e = [];\n  for (const t of i) {\n    const s = xy[t.codePointAt(0)];\n    if (s === void 0)\n      throw new Error(`Non-base256emoji character: ${t}`);\n    e.push(s);\n  }\n  return new Uint8Array(e);\n}\nconst Py = lr({ prefix: \"🚀\", name: \"base256emoji\", encode: Oy, decode: Ny });\nvar Ry = Object.freeze({ __proto__: null, base256emoji: Py }), Cy = Zc, Go = 128, Ay = 127, Ty = ~Ay, $y = Math.pow(2, 31);\nfunction Zc(i, e, t) {\n  e = e || [], t = t || 0;\n  for (var s = t; i >= $y; )\n    e[t++] = i & 255 | Go, i /= 128;\n  for (; i & Ty; )\n    e[t++] = i & 255 | Go, i >>>= 7;\n  return e[t] = i | 0, Zc.bytes = t - s + 1, e;\n}\nvar Fy = Wr, Uy = 128, Wo = 127;\nfunction Wr(i, s) {\n  var t = 0, s = s || 0, r = 0, n = s, o, c = i.length;\n  do {\n    if (n >= c)\n      throw Wr.bytes = 0, new RangeError(\"Could not decode varint\");\n    o = i[n++], t += r < 28 ? (o & Wo) << r : (o & Wo) * Math.pow(2, r), r += 7;\n  } while (o >= Uy);\n  return Wr.bytes = n - s, t;\n}\nvar Ly = Math.pow(2, 7), My = Math.pow(2, 14), qy = Math.pow(2, 21), jy = Math.pow(2, 28), zy = Math.pow(2, 35), Ky = Math.pow(2, 42), Vy = Math.pow(2, 49), By = Math.pow(2, 56), ky = Math.pow(2, 63), Hy = function(i) {\n  return i < Ly ? 1 : i < My ? 2 : i < qy ? 3 : i < jy ? 4 : i < zy ? 5 : i < Ky ? 6 : i < Vy ? 7 : i < By ? 8 : i < ky ? 9 : 10;\n}, Gy = { encode: Cy, decode: Fy, encodingLength: Hy }, eh = Gy;\nconst Yo = (i, e, t = 0) => (eh.encode(i, e, t), e), Jo = (i) => eh.encodingLength(i), Yr = (i, e) => {\n  const t = e.byteLength, s = Jo(i), r = s + Jo(t), n = new Uint8Array(r + t);\n  return Yo(i, n, 0), Yo(t, n, s), n.set(e, r), new Wy(i, t, e, n);\n};\nlet Wy = class {\n  constructor(e, t, s, r) {\n    this.code = e, this.size = t, this.digest = s, this.bytes = r;\n  }\n};\nconst th = ({ name: i, code: e, encode: t }) => new Yy(i, e, t);\nlet Yy = class {\n  constructor(e, t, s) {\n    this.name = e, this.code = t, this.encode = s;\n  }\n  digest(e) {\n    if (e instanceof Uint8Array) {\n      const t = this.encode(e);\n      return t instanceof Uint8Array ? Yr(this.code, t) : t.then((s) => Yr(this.code, s));\n    } else\n      throw Error(\"Unknown type, must be binary type\");\n  }\n};\nconst ih = (i) => async (e) => new Uint8Array(await crypto.subtle.digest(i, e)), Jy = th({ name: \"sha2-256\", code: 18, encode: ih(\"SHA-256\") }), Qy = th({ name: \"sha2-512\", code: 19, encode: ih(\"SHA-512\") });\nvar Xy = Object.freeze({ __proto__: null, sha256: Jy, sha512: Qy });\nconst sh = 0, Zy = \"identity\", rh = Jc, e1 = (i) => Yr(sh, rh(i)), t1 = { code: sh, name: Zy, encode: rh, digest: e1 };\nvar i1 = Object.freeze({ __proto__: null, identity: t1 });\nnew TextEncoder(), new TextDecoder();\nconst Qo = { ...Wg, ...Jg, ...Xg, ...ey, ...sy, ...fy, ...yy, ...wy, ...Iy, ...Ry };\n({ ...Xy, ...i1 });\nfunction nh(i) {\n  return globalThis.Buffer != null ? new Uint8Array(i.buffer, i.byteOffset, i.byteLength) : i;\n}\nfunction s1(i = 0) {\n  return globalThis.Buffer != null && globalThis.Buffer.allocUnsafe != null ? nh(globalThis.Buffer.allocUnsafe(i)) : new Uint8Array(i);\n}\nfunction oh(i, e, t, s) {\n  return { name: i, prefix: e, encoder: { name: i, prefix: e, encode: t }, decoder: { decode: s } };\n}\nconst Xo = oh(\"utf8\", \"u\", (i) => \"u\" + new TextDecoder(\"utf8\").decode(i), (i) => new TextEncoder().encode(i.substring(1))), Or = oh(\"ascii\", \"a\", (i) => {\n  let e = \"a\";\n  for (let t = 0; t < i.length; t++)\n    e += String.fromCharCode(i[t]);\n  return e;\n}, (i) => {\n  i = i.substring(1);\n  const e = s1(i.length);\n  for (let t = 0; t < i.length; t++)\n    e[t] = i.charCodeAt(t);\n  return e;\n}), r1 = { utf8: Xo, \"utf-8\": Xo, hex: Qo.base16, latin1: Or, ascii: Or, binary: Or, ...Qo };\nfunction n1(i, e = \"utf8\") {\n  const t = r1[e];\n  if (!t)\n    throw new Error(`Unsupported encoding \"${e}\"`);\n  return (e === \"utf8\" || e === \"utf-8\") && globalThis.Buffer != null && globalThis.Buffer.from != null ? nh(globalThis.Buffer.from(i, \"utf-8\")) : t.decoder.decode(`${t.prefix}${i}`);\n}\nconst ah = \"wc\", o1 = 2, En = \"core\", hi = `${ah}@2:${En}:`, a1 = { name: En, logger: \"error\" }, c1 = { database: \":memory:\" }, h1 = \"crypto\", Zo = \"client_ed25519_seed\", u1 = V.ONE_DAY, l1 = \"keychain\", d1 = \"0.3\", f1 = \"messages\", p1 = \"0.3\", g1 = V.SIX_HOURS, y1 = \"publisher\", ch = \"irn\", m1 = \"error\", hh = \"wss://relay.walletconnect.com\", ea = \"wss://relay.walletconnect.org\", b1 = \"relayer\", gt = { message: \"relayer_message\", message_ack: \"relayer_message_ack\", connect: \"relayer_connect\", disconnect: \"relayer_disconnect\", error: \"relayer_error\", connection_stalled: \"relayer_connection_stalled\", transport_closed: \"relayer_transport_closed\", publish: \"relayer_publish\" }, w1 = \"_subscription\", Zt = { payload: \"payload\", connect: \"connect\", disconnect: \"disconnect\", error: \"error\" }, v1 = V.ONE_SECOND, _1 = \"2.10.1\", E1 = 1e4, S1 = \"0.3\", I1 = \"WALLETCONNECT_CLIENT_ID\", Vt = { created: \"subscription_created\", deleted: \"subscription_deleted\", expired: \"subscription_expired\", disabled: \"subscription_disabled\", sync: \"subscription_sync\", resubscribed: \"subscription_resubscribed\" }, D1 = \"subscription\", x1 = \"0.3\", O1 = V.FIVE_SECONDS * 1e3, N1 = \"pairing\", P1 = \"0.3\", Xi = { wc_pairingDelete: { req: { ttl: V.ONE_DAY, prompt: !1, tag: 1e3 }, res: { ttl: V.ONE_DAY, prompt: !1, tag: 1001 } }, wc_pairingPing: { req: { ttl: V.THIRTY_SECONDS, prompt: !1, tag: 1002 }, res: { ttl: V.THIRTY_SECONDS, prompt: !1, tag: 1003 } }, unregistered_method: { req: { ttl: V.ONE_DAY, prompt: !1, tag: 0 }, res: { ttl: V.ONE_DAY, prompt: !1, tag: 0 } } }, os = { create: \"pairing_create\", expire: \"pairing_expire\", delete: \"pairing_delete\", ping: \"pairing_ping\" }, zt = { created: \"history_created\", updated: \"history_updated\", deleted: \"history_deleted\", sync: \"history_sync\" }, R1 = \"history\", C1 = \"0.3\", A1 = \"expirer\", Tt = { created: \"expirer_created\", deleted: \"expirer_deleted\", expired: \"expirer_expired\", sync: \"expirer_sync\" }, T1 = \"0.3\", Nr = \"verify-api\", Ks = \"https://verify.walletconnect.com\", ta = \"https://verify.walletconnect.org\";\nlet $1 = class {\n  constructor(e, t) {\n    this.core = e, this.logger = t, this.keychain = /* @__PURE__ */ new Map(), this.name = l1, this.version = d1, this.initialized = !1, this.storagePrefix = hi, this.init = async () => {\n      if (!this.initialized) {\n        const s = await this.getKeyChain();\n        typeof s < \"u\" && (this.keychain = s), this.initialized = !0;\n      }\n    }, this.has = (s) => (this.isInitialized(), this.keychain.has(s)), this.set = async (s, r) => {\n      this.isInitialized(), this.keychain.set(s, r), await this.persist();\n    }, this.get = (s) => {\n      this.isInitialized();\n      const r = this.keychain.get(s);\n      if (typeof r > \"u\") {\n        const { message: n } = Y(\"NO_MATCHING_KEY\", `${this.name}: ${s}`);\n        throw new Error(n);\n      }\n      return r;\n    }, this.del = async (s) => {\n      this.isInitialized(), this.keychain.delete(s), await this.persist();\n    }, this.core = e, this.logger = ee.generateChildLogger(t, this.name);\n  }\n  get context() {\n    return ee.getLoggerContext(this.logger);\n  }\n  get storageKey() {\n    return this.storagePrefix + this.version + \"//\" + this.name;\n  }\n  async setKeyChain(e) {\n    await this.core.storage.setItem(this.storageKey, Lc(e));\n  }\n  async getKeyChain() {\n    const e = await this.core.storage.getItem(this.storageKey);\n    return typeof e < \"u\" ? Mc(e) : void 0;\n  }\n  async persist() {\n    await this.setKeyChain(this.keychain);\n  }\n  isInitialized() {\n    if (!this.initialized) {\n      const { message: e } = Y(\"NOT_INITIALIZED\", this.name);\n      throw new Error(e);\n    }\n  }\n}, F1 = class {\n  constructor(e, t, s) {\n    this.core = e, this.logger = t, this.name = h1, this.initialized = !1, this.init = async () => {\n      this.initialized || (await this.keychain.init(), this.initialized = !0);\n    }, this.hasKeys = (r) => (this.isInitialized(), this.keychain.has(r)), this.getClientId = async () => {\n      this.isInitialized();\n      const r = await this.getClientSeed(), n = Ws(r);\n      return an(n.publicKey);\n    }, this.generateKeyPair = () => {\n      this.isInitialized();\n      const r = tp();\n      return this.setPrivateKey(r.publicKey, r.privateKey);\n    }, this.signJWT = async (r) => {\n      this.isInitialized();\n      const n = await this.getClientSeed(), o = Ws(n), c = Hr();\n      return await Ic(c, r, u1, o);\n    }, this.generateSharedKey = (r, n, o) => {\n      this.isInitialized();\n      const c = this.getPrivateKey(r), u = ip(c, n);\n      return this.setSymKey(u, o);\n    }, this.setSymKey = async (r, n) => {\n      this.isInitialized();\n      const o = n || sp(r);\n      return await this.keychain.set(o, r), o;\n    }, this.deleteKeyPair = async (r) => {\n      this.isInitialized(), await this.keychain.del(r);\n    }, this.deleteSymKey = async (r) => {\n      this.isInitialized(), await this.keychain.del(r);\n    }, this.encode = async (r, n, o) => {\n      this.isInitialized();\n      const c = Uc(o), u = rr(n);\n      if (Ro(c)) {\n        const x = c.senderPublicKey, O = c.receiverPublicKey;\n        r = await this.generateSharedKey(x, O);\n      }\n      const d = this.getSymKey(r), { type: p, senderPublicKey: b } = c;\n      return np({ type: p, symKey: d, message: u, senderPublicKey: b });\n    }, this.decode = async (r, n, o) => {\n      this.isInitialized();\n      const c = cp(n, o);\n      if (Ro(c)) {\n        const u = c.receiverPublicKey, d = c.senderPublicKey;\n        r = await this.generateSharedKey(u, d);\n      }\n      try {\n        const u = this.getSymKey(r), d = op({ symKey: u, encoded: n });\n        return rn(d);\n      } catch (u) {\n        this.logger.error(`Failed to decode message from topic: '${r}', clientId: '${await this.getClientId()}'`), this.logger.error(u);\n      }\n    }, this.getPayloadType = (r) => {\n      const n = Ys(r);\n      return ws(n.type);\n    }, this.getPayloadSenderPublicKey = (r) => {\n      const n = Ys(r);\n      return n.senderPublicKey ? Ne(n.senderPublicKey, vt) : void 0;\n    }, this.core = e, this.logger = ee.generateChildLogger(t, this.name), this.keychain = s || new $1(this.core, this.logger);\n  }\n  get context() {\n    return ee.getLoggerContext(this.logger);\n  }\n  async setPrivateKey(e, t) {\n    return await this.keychain.set(e, t), e;\n  }\n  getPrivateKey(e) {\n    return this.keychain.get(e);\n  }\n  async getClientSeed() {\n    let e = \"\";\n    try {\n      e = this.keychain.get(Zo);\n    } catch {\n      e = Hr(), await this.keychain.set(Zo, e);\n    }\n    return n1(e, \"base16\");\n  }\n  getSymKey(e) {\n    return this.keychain.get(e);\n  }\n  isInitialized() {\n    if (!this.initialized) {\n      const { message: e } = Y(\"NOT_INITIALIZED\", this.name);\n      throw new Error(e);\n    }\n  }\n}, U1 = class extends gl {\n  constructor(e, t) {\n    super(e, t), this.logger = e, this.core = t, this.messages = /* @__PURE__ */ new Map(), this.name = f1, this.version = p1, this.initialized = !1, this.storagePrefix = hi, this.init = async () => {\n      if (!this.initialized) {\n        this.logger.trace(\"Initialized\");\n        try {\n          const s = await this.getRelayerMessages();\n          typeof s < \"u\" && (this.messages = s), this.logger.debug(`Successfully Restored records for ${this.name}`), this.logger.trace({ type: \"method\", method: \"restore\", size: this.messages.size });\n        } catch (s) {\n          this.logger.debug(`Failed to Restore records for ${this.name}`), this.logger.error(s);\n        } finally {\n          this.initialized = !0;\n        }\n      }\n    }, this.set = async (s, r) => {\n      this.isInitialized();\n      const n = Fi(r);\n      let o = this.messages.get(s);\n      return typeof o > \"u\" && (o = {}), typeof o[n] < \"u\" || (o[n] = r, this.messages.set(s, o), await this.persist()), n;\n    }, this.get = (s) => {\n      this.isInitialized();\n      let r = this.messages.get(s);\n      return typeof r > \"u\" && (r = {}), r;\n    }, this.has = (s, r) => {\n      this.isInitialized();\n      const n = this.get(s), o = Fi(r);\n      return typeof n[o] < \"u\";\n    }, this.del = async (s) => {\n      this.isInitialized(), this.messages.delete(s), await this.persist();\n    }, this.logger = ee.generateChildLogger(e, this.name), this.core = t;\n  }\n  get context() {\n    return ee.getLoggerContext(this.logger);\n  }\n  get storageKey() {\n    return this.storagePrefix + this.version + \"//\" + this.name;\n  }\n  async setRelayerMessages(e) {\n    await this.core.storage.setItem(this.storageKey, Lc(e));\n  }\n  async getRelayerMessages() {\n    const e = await this.core.storage.getItem(this.storageKey);\n    return typeof e < \"u\" ? Mc(e) : void 0;\n  }\n  async persist() {\n    await this.setRelayerMessages(this.messages);\n  }\n  isInitialized() {\n    if (!this.initialized) {\n      const { message: e } = Y(\"NOT_INITIALIZED\", this.name);\n      throw new Error(e);\n    }\n  }\n}, L1 = class extends yl {\n  constructor(e, t) {\n    super(e, t), this.relayer = e, this.logger = t, this.events = new We.EventEmitter(), this.name = y1, this.queue = /* @__PURE__ */ new Map(), this.publishTimeout = V.toMiliseconds(V.TEN_SECONDS), this.needsTransportRestart = !1, this.publish = async (s, r, n) => {\n      var o;\n      this.logger.debug(\"Publishing Payload\"), this.logger.trace({ type: \"method\", method: \"publish\", params: { topic: s, message: r, opts: n } });\n      try {\n        const c = n?.ttl || g1, u = Gr(n), d = n?.prompt || !1, p = n?.tag || 0, b = n?.id || vn().toString(), x = { topic: s, message: r, opts: { ttl: c, relay: u, prompt: d, tag: p, id: b } }, O = setTimeout(() => this.queue.set(b, x), this.publishTimeout);\n        try {\n          await await ds(this.rpcPublish(s, r, c, u, d, p, b), this.publishTimeout, \"Failed to publish payload, please try again.\"), this.removeRequestFromQueue(b), this.relayer.events.emit(gt.publish, x);\n        } catch (_) {\n          if (this.logger.debug(\"Publishing Payload stalled\"), this.needsTransportRestart = !0, (o = n?.internal) != null && o.throwOnFailedPublish)\n            throw this.removeRequestFromQueue(b), _;\n          return;\n        } finally {\n          clearTimeout(O);\n        }\n        this.logger.debug(\"Successfully Published Payload\"), this.logger.trace({ type: \"method\", method: \"publish\", params: { topic: s, message: r, opts: n } });\n      } catch (c) {\n        throw this.logger.debug(\"Failed to Publish Payload\"), this.logger.error(c), c;\n      }\n    }, this.on = (s, r) => {\n      this.events.on(s, r);\n    }, this.once = (s, r) => {\n      this.events.once(s, r);\n    }, this.off = (s, r) => {\n      this.events.off(s, r);\n    }, this.removeListener = (s, r) => {\n      this.events.removeListener(s, r);\n    }, this.relayer = e, this.logger = ee.generateChildLogger(t, this.name), this.registerEventListeners();\n  }\n  get context() {\n    return ee.getLoggerContext(this.logger);\n  }\n  rpcPublish(e, t, s, r, n, o, c) {\n    var u, d, p, b;\n    const x = { method: js(r.protocol).publish, params: { topic: e, message: t, ttl: s, prompt: n, tag: o }, id: c };\n    return bt((u = x.params) == null ? void 0 : u.prompt) && ((d = x.params) == null || delete d.prompt), bt((p = x.params) == null ? void 0 : p.tag) && ((b = x.params) == null || delete b.tag), this.logger.debug(\"Outgoing Relay Payload\"), this.logger.trace({ type: \"message\", direction: \"outgoing\", request: x }), this.relayer.request(x);\n  }\n  removeRequestFromQueue(e) {\n    this.queue.delete(e);\n  }\n  checkQueue() {\n    this.queue.forEach(async (e) => {\n      const { topic: t, message: s, opts: r } = e;\n      await this.publish(t, s, r);\n    });\n  }\n  registerEventListeners() {\n    this.relayer.core.heartbeat.on(Wt.HEARTBEAT_EVENTS.pulse, () => {\n      if (this.needsTransportRestart) {\n        this.needsTransportRestart = !1, this.relayer.events.emit(gt.connection_stalled);\n        return;\n      }\n      this.checkQueue();\n    }), this.relayer.on(gt.message_ack, (e) => {\n      this.removeRequestFromQueue(e.id.toString());\n    });\n  }\n}, M1 = class {\n  constructor() {\n    this.map = /* @__PURE__ */ new Map(), this.set = (e, t) => {\n      const s = this.get(e);\n      this.exists(e, t) || this.map.set(e, [...s, t]);\n    }, this.get = (e) => this.map.get(e) || [], this.exists = (e, t) => this.get(e).includes(t), this.delete = (e, t) => {\n      if (typeof t > \"u\") {\n        this.map.delete(e);\n        return;\n      }\n      if (!this.map.has(e))\n        return;\n      const s = this.get(e);\n      if (!this.exists(e, t))\n        return;\n      const r = s.filter((n) => n !== t);\n      if (!r.length) {\n        this.map.delete(e);\n        return;\n      }\n      this.map.set(e, r);\n    }, this.clear = () => {\n      this.map.clear();\n    };\n  }\n  get topics() {\n    return Array.from(this.map.keys());\n  }\n};\nvar q1 = Object.defineProperty, j1 = Object.defineProperties, z1 = Object.getOwnPropertyDescriptors, ia = Object.getOwnPropertySymbols, K1 = Object.prototype.hasOwnProperty, V1 = Object.prototype.propertyIsEnumerable, sa = (i, e, t) => e in i ? q1(i, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : i[e] = t, Zi = (i, e) => {\n  for (var t in e || (e = {}))\n    K1.call(e, t) && sa(i, t, e[t]);\n  if (ia)\n    for (var t of ia(e))\n      V1.call(e, t) && sa(i, t, e[t]);\n  return i;\n}, Pr = (i, e) => j1(i, z1(e));\nlet B1 = class extends wl {\n  constructor(e, t) {\n    super(e, t), this.relayer = e, this.logger = t, this.subscriptions = /* @__PURE__ */ new Map(), this.topicMap = new M1(), this.events = new We.EventEmitter(), this.name = D1, this.version = x1, this.pending = /* @__PURE__ */ new Map(), this.cached = [], this.initialized = !1, this.pendingSubscriptionWatchLabel = \"pending_sub_watch_label\", this.pollingInterval = 20, this.storagePrefix = hi, this.subscribeTimeout = 1e4, this.restartInProgress = !1, this.batchSubscribeTopicsLimit = 500, this.init = async () => {\n      this.initialized || (this.logger.trace(\"Initialized\"), this.registerEventListeners(), this.clientId = await this.relayer.core.crypto.getClientId());\n    }, this.subscribe = async (s, r) => {\n      await this.restartToComplete(), this.isInitialized(), this.logger.debug(\"Subscribing Topic\"), this.logger.trace({ type: \"method\", method: \"subscribe\", params: { topic: s, opts: r } });\n      try {\n        const n = Gr(r), o = { topic: s, relay: n };\n        this.pending.set(s, o);\n        const c = await this.rpcSubscribe(s, n);\n        return this.onSubscribe(c, o), this.logger.debug(\"Successfully Subscribed Topic\"), this.logger.trace({ type: \"method\", method: \"subscribe\", params: { topic: s, opts: r } }), c;\n      } catch (n) {\n        throw this.logger.debug(\"Failed to Subscribe Topic\"), this.logger.error(n), n;\n      }\n    }, this.unsubscribe = async (s, r) => {\n      await this.restartToComplete(), this.isInitialized(), typeof r?.id < \"u\" ? await this.unsubscribeById(s, r.id, r) : await this.unsubscribeByTopic(s, r);\n    }, this.isSubscribed = async (s) => this.topics.includes(s) ? !0 : await new Promise((r, n) => {\n      const o = new V.Watch();\n      o.start(this.pendingSubscriptionWatchLabel);\n      const c = setInterval(() => {\n        !this.pending.has(s) && this.topics.includes(s) && (clearInterval(c), o.stop(this.pendingSubscriptionWatchLabel), r(!0)), o.elapsed(this.pendingSubscriptionWatchLabel) >= O1 && (clearInterval(c), o.stop(this.pendingSubscriptionWatchLabel), n(new Error(\"Subscription resolution timeout\")));\n      }, this.pollingInterval);\n    }).catch(() => !1), this.on = (s, r) => {\n      this.events.on(s, r);\n    }, this.once = (s, r) => {\n      this.events.once(s, r);\n    }, this.off = (s, r) => {\n      this.events.off(s, r);\n    }, this.removeListener = (s, r) => {\n      this.events.removeListener(s, r);\n    }, this.restart = async () => {\n      this.restartInProgress = !0, await this.restore(), await this.reset(), this.restartInProgress = !1;\n    }, this.relayer = e, this.logger = ee.generateChildLogger(t, this.name), this.clientId = \"\";\n  }\n  get context() {\n    return ee.getLoggerContext(this.logger);\n  }\n  get storageKey() {\n    return this.storagePrefix + this.version + \"//\" + this.name;\n  }\n  get length() {\n    return this.subscriptions.size;\n  }\n  get ids() {\n    return Array.from(this.subscriptions.keys());\n  }\n  get values() {\n    return Array.from(this.subscriptions.values());\n  }\n  get topics() {\n    return this.topicMap.topics;\n  }\n  hasSubscription(e, t) {\n    let s = !1;\n    try {\n      s = this.getSubscription(e).topic === t;\n    } catch {\n    }\n    return s;\n  }\n  onEnable() {\n    this.cached = [], this.initialized = !0;\n  }\n  onDisable() {\n    this.cached = this.values, this.subscriptions.clear(), this.topicMap.clear();\n  }\n  async unsubscribeByTopic(e, t) {\n    const s = this.topicMap.get(e);\n    await Promise.all(s.map(async (r) => await this.unsubscribeById(e, r, t)));\n  }\n  async unsubscribeById(e, t, s) {\n    this.logger.debug(\"Unsubscribing Topic\"), this.logger.trace({ type: \"method\", method: \"unsubscribe\", params: { topic: e, id: t, opts: s } });\n    try {\n      const r = Gr(s);\n      await this.rpcUnsubscribe(e, t, r);\n      const n = nt(\"USER_DISCONNECTED\", `${this.name}, ${e}`);\n      await this.onUnsubscribe(e, t, n), this.logger.debug(\"Successfully Unsubscribed Topic\"), this.logger.trace({ type: \"method\", method: \"unsubscribe\", params: { topic: e, id: t, opts: s } });\n    } catch (r) {\n      throw this.logger.debug(\"Failed to Unsubscribe Topic\"), this.logger.error(r), r;\n    }\n  }\n  async rpcSubscribe(e, t) {\n    const s = { method: js(t.protocol).subscribe, params: { topic: e } };\n    this.logger.debug(\"Outgoing Relay Payload\"), this.logger.trace({ type: \"payload\", direction: \"outgoing\", request: s });\n    try {\n      await await ds(this.relayer.request(s), this.subscribeTimeout);\n    } catch {\n      this.logger.debug(\"Outgoing Relay Subscribe Payload stalled\"), this.relayer.events.emit(gt.connection_stalled);\n    }\n    return Fi(e + this.clientId);\n  }\n  async rpcBatchSubscribe(e) {\n    if (!e.length)\n      return;\n    const t = e[0].relay, s = { method: js(t.protocol).batchSubscribe, params: { topics: e.map((r) => r.topic) } };\n    this.logger.debug(\"Outgoing Relay Payload\"), this.logger.trace({ type: \"payload\", direction: \"outgoing\", request: s });\n    try {\n      return await await ds(this.relayer.request(s), this.subscribeTimeout);\n    } catch {\n      this.logger.debug(\"Outgoing Relay Payload stalled\"), this.relayer.events.emit(gt.connection_stalled);\n    }\n  }\n  rpcUnsubscribe(e, t, s) {\n    const r = { method: js(s.protocol).unsubscribe, params: { topic: e, id: t } };\n    return this.logger.debug(\"Outgoing Relay Payload\"), this.logger.trace({ type: \"payload\", direction: \"outgoing\", request: r }), this.relayer.request(r);\n  }\n  onSubscribe(e, t) {\n    this.setSubscription(e, Pr(Zi({}, t), { id: e })), this.pending.delete(t.topic);\n  }\n  onBatchSubscribe(e) {\n    e.length && e.forEach((t) => {\n      this.setSubscription(t.id, Zi({}, t)), this.pending.delete(t.topic);\n    });\n  }\n  async onUnsubscribe(e, t, s) {\n    this.events.removeAllListeners(t), this.hasSubscription(t, e) && this.deleteSubscription(t, s), await this.relayer.messages.del(e);\n  }\n  async setRelayerSubscriptions(e) {\n    await this.relayer.core.storage.setItem(this.storageKey, e);\n  }\n  async getRelayerSubscriptions() {\n    return await this.relayer.core.storage.getItem(this.storageKey);\n  }\n  setSubscription(e, t) {\n    this.subscriptions.has(e) || (this.logger.debug(\"Setting subscription\"), this.logger.trace({ type: \"method\", method: \"setSubscription\", id: e, subscription: t }), this.addSubscription(e, t));\n  }\n  addSubscription(e, t) {\n    this.subscriptions.set(e, Zi({}, t)), this.topicMap.set(t.topic, e), this.events.emit(Vt.created, t);\n  }\n  getSubscription(e) {\n    this.logger.debug(\"Getting subscription\"), this.logger.trace({ type: \"method\", method: \"getSubscription\", id: e });\n    const t = this.subscriptions.get(e);\n    if (!t) {\n      const { message: s } = Y(\"NO_MATCHING_KEY\", `${this.name}: ${e}`);\n      throw new Error(s);\n    }\n    return t;\n  }\n  deleteSubscription(e, t) {\n    this.logger.debug(\"Deleting subscription\"), this.logger.trace({ type: \"method\", method: \"deleteSubscription\", id: e, reason: t });\n    const s = this.getSubscription(e);\n    this.subscriptions.delete(e), this.topicMap.delete(s.topic, e), this.events.emit(Vt.deleted, Pr(Zi({}, s), { reason: t }));\n  }\n  async persist() {\n    await this.setRelayerSubscriptions(this.values), this.events.emit(Vt.sync);\n  }\n  async reset() {\n    if (this.cached.length) {\n      const e = Math.ceil(this.cached.length / this.batchSubscribeTopicsLimit);\n      for (let t = 0; t < e; t++) {\n        const s = this.cached.splice(0, this.batchSubscribeTopicsLimit);\n        await this.batchSubscribe(s);\n      }\n    }\n    this.events.emit(Vt.resubscribed);\n  }\n  async restore() {\n    try {\n      const e = await this.getRelayerSubscriptions();\n      if (typeof e > \"u\" || !e.length)\n        return;\n      if (this.subscriptions.size) {\n        const { message: t } = Y(\"RESTORE_WILL_OVERRIDE\", this.name);\n        throw this.logger.error(t), this.logger.error(`${this.name}: ${JSON.stringify(this.values)}`), new Error(t);\n      }\n      this.cached = e, this.logger.debug(`Successfully Restored subscriptions for ${this.name}`), this.logger.trace({ type: \"method\", method: \"restore\", subscriptions: this.values });\n    } catch (e) {\n      this.logger.debug(`Failed to Restore subscriptions for ${this.name}`), this.logger.error(e);\n    }\n  }\n  async batchSubscribe(e) {\n    if (!e.length)\n      return;\n    const t = await this.rpcBatchSubscribe(e);\n    Es(t) && this.onBatchSubscribe(t.map((s, r) => Pr(Zi({}, e[r]), { id: s })));\n  }\n  async onConnect() {\n    this.restartInProgress || (await this.restart(), this.onEnable());\n  }\n  onDisconnect() {\n    this.onDisable();\n  }\n  async checkPending() {\n    if (!this.initialized || this.relayer.transportExplicitlyClosed)\n      return;\n    const e = [];\n    this.pending.forEach((t) => {\n      e.push(t);\n    }), await this.batchSubscribe(e);\n  }\n  registerEventListeners() {\n    this.relayer.core.heartbeat.on(Wt.HEARTBEAT_EVENTS.pulse, async () => {\n      await this.checkPending();\n    }), this.relayer.on(gt.connect, async () => {\n      await this.onConnect();\n    }), this.relayer.on(gt.disconnect, () => {\n      this.onDisconnect();\n    }), this.events.on(Vt.created, async (e) => {\n      const t = Vt.created;\n      this.logger.info(`Emitting ${t}`), this.logger.debug({ type: \"event\", event: t, data: e }), await this.persist();\n    }), this.events.on(Vt.deleted, async (e) => {\n      const t = Vt.deleted;\n      this.logger.info(`Emitting ${t}`), this.logger.debug({ type: \"event\", event: t, data: e }), await this.persist();\n    });\n  }\n  isInitialized() {\n    if (!this.initialized) {\n      const { message: e } = Y(\"NOT_INITIALIZED\", this.name);\n      throw new Error(e);\n    }\n  }\n  async restartToComplete() {\n    this.restartInProgress && await new Promise((e) => {\n      const t = setInterval(() => {\n        this.restartInProgress || (clearInterval(t), e());\n      }, this.pollingInterval);\n    });\n  }\n};\nvar k1 = Object.defineProperty, ra = Object.getOwnPropertySymbols, H1 = Object.prototype.hasOwnProperty, G1 = Object.prototype.propertyIsEnumerable, na = (i, e, t) => e in i ? k1(i, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : i[e] = t, W1 = (i, e) => {\n  for (var t in e || (e = {}))\n    H1.call(e, t) && na(i, t, e[t]);\n  if (ra)\n    for (var t of ra(e))\n      G1.call(e, t) && na(i, t, e[t]);\n  return i;\n};\nlet Y1 = class extends ml {\n  constructor(e) {\n    super(e), this.protocol = \"wc\", this.version = 2, this.events = new We.EventEmitter(), this.name = b1, this.transportExplicitlyClosed = !1, this.initialized = !1, this.connectionAttemptInProgress = !1, this.connectionStatusPollingInterval = 20, this.staleConnectionErrors = [\"socket hang up\", \"socket stalled\"], this.hasExperiencedNetworkDisruption = !1, this.request = async (t) => {\n      this.logger.debug(\"Publishing Request Payload\");\n      try {\n        return await this.toEstablishConnection(), await this.provider.request(t);\n      } catch (s) {\n        throw this.logger.debug(\"Failed to Publish Request\"), this.logger.error(s), s;\n      }\n    }, this.onPayloadHandler = (t) => {\n      this.onProviderPayload(t);\n    }, this.onConnectHandler = () => {\n      this.events.emit(gt.connect);\n    }, this.onDisconnectHandler = () => {\n      this.onProviderDisconnect();\n    }, this.onProviderErrorHandler = (t) => {\n      this.logger.error(t), this.events.emit(gt.error, t), this.logger.info(\"Fatal socket error received, closing transport\"), this.transportClose();\n    }, this.registerProviderListeners = () => {\n      this.provider.on(Zt.payload, this.onPayloadHandler), this.provider.on(Zt.connect, this.onConnectHandler), this.provider.on(Zt.disconnect, this.onDisconnectHandler), this.provider.on(Zt.error, this.onProviderErrorHandler);\n    }, this.core = e.core, this.logger = typeof e.logger < \"u\" && typeof e.logger != \"string\" ? ee.generateChildLogger(e.logger, this.name) : ee.pino(ee.getDefaultLoggerOptions({ level: e.logger || m1 })), this.messages = new U1(this.logger, e.core), this.subscriber = new B1(this, this.logger), this.publisher = new L1(this, this.logger), this.relayUrl = e?.relayUrl || hh, this.projectId = e.projectId, this.provider = {};\n  }\n  async init() {\n    this.logger.trace(\"Initialized\"), this.registerEventListeners(), await this.createProvider(), await Promise.all([this.messages.init(), this.subscriber.init()]);\n    try {\n      await this.transportOpen();\n    } catch {\n      this.logger.warn(`Connection via ${this.relayUrl} failed, attempting to connect via failover domain ${ea}...`), await this.restartTransport(ea);\n    }\n    this.initialized = !0, setTimeout(async () => {\n      this.subscriber.topics.length === 0 && (this.logger.info(\"No topics subscribed to after init, closing transport\"), await this.transportClose(), this.transportExplicitlyClosed = !1);\n    }, E1);\n  }\n  get context() {\n    return ee.getLoggerContext(this.logger);\n  }\n  get connected() {\n    return this.provider.connection.connected;\n  }\n  get connecting() {\n    return this.provider.connection.connecting;\n  }\n  async publish(e, t, s) {\n    this.isInitialized(), await this.publisher.publish(e, t, s), await this.recordMessageEvent({ topic: e, message: t, publishedAt: Date.now() });\n  }\n  async subscribe(e, t) {\n    var s;\n    this.isInitialized();\n    let r = ((s = this.subscriber.topicMap.get(e)) == null ? void 0 : s[0]) || \"\";\n    return r || (await Promise.all([new Promise((n) => {\n      this.subscriber.once(Vt.created, (o) => {\n        o.topic === e && n();\n      });\n    }), new Promise(async (n) => {\n      r = await this.subscriber.subscribe(e, t), n();\n    })]), r);\n  }\n  async unsubscribe(e, t) {\n    this.isInitialized(), await this.subscriber.unsubscribe(e, t);\n  }\n  on(e, t) {\n    this.events.on(e, t);\n  }\n  once(e, t) {\n    this.events.once(e, t);\n  }\n  off(e, t) {\n    this.events.off(e, t);\n  }\n  removeListener(e, t) {\n    this.events.removeListener(e, t);\n  }\n  async transportClose() {\n    this.transportExplicitlyClosed = !0, this.hasExperiencedNetworkDisruption && this.connected ? await ds(this.provider.disconnect(), 1e3, \"provider.disconnect()\").catch(() => this.onProviderDisconnect()) : this.connected && await this.provider.disconnect();\n  }\n  async transportOpen(e) {\n    if (this.transportExplicitlyClosed = !1, await this.confirmOnlineStateOrThrow(), !this.connectionAttemptInProgress) {\n      e && e !== this.relayUrl && (this.relayUrl = e, await this.transportClose(), await this.createProvider()), this.connectionAttemptInProgress = !0;\n      try {\n        await Promise.all([new Promise((t) => {\n          if (!this.initialized)\n            return t();\n          this.subscriber.once(Vt.resubscribed, () => {\n            t();\n          });\n        }), new Promise(async (t, s) => {\n          try {\n            await ds(this.provider.connect(), 1e4, `Socket stalled when trying to connect to ${this.relayUrl}`);\n          } catch (r) {\n            s(r);\n            return;\n          }\n          t();\n        })]);\n      } catch (t) {\n        this.logger.error(t);\n        const s = t;\n        if (!this.isConnectionStalled(s.message))\n          throw t;\n        this.provider.events.emit(Zt.disconnect);\n      } finally {\n        this.connectionAttemptInProgress = !1, this.hasExperiencedNetworkDisruption = !1;\n      }\n    }\n  }\n  async restartTransport(e) {\n    await this.confirmOnlineStateOrThrow(), !this.connectionAttemptInProgress && (this.relayUrl = e || this.relayUrl, await this.transportClose(), await this.createProvider(), await this.transportOpen());\n  }\n  async confirmOnlineStateOrThrow() {\n    if (!await jo())\n      throw new Error(\"No internet connection detected. Please restart your network and try again.\");\n  }\n  isConnectionStalled(e) {\n    return this.staleConnectionErrors.some((t) => e.includes(t));\n  }\n  async createProvider() {\n    this.provider.connection && this.unregisterProviderListeners();\n    const e = await this.core.crypto.signJWT(this.relayUrl);\n    this.provider = new _n(new Wc(wp({ sdkVersion: _1, protocol: this.protocol, version: this.version, relayUrl: this.relayUrl, projectId: this.projectId, auth: e, useOnCloseEvent: !0 }))), this.registerProviderListeners();\n  }\n  async recordMessageEvent(e) {\n    const { topic: t, message: s } = e;\n    await this.messages.set(t, s);\n  }\n  async shouldIgnoreMessageEvent(e) {\n    const { topic: t, message: s } = e;\n    if (!s || s.length === 0)\n      return this.logger.debug(`Ignoring invalid/empty message: ${s}`), !0;\n    if (!await this.subscriber.isSubscribed(t))\n      return this.logger.debug(`Ignoring message for non-subscribed topic ${t}`), !0;\n    const r = this.messages.has(t, s);\n    return r && this.logger.debug(`Ignoring duplicate message: ${s}`), r;\n  }\n  async onProviderPayload(e) {\n    if (this.logger.debug(\"Incoming Relay Payload\"), this.logger.trace({ type: \"payload\", direction: \"incoming\", payload: e }), ji(e)) {\n      if (!e.method.endsWith(w1))\n        return;\n      const t = e.params, { topic: s, message: r, publishedAt: n } = t.data, o = { topic: s, message: r, publishedAt: n };\n      this.logger.debug(\"Emitting Relayer Payload\"), this.logger.trace(W1({ type: \"event\", event: t.id }, o)), this.events.emit(t.id, o), await this.acknowledgePayload(e), await this.onMessageEvent(o);\n    } else\n      Oi(e) && this.events.emit(gt.message_ack, e);\n  }\n  async onMessageEvent(e) {\n    await this.shouldIgnoreMessageEvent(e) || (this.events.emit(gt.message, e), await this.recordMessageEvent(e));\n  }\n  async acknowledgePayload(e) {\n    const t = xi(e.id, !0);\n    await this.provider.connection.send(t);\n  }\n  unregisterProviderListeners() {\n    this.provider.off(Zt.payload, this.onPayloadHandler), this.provider.off(Zt.connect, this.onConnectHandler), this.provider.off(Zt.disconnect, this.onDisconnectHandler), this.provider.off(Zt.error, this.onProviderErrorHandler);\n  }\n  async registerEventListeners() {\n    this.events.on(gt.connection_stalled, () => {\n      this.restartTransport().catch((t) => this.logger.error(t));\n    });\n    let e = await jo();\n    lg(async (t) => {\n      this.initialized && e !== t && (e = t, t ? await this.restartTransport().catch((s) => this.logger.error(s)) : (this.hasExperiencedNetworkDisruption = !0, await this.transportClose().catch((s) => this.logger.error(s))));\n    });\n  }\n  onProviderDisconnect() {\n    this.events.emit(gt.disconnect), this.attemptToReconnect();\n  }\n  attemptToReconnect() {\n    this.transportExplicitlyClosed || (this.logger.info(\"attemptToReconnect called. Connecting...\"), setTimeout(async () => {\n      await this.restartTransport().catch((e) => this.logger.error(e));\n    }, V.toMiliseconds(v1)));\n  }\n  isInitialized() {\n    if (!this.initialized) {\n      const { message: e } = Y(\"NOT_INITIALIZED\", this.name);\n      throw new Error(e);\n    }\n  }\n  async toEstablishConnection() {\n    if (await this.confirmOnlineStateOrThrow(), !this.connected) {\n      if (this.connectionAttemptInProgress)\n        return await new Promise((e) => {\n          const t = setInterval(() => {\n            this.connected && (clearInterval(t), e());\n          }, this.connectionStatusPollingInterval);\n        });\n      await this.restartTransport();\n    }\n  }\n};\nvar J1 = Object.defineProperty, oa = Object.getOwnPropertySymbols, Q1 = Object.prototype.hasOwnProperty, X1 = Object.prototype.propertyIsEnumerable, aa = (i, e, t) => e in i ? J1(i, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : i[e] = t, ca = (i, e) => {\n  for (var t in e || (e = {}))\n    Q1.call(e, t) && aa(i, t, e[t]);\n  if (oa)\n    for (var t of oa(e))\n      X1.call(e, t) && aa(i, t, e[t]);\n  return i;\n};\nlet dr = class extends bl {\n  constructor(e, t, s, r = hi, n = void 0) {\n    super(e, t, s, r), this.core = e, this.logger = t, this.name = s, this.map = /* @__PURE__ */ new Map(), this.version = S1, this.cached = [], this.initialized = !1, this.storagePrefix = hi, this.init = async () => {\n      this.initialized || (this.logger.trace(\"Initialized\"), await this.restore(), this.cached.forEach((o) => {\n        this.getKey && o !== null && !bt(o) ? this.map.set(this.getKey(o), o) : Kp(o) ? this.map.set(o.id, o) : Vp(o) && this.map.set(o.topic, o);\n      }), this.cached = [], this.initialized = !0);\n    }, this.set = async (o, c) => {\n      this.isInitialized(), this.map.has(o) ? await this.update(o, c) : (this.logger.debug(\"Setting value\"), this.logger.trace({ type: \"method\", method: \"set\", key: o, value: c }), this.map.set(o, c), await this.persist());\n    }, this.get = (o) => (this.isInitialized(), this.logger.debug(\"Getting value\"), this.logger.trace({ type: \"method\", method: \"get\", key: o }), this.getData(o)), this.getAll = (o) => (this.isInitialized(), o ? this.values.filter((c) => Object.keys(o).every((u) => Yc(c[u], o[u]))) : this.values), this.update = async (o, c) => {\n      this.isInitialized(), this.logger.debug(\"Updating value\"), this.logger.trace({ type: \"method\", method: \"update\", key: o, update: c });\n      const u = ca(ca({}, this.getData(o)), c);\n      this.map.set(o, u), await this.persist();\n    }, this.delete = async (o, c) => {\n      this.isInitialized(), this.map.has(o) && (this.logger.debug(\"Deleting value\"), this.logger.trace({ type: \"method\", method: \"delete\", key: o, reason: c }), this.map.delete(o), await this.persist());\n    }, this.logger = ee.generateChildLogger(t, this.name), this.storagePrefix = r, this.getKey = n;\n  }\n  get context() {\n    return ee.getLoggerContext(this.logger);\n  }\n  get storageKey() {\n    return this.storagePrefix + this.version + \"//\" + this.name;\n  }\n  get length() {\n    return this.map.size;\n  }\n  get keys() {\n    return Array.from(this.map.keys());\n  }\n  get values() {\n    return Array.from(this.map.values());\n  }\n  async setDataStore(e) {\n    await this.core.storage.setItem(this.storageKey, e);\n  }\n  async getDataStore() {\n    return await this.core.storage.getItem(this.storageKey);\n  }\n  getData(e) {\n    const t = this.map.get(e);\n    if (!t) {\n      const { message: s } = Y(\"NO_MATCHING_KEY\", `${this.name}: ${e}`);\n      throw this.logger.error(s), new Error(s);\n    }\n    return t;\n  }\n  async persist() {\n    await this.setDataStore(this.values);\n  }\n  async restore() {\n    try {\n      const e = await this.getDataStore();\n      if (typeof e > \"u\" || !e.length)\n        return;\n      if (this.map.size) {\n        const { message: t } = Y(\"RESTORE_WILL_OVERRIDE\", this.name);\n        throw this.logger.error(t), new Error(t);\n      }\n      this.cached = e, this.logger.debug(`Successfully Restored value for ${this.name}`), this.logger.trace({ type: \"method\", method: \"restore\", value: this.values });\n    } catch (e) {\n      this.logger.debug(`Failed to Restore value for ${this.name}`), this.logger.error(e);\n    }\n  }\n  isInitialized() {\n    if (!this.initialized) {\n      const { message: e } = Y(\"NOT_INITIALIZED\", this.name);\n      throw new Error(e);\n    }\n  }\n}, Z1 = class {\n  constructor(e, t) {\n    this.core = e, this.logger = t, this.name = N1, this.version = P1, this.events = new ir(), this.initialized = !1, this.storagePrefix = hi, this.ignoredPayloadTypes = [Di], this.registeredMethods = [], this.init = async () => {\n      this.initialized || (await this.pairings.init(), await this.cleanup(), this.registerRelayerEvents(), this.registerExpirerEvents(), this.initialized = !0, this.logger.trace(\"Initialized\"));\n    }, this.register = ({ methods: s }) => {\n      this.isInitialized(), this.registeredMethods = [.../* @__PURE__ */ new Set([...this.registeredMethods, ...s])];\n    }, this.create = async () => {\n      this.isInitialized();\n      const s = Hr(), r = await this.core.crypto.setSymKey(s), n = Mt(V.FIVE_MINUTES), o = { protocol: ch }, c = { topic: r, expiry: n, relay: o, active: !1 }, u = Ap({ protocol: this.core.protocol, version: this.core.version, topic: r, symKey: s, relay: o });\n      return await this.pairings.set(r, c), await this.core.relayer.subscribe(r), this.core.expirer.set(r, n), { topic: r, uri: u };\n    }, this.pair = async (s) => {\n      this.isInitialized(), this.isValidPair(s);\n      const { topic: r, symKey: n, relay: o } = Pp(s.uri);\n      let c;\n      if (this.pairings.keys.includes(r) && (c = this.pairings.get(r), c.active))\n        throw new Error(`Pairing already exists: ${r}. Please try again with a new connection URI.`);\n      this.core.crypto.keychain.has(r) || (await this.core.crypto.setSymKey(n, r), await this.core.relayer.subscribe(r, { relay: o }));\n      const u = Mt(V.FIVE_MINUTES), d = { topic: r, relay: o, expiry: u, active: !1 };\n      return await this.pairings.set(r, d), this.core.expirer.set(r, u), s.activatePairing && await this.activate({ topic: r }), this.events.emit(os.create, d), d;\n    }, this.activate = async ({ topic: s }) => {\n      this.isInitialized();\n      const r = Mt(V.THIRTY_DAYS);\n      await this.pairings.update(s, { active: !0, expiry: r }), this.core.expirer.set(s, r);\n    }, this.ping = async (s) => {\n      this.isInitialized(), await this.isValidPing(s);\n      const { topic: r } = s;\n      if (this.pairings.keys.includes(r)) {\n        const n = await this.sendRequest(r, \"wc_pairingPing\", {}), { done: o, resolve: c, reject: u } = Ai();\n        this.events.once(Be(\"pairing_ping\", n), ({ error: d }) => {\n          d ? u(d) : c();\n        }), await o();\n      }\n    }, this.updateExpiry = async ({ topic: s, expiry: r }) => {\n      this.isInitialized(), await this.pairings.update(s, { expiry: r });\n    }, this.updateMetadata = async ({ topic: s, metadata: r }) => {\n      this.isInitialized(), await this.pairings.update(s, { peerMetadata: r });\n    }, this.getPairings = () => (this.isInitialized(), this.pairings.values), this.disconnect = async (s) => {\n      this.isInitialized(), await this.isValidDisconnect(s);\n      const { topic: r } = s;\n      this.pairings.keys.includes(r) && (await this.sendRequest(r, \"wc_pairingDelete\", nt(\"USER_DISCONNECTED\")), await this.deletePairing(r));\n    }, this.sendRequest = async (s, r, n) => {\n      const o = ti(r, n), c = await this.core.crypto.encode(s, o), u = Xi[r].req;\n      return this.core.history.set(s, o), this.core.relayer.publish(s, c, u), o.id;\n    }, this.sendResult = async (s, r, n) => {\n      const o = xi(s, n), c = await this.core.crypto.encode(r, o), u = await this.core.history.get(r, s), d = Xi[u.request.method].res;\n      await this.core.relayer.publish(r, c, d), await this.core.history.resolve(o);\n    }, this.sendError = async (s, r, n) => {\n      const o = qi(s, n), c = await this.core.crypto.encode(r, o), u = await this.core.history.get(r, s), d = Xi[u.request.method] ? Xi[u.request.method].res : Xi.unregistered_method.res;\n      await this.core.relayer.publish(r, c, d), await this.core.history.resolve(o);\n    }, this.deletePairing = async (s, r) => {\n      await this.core.relayer.unsubscribe(s), await Promise.all([this.pairings.delete(s, nt(\"USER_DISCONNECTED\")), this.core.crypto.deleteSymKey(s), r ? Promise.resolve() : this.core.expirer.del(s)]);\n    }, this.cleanup = async () => {\n      const s = this.pairings.getAll().filter((r) => ai(r.expiry));\n      await Promise.all(s.map((r) => this.deletePairing(r.topic)));\n    }, this.onRelayEventRequest = (s) => {\n      const { topic: r, payload: n } = s;\n      switch (n.method) {\n        case \"wc_pairingPing\":\n          return this.onPairingPingRequest(r, n);\n        case \"wc_pairingDelete\":\n          return this.onPairingDeleteRequest(r, n);\n        default:\n          return this.onUnknownRpcMethodRequest(r, n);\n      }\n    }, this.onRelayEventResponse = async (s) => {\n      const { topic: r, payload: n } = s, o = (await this.core.history.get(r, n.id)).request.method;\n      switch (o) {\n        case \"wc_pairingPing\":\n          return this.onPairingPingResponse(r, n);\n        default:\n          return this.onUnknownRpcMethodResponse(o);\n      }\n    }, this.onPairingPingRequest = async (s, r) => {\n      const { id: n } = r;\n      try {\n        this.isValidPing({ topic: s }), await this.sendResult(n, s, !0), this.events.emit(os.ping, { id: n, topic: s });\n      } catch (o) {\n        await this.sendError(n, s, o), this.logger.error(o);\n      }\n    }, this.onPairingPingResponse = (s, r) => {\n      const { id: n } = r;\n      setTimeout(() => {\n        ht(r) ? this.events.emit(Be(\"pairing_ping\", n), {}) : Ge(r) && this.events.emit(Be(\"pairing_ping\", n), { error: r.error });\n      }, 500);\n    }, this.onPairingDeleteRequest = async (s, r) => {\n      const { id: n } = r;\n      try {\n        this.isValidDisconnect({ topic: s }), await this.deletePairing(s), this.events.emit(os.delete, { id: n, topic: s });\n      } catch (o) {\n        await this.sendError(n, s, o), this.logger.error(o);\n      }\n    }, this.onUnknownRpcMethodRequest = async (s, r) => {\n      const { id: n, method: o } = r;\n      try {\n        if (this.registeredMethods.includes(o))\n          return;\n        const c = nt(\"WC_METHOD_UNSUPPORTED\", o);\n        await this.sendError(n, s, c), this.logger.error(c);\n      } catch (c) {\n        await this.sendError(n, s, c), this.logger.error(c);\n      }\n    }, this.onUnknownRpcMethodResponse = (s) => {\n      this.registeredMethods.includes(s) || this.logger.error(nt(\"WC_METHOD_UNSUPPORTED\", s));\n    }, this.isValidPair = (s) => {\n      if (!St(s)) {\n        const { message: r } = Y(\"MISSING_OR_INVALID\", `pair() params: ${s}`);\n        throw new Error(r);\n      }\n      if (!zp(s.uri)) {\n        const { message: r } = Y(\"MISSING_OR_INVALID\", `pair() uri: ${s.uri}`);\n        throw new Error(r);\n      }\n    }, this.isValidPing = async (s) => {\n      if (!St(s)) {\n        const { message: n } = Y(\"MISSING_OR_INVALID\", `ping() params: ${s}`);\n        throw new Error(n);\n      }\n      const { topic: r } = s;\n      await this.isValidPairingTopic(r);\n    }, this.isValidDisconnect = async (s) => {\n      if (!St(s)) {\n        const { message: n } = Y(\"MISSING_OR_INVALID\", `disconnect() params: ${s}`);\n        throw new Error(n);\n      }\n      const { topic: r } = s;\n      await this.isValidPairingTopic(r);\n    }, this.isValidPairingTopic = async (s) => {\n      if (!ot(s, !1)) {\n        const { message: r } = Y(\"MISSING_OR_INVALID\", `pairing topic should be a string: ${s}`);\n        throw new Error(r);\n      }\n      if (!this.pairings.keys.includes(s)) {\n        const { message: r } = Y(\"NO_MATCHING_KEY\", `pairing topic doesn't exist: ${s}`);\n        throw new Error(r);\n      }\n      if (ai(this.pairings.get(s).expiry)) {\n        await this.deletePairing(s);\n        const { message: r } = Y(\"EXPIRED\", `pairing topic: ${s}`);\n        throw new Error(r);\n      }\n    }, this.core = e, this.logger = ee.generateChildLogger(t, this.name), this.pairings = new dr(this.core, this.logger, this.name, this.storagePrefix);\n  }\n  get context() {\n    return ee.getLoggerContext(this.logger);\n  }\n  isInitialized() {\n    if (!this.initialized) {\n      const { message: e } = Y(\"NOT_INITIALIZED\", this.name);\n      throw new Error(e);\n    }\n  }\n  registerRelayerEvents() {\n    this.core.relayer.on(gt.message, async (e) => {\n      const { topic: t, message: s } = e;\n      if (!this.pairings.keys.includes(t) || this.ignoredPayloadTypes.includes(this.core.crypto.getPayloadType(s)))\n        return;\n      const r = await this.core.crypto.decode(t, s);\n      try {\n        ji(r) ? (this.core.history.set(t, r), this.onRelayEventRequest({ topic: t, payload: r })) : Oi(r) && (await this.core.history.resolve(r), await this.onRelayEventResponse({ topic: t, payload: r }), this.core.history.delete(t, r.id));\n      } catch (n) {\n        this.logger.error(n);\n      }\n    });\n  }\n  registerExpirerEvents() {\n    this.core.expirer.on(Tt.expired, async (e) => {\n      const { topic: t } = jc(e.target);\n      t && this.pairings.keys.includes(t) && (await this.deletePairing(t, !0), this.events.emit(os.expire, { topic: t }));\n    });\n  }\n}, em = class extends pl {\n  constructor(e, t) {\n    super(e, t), this.core = e, this.logger = t, this.records = /* @__PURE__ */ new Map(), this.events = new We.EventEmitter(), this.name = R1, this.version = C1, this.cached = [], this.initialized = !1, this.storagePrefix = hi, this.init = async () => {\n      this.initialized || (this.logger.trace(\"Initialized\"), await this.restore(), this.cached.forEach((s) => this.records.set(s.id, s)), this.cached = [], this.registerEventListeners(), this.initialized = !0);\n    }, this.set = (s, r, n) => {\n      if (this.isInitialized(), this.logger.debug(\"Setting JSON-RPC request history record\"), this.logger.trace({ type: \"method\", method: \"set\", topic: s, request: r, chainId: n }), this.records.has(r.id))\n        return;\n      const o = { id: r.id, topic: s, request: { method: r.method, params: r.params || null }, chainId: n, expiry: Mt(V.THIRTY_DAYS) };\n      this.records.set(o.id, o), this.events.emit(zt.created, o);\n    }, this.resolve = async (s) => {\n      if (this.isInitialized(), this.logger.debug(\"Updating JSON-RPC response history record\"), this.logger.trace({ type: \"method\", method: \"update\", response: s }), !this.records.has(s.id))\n        return;\n      const r = await this.getRecord(s.id);\n      typeof r.response > \"u\" && (r.response = Ge(s) ? { error: s.error } : { result: s.result }, this.records.set(r.id, r), this.events.emit(zt.updated, r));\n    }, this.get = async (s, r) => (this.isInitialized(), this.logger.debug(\"Getting record\"), this.logger.trace({ type: \"method\", method: \"get\", topic: s, id: r }), await this.getRecord(r)), this.delete = (s, r) => {\n      this.isInitialized(), this.logger.debug(\"Deleting record\"), this.logger.trace({ type: \"method\", method: \"delete\", id: r }), this.values.forEach((n) => {\n        if (n.topic === s) {\n          if (typeof r < \"u\" && n.id !== r)\n            return;\n          this.records.delete(n.id), this.events.emit(zt.deleted, n);\n        }\n      });\n    }, this.exists = async (s, r) => (this.isInitialized(), this.records.has(r) ? (await this.getRecord(r)).topic === s : !1), this.on = (s, r) => {\n      this.events.on(s, r);\n    }, this.once = (s, r) => {\n      this.events.once(s, r);\n    }, this.off = (s, r) => {\n      this.events.off(s, r);\n    }, this.removeListener = (s, r) => {\n      this.events.removeListener(s, r);\n    }, this.logger = ee.generateChildLogger(t, this.name);\n  }\n  get context() {\n    return ee.getLoggerContext(this.logger);\n  }\n  get storageKey() {\n    return this.storagePrefix + this.version + \"//\" + this.name;\n  }\n  get size() {\n    return this.records.size;\n  }\n  get keys() {\n    return Array.from(this.records.keys());\n  }\n  get values() {\n    return Array.from(this.records.values());\n  }\n  get pending() {\n    const e = [];\n    return this.values.forEach((t) => {\n      if (typeof t.response < \"u\")\n        return;\n      const s = { topic: t.topic, request: ti(t.request.method, t.request.params, t.id), chainId: t.chainId };\n      return e.push(s);\n    }), e;\n  }\n  async setJsonRpcRecords(e) {\n    await this.core.storage.setItem(this.storageKey, e);\n  }\n  async getJsonRpcRecords() {\n    return await this.core.storage.getItem(this.storageKey);\n  }\n  getRecord(e) {\n    this.isInitialized();\n    const t = this.records.get(e);\n    if (!t) {\n      const { message: s } = Y(\"NO_MATCHING_KEY\", `${this.name}: ${e}`);\n      throw new Error(s);\n    }\n    return t;\n  }\n  async persist() {\n    await this.setJsonRpcRecords(this.values), this.events.emit(zt.sync);\n  }\n  async restore() {\n    try {\n      const e = await this.getJsonRpcRecords();\n      if (typeof e > \"u\" || !e.length)\n        return;\n      if (this.records.size) {\n        const { message: t } = Y(\"RESTORE_WILL_OVERRIDE\", this.name);\n        throw this.logger.error(t), new Error(t);\n      }\n      this.cached = e, this.logger.debug(`Successfully Restored records for ${this.name}`), this.logger.trace({ type: \"method\", method: \"restore\", records: this.values });\n    } catch (e) {\n      this.logger.debug(`Failed to Restore records for ${this.name}`), this.logger.error(e);\n    }\n  }\n  registerEventListeners() {\n    this.events.on(zt.created, (e) => {\n      const t = zt.created;\n      this.logger.info(`Emitting ${t}`), this.logger.debug({ type: \"event\", event: t, record: e }), this.persist();\n    }), this.events.on(zt.updated, (e) => {\n      const t = zt.updated;\n      this.logger.info(`Emitting ${t}`), this.logger.debug({ type: \"event\", event: t, record: e }), this.persist();\n    }), this.events.on(zt.deleted, (e) => {\n      const t = zt.deleted;\n      this.logger.info(`Emitting ${t}`), this.logger.debug({ type: \"event\", event: t, record: e }), this.persist();\n    }), this.core.heartbeat.on(Wt.HEARTBEAT_EVENTS.pulse, () => {\n      this.cleanup();\n    });\n  }\n  cleanup() {\n    try {\n      this.records.forEach((e) => {\n        V.toMiliseconds(e.expiry || 0) - Date.now() <= 0 && (this.logger.info(`Deleting expired history log: ${e.id}`), this.delete(e.topic, e.id));\n      });\n    } catch (e) {\n      this.logger.warn(e);\n    }\n  }\n  isInitialized() {\n    if (!this.initialized) {\n      const { message: e } = Y(\"NOT_INITIALIZED\", this.name);\n      throw new Error(e);\n    }\n  }\n}, tm = class extends vl {\n  constructor(e, t) {\n    super(e, t), this.core = e, this.logger = t, this.expirations = /* @__PURE__ */ new Map(), this.events = new We.EventEmitter(), this.name = A1, this.version = T1, this.cached = [], this.initialized = !1, this.storagePrefix = hi, this.init = async () => {\n      this.initialized || (this.logger.trace(\"Initialized\"), await this.restore(), this.cached.forEach((s) => this.expirations.set(s.target, s)), this.cached = [], this.registerEventListeners(), this.initialized = !0);\n    }, this.has = (s) => {\n      try {\n        const r = this.formatTarget(s);\n        return typeof this.getExpiration(r) < \"u\";\n      } catch {\n        return !1;\n      }\n    }, this.set = (s, r) => {\n      this.isInitialized();\n      const n = this.formatTarget(s), o = { target: n, expiry: r };\n      this.expirations.set(n, o), this.checkExpiry(n, o), this.events.emit(Tt.created, { target: n, expiration: o });\n    }, this.get = (s) => {\n      this.isInitialized();\n      const r = this.formatTarget(s);\n      return this.getExpiration(r);\n    }, this.del = (s) => {\n      if (this.isInitialized(), this.has(s)) {\n        const r = this.formatTarget(s), n = this.getExpiration(r);\n        this.expirations.delete(r), this.events.emit(Tt.deleted, { target: r, expiration: n });\n      }\n    }, this.on = (s, r) => {\n      this.events.on(s, r);\n    }, this.once = (s, r) => {\n      this.events.once(s, r);\n    }, this.off = (s, r) => {\n      this.events.off(s, r);\n    }, this.removeListener = (s, r) => {\n      this.events.removeListener(s, r);\n    }, this.logger = ee.generateChildLogger(t, this.name);\n  }\n  get context() {\n    return ee.getLoggerContext(this.logger);\n  }\n  get storageKey() {\n    return this.storagePrefix + this.version + \"//\" + this.name;\n  }\n  get length() {\n    return this.expirations.size;\n  }\n  get keys() {\n    return Array.from(this.expirations.keys());\n  }\n  get values() {\n    return Array.from(this.expirations.values());\n  }\n  formatTarget(e) {\n    if (typeof e == \"string\")\n      return vp(e);\n    if (typeof e == \"number\")\n      return _p(e);\n    const { message: t } = Y(\"UNKNOWN_TYPE\", `Target type: ${typeof e}`);\n    throw new Error(t);\n  }\n  async setExpirations(e) {\n    await this.core.storage.setItem(this.storageKey, e);\n  }\n  async getExpirations() {\n    return await this.core.storage.getItem(this.storageKey);\n  }\n  async persist() {\n    await this.setExpirations(this.values), this.events.emit(Tt.sync);\n  }\n  async restore() {\n    try {\n      const e = await this.getExpirations();\n      if (typeof e > \"u\" || !e.length)\n        return;\n      if (this.expirations.size) {\n        const { message: t } = Y(\"RESTORE_WILL_OVERRIDE\", this.name);\n        throw this.logger.error(t), new Error(t);\n      }\n      this.cached = e, this.logger.debug(`Successfully Restored expirations for ${this.name}`), this.logger.trace({ type: \"method\", method: \"restore\", expirations: this.values });\n    } catch (e) {\n      this.logger.debug(`Failed to Restore expirations for ${this.name}`), this.logger.error(e);\n    }\n  }\n  getExpiration(e) {\n    const t = this.expirations.get(e);\n    if (!t) {\n      const { message: s } = Y(\"NO_MATCHING_KEY\", `${this.name}: ${e}`);\n      throw this.logger.error(s), new Error(s);\n    }\n    return t;\n  }\n  checkExpiry(e, t) {\n    const { expiry: s } = t;\n    V.toMiliseconds(s) - Date.now() <= 0 && this.expire(e, t);\n  }\n  expire(e, t) {\n    this.expirations.delete(e), this.events.emit(Tt.expired, { target: e, expiration: t });\n  }\n  checkExpirations() {\n    this.core.relayer.connected && this.expirations.forEach((e, t) => this.checkExpiry(t, e));\n  }\n  registerEventListeners() {\n    this.core.heartbeat.on(Wt.HEARTBEAT_EVENTS.pulse, () => this.checkExpirations()), this.events.on(Tt.created, (e) => {\n      const t = Tt.created;\n      this.logger.info(`Emitting ${t}`), this.logger.debug({ type: \"event\", event: t, data: e }), this.persist();\n    }), this.events.on(Tt.expired, (e) => {\n      const t = Tt.expired;\n      this.logger.info(`Emitting ${t}`), this.logger.debug({ type: \"event\", event: t, data: e }), this.persist();\n    }), this.events.on(Tt.deleted, (e) => {\n      const t = Tt.deleted;\n      this.logger.info(`Emitting ${t}`), this.logger.debug({ type: \"event\", event: t, data: e }), this.persist();\n    });\n  }\n  isInitialized() {\n    if (!this.initialized) {\n      const { message: e } = Y(\"NOT_INITIALIZED\", this.name);\n      throw new Error(e);\n    }\n  }\n}, im = class extends _l {\n  constructor(e, t) {\n    super(e, t), this.projectId = e, this.logger = t, this.name = Nr, this.initialized = !1, this.queue = [], this.verifyDisabled = !1, this.init = async (s) => {\n      if (this.verifyDisabled || ur() || !vs())\n        return;\n      const r = s?.verifyUrl || Ks;\n      this.verifyUrl !== r && this.removeIframe(), this.verifyUrl = r;\n      try {\n        await this.createIframe();\n      } catch (n) {\n        this.logger.info(`Verify iframe failed to load: ${this.verifyUrl}`), this.logger.info(n);\n      }\n      if (!this.initialized) {\n        this.removeIframe(), this.verifyUrl = ta;\n        try {\n          await this.createIframe();\n        } catch (n) {\n          this.logger.info(`Verify iframe failed to load: ${this.verifyUrl}`), this.logger.info(n), this.verifyDisabled = !0;\n        }\n      }\n    }, this.register = async (s) => {\n      this.initialized ? this.sendPost(s.attestationId) : (this.addToQueue(s.attestationId), await this.init());\n    }, this.resolve = async (s) => {\n      if (this.isDevEnv)\n        return \"\";\n      const r = s?.verifyUrl || Ks;\n      let n;\n      try {\n        n = await this.fetchAttestation(s.attestationId, r);\n      } catch (o) {\n        this.logger.info(`failed to resolve attestation: ${s.attestationId} from url: ${r}`), this.logger.info(o), n = await this.fetchAttestation(s.attestationId, ta);\n      }\n      return n;\n    }, this.fetchAttestation = async (s, r) => {\n      this.logger.info(`resolving attestation: ${s} from url: ${r}`);\n      const n = this.startAbortTimer(V.ONE_SECOND * 2), o = await fetch(`${r}/attestation/${s}`, { signal: this.abortController.signal });\n      return clearTimeout(n), o.status === 200 ? await o.json() : void 0;\n    }, this.addToQueue = (s) => {\n      this.queue.push(s);\n    }, this.processQueue = () => {\n      this.queue.length !== 0 && (this.queue.forEach((s) => this.sendPost(s)), this.queue = []);\n    }, this.sendPost = (s) => {\n      var r;\n      try {\n        if (!this.iframe)\n          return;\n        (r = this.iframe.contentWindow) == null || r.postMessage(s, \"*\"), this.logger.info(`postMessage sent: ${s} ${this.verifyUrl}`);\n      } catch {\n      }\n    }, this.createIframe = async () => {\n      let s;\n      const r = (n) => {\n        n.data === \"verify_ready\" && (this.initialized = !0, this.processQueue(), window.removeEventListener(\"message\", r), s());\n      };\n      await Promise.race([new Promise((n) => {\n        if (document.getElementById(Nr))\n          return n();\n        window.addEventListener(\"message\", r);\n        const o = document.createElement(\"iframe\");\n        o.id = Nr, o.src = `${this.verifyUrl}/${this.projectId}`, o.style.display = \"none\", document.body.append(o), this.iframe = o, s = n;\n      }), new Promise((n, o) => setTimeout(() => {\n        window.removeEventListener(\"message\", r), o(\"verify iframe load timeout\");\n      }, V.toMiliseconds(V.FIVE_SECONDS)))]);\n    }, this.removeIframe = () => {\n      this.iframe && (this.iframe.remove(), this.iframe = void 0, this.initialized = !1);\n    }, this.logger = ee.generateChildLogger(t, this.name), this.verifyUrl = Ks, this.abortController = new AbortController(), this.isDevEnv = yn() && process.env.IS_VITEST;\n  }\n  get context() {\n    return ee.getLoggerContext(this.logger);\n  }\n  startAbortTimer(e) {\n    return this.abortController = new AbortController(), setTimeout(() => this.abortController.abort(), V.toMiliseconds(e));\n  }\n};\nvar sm = Object.defineProperty, ha = Object.getOwnPropertySymbols, rm = Object.prototype.hasOwnProperty, nm = Object.prototype.propertyIsEnumerable, ua = (i, e, t) => e in i ? sm(i, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : i[e] = t, la = (i, e) => {\n  for (var t in e || (e = {}))\n    rm.call(e, t) && ua(i, t, e[t]);\n  if (ha)\n    for (var t of ha(e))\n      nm.call(e, t) && ua(i, t, e[t]);\n  return i;\n};\nlet om = class uh extends fl {\n  constructor(e) {\n    super(e), this.protocol = ah, this.version = o1, this.name = En, this.events = new We.EventEmitter(), this.initialized = !1, this.on = (s, r) => this.events.on(s, r), this.once = (s, r) => this.events.once(s, r), this.off = (s, r) => this.events.off(s, r), this.removeListener = (s, r) => this.events.removeListener(s, r), this.projectId = e?.projectId, this.relayUrl = e?.relayUrl || hh;\n    const t = typeof e?.logger < \"u\" && typeof e?.logger != \"string\" ? e.logger : ee.pino(ee.getDefaultLoggerOptions({ level: e?.logger || a1.logger }));\n    this.logger = ee.generateChildLogger(t, this.name), this.heartbeat = new Wt.HeartBeat(), this.crypto = new F1(this, this.logger, e?.keychain), this.history = new em(this, this.logger), this.expirer = new tm(this, this.logger), this.storage = e != null && e.storage ? e.storage : new nc(la(la({}, c1), e?.storageOptions)), this.relayer = new Y1({ core: this, logger: this.logger, relayUrl: this.relayUrl, projectId: this.projectId }), this.pairing = new Z1(this, this.logger), this.verify = new im(this.projectId || \"\", this.logger);\n  }\n  static async init(e) {\n    const t = new uh(e);\n    await t.initialize();\n    const s = await t.crypto.getClientId();\n    return await t.storage.setItem(I1, s), t;\n  }\n  get context() {\n    return ee.getLoggerContext(this.logger);\n  }\n  async start() {\n    this.initialized || await this.initialize();\n  }\n  async initialize() {\n    this.logger.trace(\"Initialized\");\n    try {\n      await this.crypto.init(), await this.history.init(), await this.expirer.init(), await this.relayer.init(), await this.heartbeat.init(), await this.pairing.init(), this.initialized = !0, this.logger.info(\"Core Initialization Success\");\n    } catch (e) {\n      throw this.logger.warn(`Core Initialization Failure at epoch ${Date.now()}`, e), this.logger.error(e.message), e;\n    }\n  }\n};\nconst am = om, lh = \"wc\", dh = 2, fh = \"client\", Sn = `${lh}@${dh}:${fh}:`, Rr = { name: fh, logger: \"error\", controller: !1, relayUrl: \"wss://relay.walletconnect.com\" }, da = \"WALLETCONNECT_DEEPLINK_CHOICE\", cm = \"proposal\", hm = \"Proposal expired\", um = \"session\", Fs = V.SEVEN_DAYS, lm = \"engine\", es = { wc_sessionPropose: { req: { ttl: V.FIVE_MINUTES, prompt: !0, tag: 1100 }, res: { ttl: V.FIVE_MINUTES, prompt: !1, tag: 1101 } }, wc_sessionSettle: { req: { ttl: V.FIVE_MINUTES, prompt: !1, tag: 1102 }, res: { ttl: V.FIVE_MINUTES, prompt: !1, tag: 1103 } }, wc_sessionUpdate: { req: { ttl: V.ONE_DAY, prompt: !1, tag: 1104 }, res: { ttl: V.ONE_DAY, prompt: !1, tag: 1105 } }, wc_sessionExtend: { req: { ttl: V.ONE_DAY, prompt: !1, tag: 1106 }, res: { ttl: V.ONE_DAY, prompt: !1, tag: 1107 } }, wc_sessionRequest: { req: { ttl: V.FIVE_MINUTES, prompt: !0, tag: 1108 }, res: { ttl: V.FIVE_MINUTES, prompt: !1, tag: 1109 } }, wc_sessionEvent: { req: { ttl: V.FIVE_MINUTES, prompt: !0, tag: 1110 }, res: { ttl: V.FIVE_MINUTES, prompt: !1, tag: 1111 } }, wc_sessionDelete: { req: { ttl: V.ONE_DAY, prompt: !1, tag: 1112 }, res: { ttl: V.ONE_DAY, prompt: !1, tag: 1113 } }, wc_sessionPing: { req: { ttl: V.THIRTY_SECONDS, prompt: !1, tag: 1114 }, res: { ttl: V.THIRTY_SECONDS, prompt: !1, tag: 1115 } } }, Cr = { min: V.FIVE_MINUTES, max: V.SEVEN_DAYS }, ei = { idle: \"IDLE\", active: \"ACTIVE\" }, dm = \"request\", fm = [\"wc_sessionPropose\", \"wc_sessionRequest\", \"wc_authRequest\"];\nvar pm = Object.defineProperty, gm = Object.defineProperties, ym = Object.getOwnPropertyDescriptors, fa = Object.getOwnPropertySymbols, mm = Object.prototype.hasOwnProperty, bm = Object.prototype.propertyIsEnumerable, pa = (i, e, t) => e in i ? pm(i, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : i[e] = t, Et = (i, e) => {\n  for (var t in e || (e = {}))\n    mm.call(e, t) && pa(i, t, e[t]);\n  if (fa)\n    for (var t of fa(e))\n      bm.call(e, t) && pa(i, t, e[t]);\n  return i;\n}, ts = (i, e) => gm(i, ym(e));\nlet wm = class extends Sl {\n  constructor(e) {\n    super(e), this.name = lm, this.events = new ir(), this.initialized = !1, this.ignoredPayloadTypes = [Di], this.requestQueue = { state: ei.idle, queue: [] }, this.sessionRequestQueue = { state: ei.idle, queue: [] }, this.requestQueueDelay = V.ONE_SECOND, this.init = async () => {\n      this.initialized || (await this.cleanup(), this.registerRelayerEvents(), this.registerExpirerEvents(), this.registerPairingEvents(), this.client.core.pairing.register({ methods: Object.keys(es) }), this.initialized = !0, setTimeout(() => {\n        this.sessionRequestQueue.queue = this.getPendingSessionRequests(), this.processSessionRequestQueue();\n      }, V.toMiliseconds(this.requestQueueDelay)));\n    }, this.connect = async (t) => {\n      await this.isInitialized();\n      const s = ts(Et({}, t), { requiredNamespaces: t.requiredNamespaces || {}, optionalNamespaces: t.optionalNamespaces || {} });\n      await this.isValidConnect(s);\n      const { pairingTopic: r, requiredNamespaces: n, optionalNamespaces: o, sessionProperties: c, relays: u } = s;\n      let d = r, p, b = !1;\n      if (d && (b = this.client.core.pairing.pairings.get(d).active), !d || !b) {\n        const { topic: D, uri: y } = await this.client.core.pairing.create();\n        d = D, p = y;\n      }\n      const x = await this.client.core.crypto.generateKeyPair(), O = Et({ requiredNamespaces: n, optionalNamespaces: o, relays: u ?? [{ protocol: ch }], proposer: { publicKey: x, metadata: this.client.metadata } }, c && { sessionProperties: c }), { reject: _, resolve: C, done: F } = Ai(V.FIVE_MINUTES, hm);\n      if (this.events.once(Be(\"session_connect\"), async ({ error: D, session: y }) => {\n        if (D)\n          _(D);\n        else if (y) {\n          y.self.publicKey = x;\n          const w = ts(Et({}, y), { requiredNamespaces: y.requiredNamespaces, optionalNamespaces: y.optionalNamespaces });\n          await this.client.session.set(y.topic, w), await this.setExpiry(y.topic, y.expiry), d && await this.client.core.pairing.updateMetadata({ topic: d, metadata: y.peer.metadata }), C(w);\n        }\n      }), !d) {\n        const { message: D } = Y(\"NO_MATCHING_KEY\", `connect() pairing topic: ${d}`);\n        throw new Error(D);\n      }\n      const K = await this.sendRequest({ topic: d, method: \"wc_sessionPropose\", params: O }), I = Mt(V.FIVE_MINUTES);\n      return await this.setProposal(K, Et({ id: K, expiry: I }, O)), { uri: p, approval: F };\n    }, this.pair = async (t) => (await this.isInitialized(), await this.client.core.pairing.pair(t)), this.approve = async (t) => {\n      await this.isInitialized(), await this.isValidApprove(t);\n      const { id: s, relayProtocol: r, namespaces: n, sessionProperties: o } = t, c = this.client.proposal.get(s);\n      let { pairingTopic: u, proposer: d, requiredNamespaces: p, optionalNamespaces: b } = c;\n      u = u || \"\", cs(p) || (p = Up(n, \"approve()\"));\n      const x = await this.client.core.crypto.generateKeyPair(), O = d.publicKey, _ = await this.client.core.crypto.generateSharedKey(x, O);\n      u && s && (await this.client.core.pairing.updateMetadata({ topic: u, metadata: d.metadata }), await this.sendResult({ id: s, topic: u, result: { relay: { protocol: r ?? \"irn\" }, responderPublicKey: x } }), await this.client.proposal.delete(s, nt(\"USER_DISCONNECTED\")), await this.client.core.pairing.activate({ topic: u }));\n      const C = Et({ relay: { protocol: r ?? \"irn\" }, namespaces: n, requiredNamespaces: p, optionalNamespaces: b, pairingTopic: u, controller: { publicKey: x, metadata: this.client.metadata }, expiry: Mt(Fs) }, o && { sessionProperties: o });\n      await this.client.core.relayer.subscribe(_), await this.sendRequest({ topic: _, method: \"wc_sessionSettle\", params: C, throwOnFailedPublish: !0 });\n      const F = ts(Et({}, C), { topic: _, pairingTopic: u, acknowledged: !1, self: C.controller, peer: { publicKey: d.publicKey, metadata: d.metadata }, controller: x });\n      return await this.client.session.set(_, F), await this.setExpiry(_, Mt(Fs)), { topic: _, acknowledged: () => new Promise((K) => setTimeout(() => K(this.client.session.get(_)), 500)) };\n    }, this.reject = async (t) => {\n      await this.isInitialized(), await this.isValidReject(t);\n      const { id: s, reason: r } = t, { pairingTopic: n } = this.client.proposal.get(s);\n      n && (await this.sendError(s, n, r), await this.client.proposal.delete(s, nt(\"USER_DISCONNECTED\")));\n    }, this.update = async (t) => {\n      await this.isInitialized(), await this.isValidUpdate(t);\n      const { topic: s, namespaces: r } = t, n = await this.sendRequest({ topic: s, method: \"wc_sessionUpdate\", params: { namespaces: r } }), { done: o, resolve: c, reject: u } = Ai();\n      return this.events.once(Be(\"session_update\", n), ({ error: d }) => {\n        d ? u(d) : c();\n      }), await this.client.session.update(s, { namespaces: r }), { acknowledged: o };\n    }, this.extend = async (t) => {\n      await this.isInitialized(), await this.isValidExtend(t);\n      const { topic: s } = t, r = await this.sendRequest({ topic: s, method: \"wc_sessionExtend\", params: {} }), { done: n, resolve: o, reject: c } = Ai();\n      return this.events.once(Be(\"session_extend\", r), ({ error: u }) => {\n        u ? c(u) : o();\n      }), await this.setExpiry(s, Mt(Fs)), { acknowledged: n };\n    }, this.request = async (t) => {\n      await this.isInitialized(), await this.isValidRequest(t);\n      const { chainId: s, request: r, topic: n, expiry: o } = t, c = wn(), { done: u, resolve: d, reject: p } = Ai(o);\n      return this.events.once(Be(\"session_request\", c), ({ error: b, result: x }) => {\n        b ? p(b) : d(x);\n      }), await Promise.all([new Promise(async (b) => {\n        await this.sendRequest({ clientRpcId: c, topic: n, method: \"wc_sessionRequest\", params: { request: r, chainId: s }, expiry: o, throwOnFailedPublish: !0 }).catch((x) => p(x)), this.client.events.emit(\"session_request_sent\", { topic: n, request: r, chainId: s, id: c }), b();\n      }), new Promise(async (b) => {\n        const x = await this.client.core.storage.getItem(da);\n        Ep({ id: c, topic: n, wcDeepLink: x }), b();\n      }), u()]).then((b) => b[2]);\n    }, this.respond = async (t) => {\n      await this.isInitialized(), await this.isValidRespond(t);\n      const { topic: s, response: r } = t, { id: n } = r;\n      ht(r) ? await this.sendResult({ id: n, topic: s, result: r.result, throwOnFailedPublish: !0 }) : Ge(r) && await this.sendError(n, s, r.error), this.cleanupAfterResponse(t);\n    }, this.ping = async (t) => {\n      await this.isInitialized(), await this.isValidPing(t);\n      const { topic: s } = t;\n      if (this.client.session.keys.includes(s)) {\n        const r = await this.sendRequest({ topic: s, method: \"wc_sessionPing\", params: {} }), { done: n, resolve: o, reject: c } = Ai();\n        this.events.once(Be(\"session_ping\", r), ({ error: u }) => {\n          u ? c(u) : o();\n        }), await n();\n      } else\n        this.client.core.pairing.pairings.keys.includes(s) && await this.client.core.pairing.ping({ topic: s });\n    }, this.emit = async (t) => {\n      await this.isInitialized(), await this.isValidEmit(t);\n      const { topic: s, event: r, chainId: n } = t;\n      await this.sendRequest({ topic: s, method: \"wc_sessionEvent\", params: { event: r, chainId: n } });\n    }, this.disconnect = async (t) => {\n      await this.isInitialized(), await this.isValidDisconnect(t);\n      const { topic: s } = t;\n      this.client.session.keys.includes(s) ? (await this.sendRequest({ topic: s, method: \"wc_sessionDelete\", params: nt(\"USER_DISCONNECTED\"), throwOnFailedPublish: !0 }), await this.deleteSession(s)) : await this.client.core.pairing.disconnect({ topic: s });\n    }, this.find = (t) => (this.isInitialized(), this.client.session.getAll().filter((s) => qp(s, t))), this.getPendingSessionRequests = () => (this.isInitialized(), this.client.pendingRequest.getAll()), this.cleanupDuplicatePairings = async (t) => {\n      if (t.pairingTopic)\n        try {\n          const s = this.client.core.pairing.pairings.get(t.pairingTopic), r = this.client.core.pairing.pairings.getAll().filter((n) => {\n            var o, c;\n            return ((o = n.peerMetadata) == null ? void 0 : o.url) && ((c = n.peerMetadata) == null ? void 0 : c.url) === t.peer.metadata.url && n.topic && n.topic !== s.topic;\n          });\n          if (r.length === 0)\n            return;\n          this.client.logger.info(`Cleaning up ${r.length} duplicate pairing(s)`), await Promise.all(r.map((n) => this.client.core.pairing.disconnect({ topic: n.topic }))), this.client.logger.info(\"Duplicate pairings clean up finished\");\n        } catch (s) {\n          this.client.logger.error(s);\n        }\n    }, this.deleteSession = async (t, s) => {\n      const { self: r } = this.client.session.get(t);\n      await this.client.core.relayer.unsubscribe(t), this.client.session.delete(t, nt(\"USER_DISCONNECTED\")), this.client.core.crypto.keychain.has(r.publicKey) && await this.client.core.crypto.deleteKeyPair(r.publicKey), this.client.core.crypto.keychain.has(t) && await this.client.core.crypto.deleteSymKey(t), s || this.client.core.expirer.del(t), this.client.core.storage.removeItem(da).catch((n) => this.client.logger.warn(n));\n    }, this.deleteProposal = async (t, s) => {\n      await Promise.all([this.client.proposal.delete(t, nt(\"USER_DISCONNECTED\")), s ? Promise.resolve() : this.client.core.expirer.del(t)]);\n    }, this.deletePendingSessionRequest = async (t, s, r = !1) => {\n      await Promise.all([this.client.pendingRequest.delete(t, s), r ? Promise.resolve() : this.client.core.expirer.del(t)]), this.sessionRequestQueue.queue = this.sessionRequestQueue.queue.filter((n) => n.id !== t), r && (this.sessionRequestQueue.state = ei.idle);\n    }, this.setExpiry = async (t, s) => {\n      this.client.session.keys.includes(t) && await this.client.session.update(t, { expiry: s }), this.client.core.expirer.set(t, s);\n    }, this.setProposal = async (t, s) => {\n      await this.client.proposal.set(t, s), this.client.core.expirer.set(t, s.expiry);\n    }, this.setPendingSessionRequest = async (t) => {\n      const s = es.wc_sessionRequest.req.ttl, { id: r, topic: n, params: o, verifyContext: c } = t;\n      await this.client.pendingRequest.set(r, { id: r, topic: n, params: o, verifyContext: c }), s && this.client.core.expirer.set(r, Mt(s));\n    }, this.sendRequest = async (t) => {\n      const { topic: s, method: r, params: n, expiry: o, relayRpcId: c, clientRpcId: u, throwOnFailedPublish: d } = t, p = ti(r, n, u);\n      if (vs() && fm.includes(r)) {\n        const O = Fi(JSON.stringify(p));\n        this.client.core.verify.register({ attestationId: O });\n      }\n      const b = await this.client.core.crypto.encode(s, p), x = es[r].req;\n      return o && (x.ttl = o), c && (x.id = c), this.client.core.history.set(s, p), d ? (x.internal = ts(Et({}, x.internal), { throwOnFailedPublish: !0 }), await this.client.core.relayer.publish(s, b, x)) : this.client.core.relayer.publish(s, b, x).catch((O) => this.client.logger.error(O)), p.id;\n    }, this.sendResult = async (t) => {\n      const { id: s, topic: r, result: n, throwOnFailedPublish: o } = t, c = xi(s, n), u = await this.client.core.crypto.encode(r, c), d = await this.client.core.history.get(r, s), p = es[d.request.method].res;\n      o ? (p.internal = ts(Et({}, p.internal), { throwOnFailedPublish: !0 }), await this.client.core.relayer.publish(r, u, p)) : this.client.core.relayer.publish(r, u, p).catch((b) => this.client.logger.error(b)), await this.client.core.history.resolve(c);\n    }, this.sendError = async (t, s, r) => {\n      const n = qi(t, r), o = await this.client.core.crypto.encode(s, n), c = await this.client.core.history.get(s, t), u = es[c.request.method].res;\n      this.client.core.relayer.publish(s, o, u), await this.client.core.history.resolve(n);\n    }, this.cleanup = async () => {\n      const t = [], s = [];\n      this.client.session.getAll().forEach((r) => {\n        ai(r.expiry) && t.push(r.topic);\n      }), this.client.proposal.getAll().forEach((r) => {\n        ai(r.expiry) && s.push(r.id);\n      }), await Promise.all([...t.map((r) => this.deleteSession(r)), ...s.map((r) => this.deleteProposal(r))]);\n    }, this.onRelayEventRequest = async (t) => {\n      this.requestQueue.queue.push(t), await this.processRequestsQueue();\n    }, this.processRequestsQueue = async () => {\n      if (this.requestQueue.state === ei.active) {\n        this.client.logger.info(\"Request queue already active, skipping...\");\n        return;\n      }\n      for (this.client.logger.info(`Request queue starting with ${this.requestQueue.queue.length} requests`); this.requestQueue.queue.length > 0; ) {\n        this.requestQueue.state = ei.active;\n        const t = this.requestQueue.queue.shift();\n        if (t)\n          try {\n            this.processRequest(t), await new Promise((s) => setTimeout(s, 300));\n          } catch (s) {\n            this.client.logger.warn(s);\n          }\n      }\n      this.requestQueue.state = ei.idle;\n    }, this.processRequest = (t) => {\n      const { topic: s, payload: r } = t, n = r.method;\n      switch (n) {\n        case \"wc_sessionPropose\":\n          return this.onSessionProposeRequest(s, r);\n        case \"wc_sessionSettle\":\n          return this.onSessionSettleRequest(s, r);\n        case \"wc_sessionUpdate\":\n          return this.onSessionUpdateRequest(s, r);\n        case \"wc_sessionExtend\":\n          return this.onSessionExtendRequest(s, r);\n        case \"wc_sessionPing\":\n          return this.onSessionPingRequest(s, r);\n        case \"wc_sessionDelete\":\n          return this.onSessionDeleteRequest(s, r);\n        case \"wc_sessionRequest\":\n          return this.onSessionRequest(s, r);\n        case \"wc_sessionEvent\":\n          return this.onSessionEventRequest(s, r);\n        default:\n          return this.client.logger.info(`Unsupported request method ${n}`);\n      }\n    }, this.onRelayEventResponse = async (t) => {\n      const { topic: s, payload: r } = t, n = (await this.client.core.history.get(s, r.id)).request.method;\n      switch (n) {\n        case \"wc_sessionPropose\":\n          return this.onSessionProposeResponse(s, r);\n        case \"wc_sessionSettle\":\n          return this.onSessionSettleResponse(s, r);\n        case \"wc_sessionUpdate\":\n          return this.onSessionUpdateResponse(s, r);\n        case \"wc_sessionExtend\":\n          return this.onSessionExtendResponse(s, r);\n        case \"wc_sessionPing\":\n          return this.onSessionPingResponse(s, r);\n        case \"wc_sessionRequest\":\n          return this.onSessionRequestResponse(s, r);\n        default:\n          return this.client.logger.info(`Unsupported response method ${n}`);\n      }\n    }, this.onRelayEventUnknownPayload = (t) => {\n      const { topic: s } = t, { message: r } = Y(\"MISSING_OR_INVALID\", `Decoded payload on topic ${s} is not identifiable as a JSON-RPC request or a response.`);\n      throw new Error(r);\n    }, this.onSessionProposeRequest = async (t, s) => {\n      const { params: r, id: n } = s;\n      try {\n        this.isValidConnect(Et({}, s.params));\n        const o = Mt(V.FIVE_MINUTES), c = Et({ id: n, pairingTopic: t, expiry: o }, r);\n        await this.setProposal(n, c);\n        const u = Fi(JSON.stringify(s)), d = await this.getVerifyContext(u, c.proposer.metadata);\n        this.client.events.emit(\"session_proposal\", { id: n, params: c, verifyContext: d });\n      } catch (o) {\n        await this.sendError(n, t, o), this.client.logger.error(o);\n      }\n    }, this.onSessionProposeResponse = async (t, s) => {\n      const { id: r } = s;\n      if (ht(s)) {\n        const { result: n } = s;\n        this.client.logger.trace({ type: \"method\", method: \"onSessionProposeResponse\", result: n });\n        const o = this.client.proposal.get(r);\n        this.client.logger.trace({ type: \"method\", method: \"onSessionProposeResponse\", proposal: o });\n        const c = o.proposer.publicKey;\n        this.client.logger.trace({ type: \"method\", method: \"onSessionProposeResponse\", selfPublicKey: c });\n        const u = n.responderPublicKey;\n        this.client.logger.trace({ type: \"method\", method: \"onSessionProposeResponse\", peerPublicKey: u });\n        const d = await this.client.core.crypto.generateSharedKey(c, u);\n        this.client.logger.trace({ type: \"method\", method: \"onSessionProposeResponse\", sessionTopic: d });\n        const p = await this.client.core.relayer.subscribe(d);\n        this.client.logger.trace({ type: \"method\", method: \"onSessionProposeResponse\", subscriptionId: p }), await this.client.core.pairing.activate({ topic: t });\n      } else\n        Ge(s) && (await this.client.proposal.delete(r, nt(\"USER_DISCONNECTED\")), this.events.emit(Be(\"session_connect\"), { error: s.error }));\n    }, this.onSessionSettleRequest = async (t, s) => {\n      const { id: r, params: n } = s;\n      try {\n        this.isValidSessionSettleRequest(n);\n        const { relay: o, controller: c, expiry: u, namespaces: d, requiredNamespaces: p, optionalNamespaces: b, sessionProperties: x, pairingTopic: O } = s.params, _ = Et({ topic: t, relay: o, expiry: u, namespaces: d, acknowledged: !0, pairingTopic: O, requiredNamespaces: p, optionalNamespaces: b, controller: c.publicKey, self: { publicKey: \"\", metadata: this.client.metadata }, peer: { publicKey: c.publicKey, metadata: c.metadata } }, x && { sessionProperties: x });\n        await this.sendResult({ id: s.id, topic: t, result: !0 }), this.events.emit(Be(\"session_connect\"), { session: _ }), this.cleanupDuplicatePairings(_);\n      } catch (o) {\n        await this.sendError(r, t, o), this.client.logger.error(o);\n      }\n    }, this.onSessionSettleResponse = async (t, s) => {\n      const { id: r } = s;\n      ht(s) ? (await this.client.session.update(t, { acknowledged: !0 }), this.events.emit(Be(\"session_approve\", r), {})) : Ge(s) && (await this.client.session.delete(t, nt(\"USER_DISCONNECTED\")), this.events.emit(Be(\"session_approve\", r), { error: s.error }));\n    }, this.onSessionUpdateRequest = async (t, s) => {\n      const { params: r, id: n } = s;\n      try {\n        const o = `${t}_session_update`, c = $s.get(o);\n        if (c && this.isRequestOutOfSync(c, n)) {\n          this.client.logger.info(`Discarding out of sync request - ${n}`);\n          return;\n        }\n        this.isValidUpdate(Et({ topic: t }, r)), await this.client.session.update(t, { namespaces: r.namespaces }), await this.sendResult({ id: n, topic: t, result: !0 }), this.client.events.emit(\"session_update\", { id: n, topic: t, params: r }), $s.set(o, n);\n      } catch (o) {\n        await this.sendError(n, t, o), this.client.logger.error(o);\n      }\n    }, this.isRequestOutOfSync = (t, s) => parseInt(s.toString().slice(0, -3)) <= parseInt(t.toString().slice(0, -3)), this.onSessionUpdateResponse = (t, s) => {\n      const { id: r } = s;\n      ht(s) ? this.events.emit(Be(\"session_update\", r), {}) : Ge(s) && this.events.emit(Be(\"session_update\", r), { error: s.error });\n    }, this.onSessionExtendRequest = async (t, s) => {\n      const { id: r } = s;\n      try {\n        this.isValidExtend({ topic: t }), await this.setExpiry(t, Mt(Fs)), await this.sendResult({ id: r, topic: t, result: !0 }), this.client.events.emit(\"session_extend\", { id: r, topic: t });\n      } catch (n) {\n        await this.sendError(r, t, n), this.client.logger.error(n);\n      }\n    }, this.onSessionExtendResponse = (t, s) => {\n      const { id: r } = s;\n      ht(s) ? this.events.emit(Be(\"session_extend\", r), {}) : Ge(s) && this.events.emit(Be(\"session_extend\", r), { error: s.error });\n    }, this.onSessionPingRequest = async (t, s) => {\n      const { id: r } = s;\n      try {\n        this.isValidPing({ topic: t }), await this.sendResult({ id: r, topic: t, result: !0 }), this.client.events.emit(\"session_ping\", { id: r, topic: t });\n      } catch (n) {\n        await this.sendError(r, t, n), this.client.logger.error(n);\n      }\n    }, this.onSessionPingResponse = (t, s) => {\n      const { id: r } = s;\n      setTimeout(() => {\n        ht(s) ? this.events.emit(Be(\"session_ping\", r), {}) : Ge(s) && this.events.emit(Be(\"session_ping\", r), { error: s.error });\n      }, 500);\n    }, this.onSessionDeleteRequest = async (t, s) => {\n      const { id: r } = s;\n      try {\n        this.isValidDisconnect({ topic: t, reason: s.params }), await Promise.all([new Promise((n) => {\n          this.client.core.relayer.once(gt.publish, async () => {\n            n(await this.deleteSession(t));\n          });\n        }), this.sendResult({ id: r, topic: t, result: !0 })]), this.client.events.emit(\"session_delete\", { id: r, topic: t });\n      } catch (n) {\n        this.client.logger.error(n);\n      }\n    }, this.onSessionRequest = async (t, s) => {\n      const { id: r, params: n } = s;\n      try {\n        this.isValidRequest(Et({ topic: t }, n));\n        const o = Fi(JSON.stringify(ti(\"wc_sessionRequest\", n, r))), c = this.client.session.get(t), u = await this.getVerifyContext(o, c.peer.metadata), d = { id: r, topic: t, params: n, verifyContext: u };\n        await this.setPendingSessionRequest(d), this.addSessionRequestToSessionRequestQueue(d), this.processSessionRequestQueue();\n      } catch (o) {\n        await this.sendError(r, t, o), this.client.logger.error(o);\n      }\n    }, this.onSessionRequestResponse = (t, s) => {\n      const { id: r } = s;\n      ht(s) ? this.events.emit(Be(\"session_request\", r), { result: s.result }) : Ge(s) && this.events.emit(Be(\"session_request\", r), { error: s.error });\n    }, this.onSessionEventRequest = async (t, s) => {\n      const { id: r, params: n } = s;\n      try {\n        const o = `${t}_session_event_${n.event.name}`, c = $s.get(o);\n        if (c && this.isRequestOutOfSync(c, r)) {\n          this.client.logger.info(`Discarding out of sync request - ${r}`);\n          return;\n        }\n        this.isValidEmit(Et({ topic: t }, n)), this.client.events.emit(\"session_event\", { id: r, topic: t, params: n }), $s.set(o, r);\n      } catch (o) {\n        await this.sendError(r, t, o), this.client.logger.error(o);\n      }\n    }, this.addSessionRequestToSessionRequestQueue = (t) => {\n      this.sessionRequestQueue.queue.push(t);\n    }, this.cleanupAfterResponse = (t) => {\n      this.deletePendingSessionRequest(t.response.id, { message: \"fulfilled\", code: 0 }), setTimeout(() => {\n        this.sessionRequestQueue.state = ei.idle, this.processSessionRequestQueue();\n      }, V.toMiliseconds(this.requestQueueDelay));\n    }, this.processSessionRequestQueue = () => {\n      if (this.sessionRequestQueue.state === ei.active) {\n        this.client.logger.info(\"session request queue is already active.\");\n        return;\n      }\n      const t = this.sessionRequestQueue.queue[0];\n      if (!t) {\n        this.client.logger.info(\"session request queue is empty.\");\n        return;\n      }\n      try {\n        this.sessionRequestQueue.state = ei.active, this.client.events.emit(\"session_request\", t);\n      } catch (s) {\n        this.client.logger.error(s);\n      }\n    }, this.onPairingCreated = (t) => {\n      if (t.active)\n        return;\n      const s = this.client.proposal.getAll().find((r) => r.pairingTopic === t.topic);\n      s && this.onSessionProposeRequest(t.topic, ti(\"wc_sessionPropose\", { requiredNamespaces: s.requiredNamespaces, optionalNamespaces: s.optionalNamespaces, relays: s.relays, proposer: s.proposer }, s.id));\n    }, this.isValidConnect = async (t) => {\n      if (!St(t)) {\n        const { message: u } = Y(\"MISSING_OR_INVALID\", `connect() params: ${JSON.stringify(t)}`);\n        throw new Error(u);\n      }\n      const { pairingTopic: s, requiredNamespaces: r, optionalNamespaces: n, sessionProperties: o, relays: c } = t;\n      if (bt(s) || await this.isValidPairingTopic(s), !Qp(c, !0)) {\n        const { message: u } = Y(\"MISSING_OR_INVALID\", `connect() relays: ${c}`);\n        throw new Error(u);\n      }\n      !bt(r) && cs(r) !== 0 && this.validateNamespaces(r, \"requiredNamespaces\"), !bt(n) && cs(n) !== 0 && this.validateNamespaces(n, \"optionalNamespaces\"), bt(o) || this.validateSessionProps(o, \"sessionProperties\");\n    }, this.validateNamespaces = (t, s) => {\n      const r = Jp(t, \"connect()\", s);\n      if (r)\n        throw new Error(r.message);\n    }, this.isValidApprove = async (t) => {\n      if (!St(t))\n        throw new Error(Y(\"MISSING_OR_INVALID\", `approve() params: ${t}`).message);\n      const { id: s, namespaces: r, relayProtocol: n, sessionProperties: o } = t;\n      await this.isValidProposalId(s);\n      const c = this.client.proposal.get(s), u = zs(r, \"approve()\");\n      if (u)\n        throw new Error(u.message);\n      const d = Mo(c.requiredNamespaces, r, \"approve()\");\n      if (d)\n        throw new Error(d.message);\n      if (!ot(n, !0)) {\n        const { message: p } = Y(\"MISSING_OR_INVALID\", `approve() relayProtocol: ${n}`);\n        throw new Error(p);\n      }\n      bt(o) || this.validateSessionProps(o, \"sessionProperties\");\n    }, this.isValidReject = async (t) => {\n      if (!St(t)) {\n        const { message: n } = Y(\"MISSING_OR_INVALID\", `reject() params: ${t}`);\n        throw new Error(n);\n      }\n      const { id: s, reason: r } = t;\n      if (await this.isValidProposalId(s), !Zp(r)) {\n        const { message: n } = Y(\"MISSING_OR_INVALID\", `reject() reason: ${JSON.stringify(r)}`);\n        throw new Error(n);\n      }\n    }, this.isValidSessionSettleRequest = (t) => {\n      if (!St(t)) {\n        const { message: d } = Y(\"MISSING_OR_INVALID\", `onSessionSettleRequest() params: ${t}`);\n        throw new Error(d);\n      }\n      const { relay: s, controller: r, namespaces: n, expiry: o } = t;\n      if (!Kc(s)) {\n        const { message: d } = Y(\"MISSING_OR_INVALID\", \"onSessionSettleRequest() relay protocol should be a string\");\n        throw new Error(d);\n      }\n      const c = Bp(r, \"onSessionSettleRequest()\");\n      if (c)\n        throw new Error(c.message);\n      const u = zs(n, \"onSessionSettleRequest()\");\n      if (u)\n        throw new Error(u.message);\n      if (ai(o)) {\n        const { message: d } = Y(\"EXPIRED\", \"onSessionSettleRequest()\");\n        throw new Error(d);\n      }\n    }, this.isValidUpdate = async (t) => {\n      if (!St(t)) {\n        const { message: u } = Y(\"MISSING_OR_INVALID\", `update() params: ${t}`);\n        throw new Error(u);\n      }\n      const { topic: s, namespaces: r } = t;\n      await this.isValidSessionTopic(s);\n      const n = this.client.session.get(s), o = zs(r, \"update()\");\n      if (o)\n        throw new Error(o.message);\n      const c = Mo(n.requiredNamespaces, r, \"update()\");\n      if (c)\n        throw new Error(c.message);\n    }, this.isValidExtend = async (t) => {\n      if (!St(t)) {\n        const { message: r } = Y(\"MISSING_OR_INVALID\", `extend() params: ${t}`);\n        throw new Error(r);\n      }\n      const { topic: s } = t;\n      await this.isValidSessionTopic(s);\n    }, this.isValidRequest = async (t) => {\n      if (!St(t)) {\n        const { message: u } = Y(\"MISSING_OR_INVALID\", `request() params: ${t}`);\n        throw new Error(u);\n      }\n      const { topic: s, request: r, chainId: n, expiry: o } = t;\n      await this.isValidSessionTopic(s);\n      const { namespaces: c } = this.client.session.get(s);\n      if (!Lo(c, n)) {\n        const { message: u } = Y(\"MISSING_OR_INVALID\", `request() chainId: ${n}`);\n        throw new Error(u);\n      }\n      if (!eg(r)) {\n        const { message: u } = Y(\"MISSING_OR_INVALID\", `request() ${JSON.stringify(r)}`);\n        throw new Error(u);\n      }\n      if (!sg(c, n, r.method)) {\n        const { message: u } = Y(\"MISSING_OR_INVALID\", `request() method: ${r.method}`);\n        throw new Error(u);\n      }\n      if (o && !ag(o, Cr)) {\n        const { message: u } = Y(\"MISSING_OR_INVALID\", `request() expiry: ${o}. Expiry must be a number (in seconds) between ${Cr.min} and ${Cr.max}`);\n        throw new Error(u);\n      }\n    }, this.isValidRespond = async (t) => {\n      if (!St(t)) {\n        const { message: n } = Y(\"MISSING_OR_INVALID\", `respond() params: ${t}`);\n        throw new Error(n);\n      }\n      const { topic: s, response: r } = t;\n      if (await this.isValidSessionTopic(s), !tg(r)) {\n        const { message: n } = Y(\"MISSING_OR_INVALID\", `respond() response: ${JSON.stringify(r)}`);\n        throw new Error(n);\n      }\n    }, this.isValidPing = async (t) => {\n      if (!St(t)) {\n        const { message: r } = Y(\"MISSING_OR_INVALID\", `ping() params: ${t}`);\n        throw new Error(r);\n      }\n      const { topic: s } = t;\n      await this.isValidSessionOrPairingTopic(s);\n    }, this.isValidEmit = async (t) => {\n      if (!St(t)) {\n        const { message: c } = Y(\"MISSING_OR_INVALID\", `emit() params: ${t}`);\n        throw new Error(c);\n      }\n      const { topic: s, event: r, chainId: n } = t;\n      await this.isValidSessionTopic(s);\n      const { namespaces: o } = this.client.session.get(s);\n      if (!Lo(o, n)) {\n        const { message: c } = Y(\"MISSING_OR_INVALID\", `emit() chainId: ${n}`);\n        throw new Error(c);\n      }\n      if (!ig(r)) {\n        const { message: c } = Y(\"MISSING_OR_INVALID\", `emit() event: ${JSON.stringify(r)}`);\n        throw new Error(c);\n      }\n      if (!rg(o, n, r.name)) {\n        const { message: c } = Y(\"MISSING_OR_INVALID\", `emit() event: ${JSON.stringify(r)}`);\n        throw new Error(c);\n      }\n    }, this.isValidDisconnect = async (t) => {\n      if (!St(t)) {\n        const { message: r } = Y(\"MISSING_OR_INVALID\", `disconnect() params: ${t}`);\n        throw new Error(r);\n      }\n      const { topic: s } = t;\n      await this.isValidSessionOrPairingTopic(s);\n    }, this.getVerifyContext = async (t, s) => {\n      const r = { verified: { verifyUrl: s.verifyUrl || Ks, validation: \"UNKNOWN\", origin: s.url || \"\" } };\n      try {\n        const n = await this.client.core.verify.resolve({ attestationId: t, verifyUrl: s.verifyUrl });\n        n && (r.verified.origin = n.origin, r.verified.isScam = n.isScam, r.verified.validation = n.origin === new URL(s.url).origin ? \"VALID\" : \"INVALID\");\n      } catch (n) {\n        this.client.logger.info(n);\n      }\n      return this.client.logger.info(`Verify context: ${JSON.stringify(r)}`), r;\n    }, this.validateSessionProps = (t, s) => {\n      Object.values(t).forEach((r) => {\n        if (!ot(r, !1)) {\n          const { message: n } = Y(\"MISSING_OR_INVALID\", `${s} must be in Record<string, string> format. Received: ${JSON.stringify(r)}`);\n          throw new Error(n);\n        }\n      });\n    };\n  }\n  async isInitialized() {\n    if (!this.initialized) {\n      const { message: e } = Y(\"NOT_INITIALIZED\", this.name);\n      throw new Error(e);\n    }\n    await this.client.core.relayer.confirmOnlineStateOrThrow();\n  }\n  registerRelayerEvents() {\n    this.client.core.relayer.on(gt.message, async (e) => {\n      const { topic: t, message: s } = e;\n      if (this.ignoredPayloadTypes.includes(this.client.core.crypto.getPayloadType(s)))\n        return;\n      const r = await this.client.core.crypto.decode(t, s);\n      try {\n        ji(r) ? (this.client.core.history.set(t, r), this.onRelayEventRequest({ topic: t, payload: r })) : Oi(r) ? (await this.client.core.history.resolve(r), await this.onRelayEventResponse({ topic: t, payload: r }), this.client.core.history.delete(t, r.id)) : this.onRelayEventUnknownPayload({ topic: t, payload: r });\n      } catch (n) {\n        this.client.logger.error(n);\n      }\n    });\n  }\n  registerExpirerEvents() {\n    this.client.core.expirer.on(Tt.expired, async (e) => {\n      const { topic: t, id: s } = jc(e.target);\n      if (s && this.client.pendingRequest.keys.includes(s))\n        return await this.deletePendingSessionRequest(s, Y(\"EXPIRED\"), !0);\n      t ? this.client.session.keys.includes(t) && (await this.deleteSession(t, !0), this.client.events.emit(\"session_expire\", { topic: t })) : s && (await this.deleteProposal(s, !0), this.client.events.emit(\"proposal_expire\", { id: s }));\n    });\n  }\n  registerPairingEvents() {\n    this.client.core.pairing.events.on(os.create, (e) => this.onPairingCreated(e));\n  }\n  isValidPairingTopic(e) {\n    if (!ot(e, !1)) {\n      const { message: t } = Y(\"MISSING_OR_INVALID\", `pairing topic should be a string: ${e}`);\n      throw new Error(t);\n    }\n    if (!this.client.core.pairing.pairings.keys.includes(e)) {\n      const { message: t } = Y(\"NO_MATCHING_KEY\", `pairing topic doesn't exist: ${e}`);\n      throw new Error(t);\n    }\n    if (ai(this.client.core.pairing.pairings.get(e).expiry)) {\n      const { message: t } = Y(\"EXPIRED\", `pairing topic: ${e}`);\n      throw new Error(t);\n    }\n  }\n  async isValidSessionTopic(e) {\n    if (!ot(e, !1)) {\n      const { message: t } = Y(\"MISSING_OR_INVALID\", `session topic should be a string: ${e}`);\n      throw new Error(t);\n    }\n    if (!this.client.session.keys.includes(e)) {\n      const { message: t } = Y(\"NO_MATCHING_KEY\", `session topic doesn't exist: ${e}`);\n      throw new Error(t);\n    }\n    if (ai(this.client.session.get(e).expiry)) {\n      await this.deleteSession(e);\n      const { message: t } = Y(\"EXPIRED\", `session topic: ${e}`);\n      throw new Error(t);\n    }\n  }\n  async isValidSessionOrPairingTopic(e) {\n    if (this.client.session.keys.includes(e))\n      await this.isValidSessionTopic(e);\n    else if (this.client.core.pairing.pairings.keys.includes(e))\n      this.isValidPairingTopic(e);\n    else if (ot(e, !1)) {\n      const { message: t } = Y(\"NO_MATCHING_KEY\", `session or pairing topic doesn't exist: ${e}`);\n      throw new Error(t);\n    } else {\n      const { message: t } = Y(\"MISSING_OR_INVALID\", `session or pairing topic should be a string: ${e}`);\n      throw new Error(t);\n    }\n  }\n  async isValidProposalId(e) {\n    if (!Xp(e)) {\n      const { message: t } = Y(\"MISSING_OR_INVALID\", `proposal id should be a number: ${e}`);\n      throw new Error(t);\n    }\n    if (!this.client.proposal.keys.includes(e)) {\n      const { message: t } = Y(\"NO_MATCHING_KEY\", `proposal id doesn't exist: ${e}`);\n      throw new Error(t);\n    }\n    if (ai(this.client.proposal.get(e).expiry)) {\n      await this.deleteProposal(e);\n      const { message: t } = Y(\"EXPIRED\", `proposal id: ${e}`);\n      throw new Error(t);\n    }\n  }\n}, vm = class extends dr {\n  constructor(e, t) {\n    super(e, t, cm, Sn), this.core = e, this.logger = t;\n  }\n}, _m = class extends dr {\n  constructor(e, t) {\n    super(e, t, um, Sn), this.core = e, this.logger = t;\n  }\n}, Em = class extends dr {\n  constructor(e, t) {\n    super(e, t, dm, Sn, (s) => s.id), this.core = e, this.logger = t;\n  }\n}, Sm = class ph extends El {\n  constructor(e) {\n    super(e), this.protocol = lh, this.version = dh, this.name = Rr.name, this.events = new We.EventEmitter(), this.on = (s, r) => this.events.on(s, r), this.once = (s, r) => this.events.once(s, r), this.off = (s, r) => this.events.off(s, r), this.removeListener = (s, r) => this.events.removeListener(s, r), this.removeAllListeners = (s) => this.events.removeAllListeners(s), this.connect = async (s) => {\n      try {\n        return await this.engine.connect(s);\n      } catch (r) {\n        throw this.logger.error(r.message), r;\n      }\n    }, this.pair = async (s) => {\n      try {\n        return await this.engine.pair(s);\n      } catch (r) {\n        throw this.logger.error(r.message), r;\n      }\n    }, this.approve = async (s) => {\n      try {\n        return await this.engine.approve(s);\n      } catch (r) {\n        throw this.logger.error(r.message), r;\n      }\n    }, this.reject = async (s) => {\n      try {\n        return await this.engine.reject(s);\n      } catch (r) {\n        throw this.logger.error(r.message), r;\n      }\n    }, this.update = async (s) => {\n      try {\n        return await this.engine.update(s);\n      } catch (r) {\n        throw this.logger.error(r.message), r;\n      }\n    }, this.extend = async (s) => {\n      try {\n        return await this.engine.extend(s);\n      } catch (r) {\n        throw this.logger.error(r.message), r;\n      }\n    }, this.request = async (s) => {\n      try {\n        return await this.engine.request(s);\n      } catch (r) {\n        throw this.logger.error(r.message), r;\n      }\n    }, this.respond = async (s) => {\n      try {\n        return await this.engine.respond(s);\n      } catch (r) {\n        throw this.logger.error(r.message), r;\n      }\n    }, this.ping = async (s) => {\n      try {\n        return await this.engine.ping(s);\n      } catch (r) {\n        throw this.logger.error(r.message), r;\n      }\n    }, this.emit = async (s) => {\n      try {\n        return await this.engine.emit(s);\n      } catch (r) {\n        throw this.logger.error(r.message), r;\n      }\n    }, this.disconnect = async (s) => {\n      try {\n        return await this.engine.disconnect(s);\n      } catch (r) {\n        throw this.logger.error(r.message), r;\n      }\n    }, this.find = (s) => {\n      try {\n        return this.engine.find(s);\n      } catch (r) {\n        throw this.logger.error(r.message), r;\n      }\n    }, this.getPendingSessionRequests = () => {\n      try {\n        return this.engine.getPendingSessionRequests();\n      } catch (s) {\n        throw this.logger.error(s.message), s;\n      }\n    }, this.name = e?.name || Rr.name, this.metadata = e?.metadata || gp();\n    const t = typeof e?.logger < \"u\" && typeof e?.logger != \"string\" ? e.logger : ee.pino(ee.getDefaultLoggerOptions({ level: e?.logger || Rr.logger }));\n    this.core = e?.core || new am(e), this.logger = ee.generateChildLogger(t, this.name), this.session = new _m(this.core, this.logger), this.proposal = new vm(this.core, this.logger), this.pendingRequest = new Em(this.core, this.logger), this.engine = new wm(this);\n  }\n  static async init(e) {\n    const t = new ph(e);\n    return await t.initialize(), t;\n  }\n  get context() {\n    return ee.getLoggerContext(this.logger);\n  }\n  get pairing() {\n    return this.core.pairing.pairings;\n  }\n  async initialize() {\n    this.logger.trace(\"Initialized\");\n    try {\n      await this.core.start(), await this.session.init(), await this.proposal.init(), await this.pendingRequest.init(), await this.engine.init(), this.core.verify.init({ verifyUrl: this.metadata.verifyUrl }), this.logger.info(\"SignClient Initialization Success\");\n    } catch (e) {\n      throw this.logger.info(\"SignClient Initialization Failure\"), this.logger.error(e.message), e;\n    }\n  }\n};\nconst Im = () => {\n  const e = hn()?.os?.toLowerCase();\n  return e?.includes(\"android\") ? \"android\" : e?.toLowerCase().includes(\"ios\") || e?.toLowerCase().includes(\"mac\") && navigator.maxTouchPoints > 1 ? \"ios\" : \"desktop\";\n}, Us = Im(), Dm = {\n  position: \"fixed\",\n  top: \"0\",\n  left: \"0\",\n  right: \"0\",\n  bottom: \"0\",\n  backgroundColor: \"rgba(0,0,0,0.8)\",\n  backdropFilter: \"blur(10px)\",\n  zIndex: \"9999\",\n  display: \"flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  flexDirection: \"column\",\n  color: \"white\",\n  fontWeight: \"500\",\n  fontFamily: \"'Barlow', sans-serif\"\n}, xm = {\n  width: \"840px\",\n  height: \"540px\",\n  zIndex: \"99999\",\n  backgroundColor: \"white\",\n  border: \"none\",\n  outline: \"none\",\n  borderRadius: \"40px\",\n  boxShadow: \"0px 4px 40px 0px rgb(0 0 0), 0px 4px 8px 0px rgb(0 0 0 / 25%)\",\n  position: \"fixed\",\n  top: \"50%\",\n  left: \"50%\",\n  transform: \"translate(-50%,-50%)\"\n}, Om = `\n  <div id=\"argent-mobile-modal-container\" style=\"position: relative\">\n    <iframe class=\"argent-iframe\" allow=\"clipboard-write\"></iframe>\n    <div class=\"argent-close-button\" style=\"position: absolute; top: 24px; right: 24px; cursor: pointer;\">\n      <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n        <circle cx=\"16\" cy=\"16\" r=\"16\" fill=\"#F5F3F0\"/>\n        <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M22.2462 9.75382C22.7018 10.2094 22.7018 10.9481 22.2462 11.4037L17.6499 16L22.2462 20.5963C22.7018 21.0519 22.7018 21.7906 22.2462 22.2462C21.7905 22.7018 21.0519 22.7018 20.5962 22.2462L16 17.6499L11.4039 22.246C10.9482 22.7017 10.2096 22.7017 9.75394 22.246C9.29833 21.7904 9.29833 21.0517 9.75394 20.5961L14.3501 16L9.75394 11.4039C9.29833 10.9483 9.29833 10.2096 9.75394 9.75396C10.2096 9.29835 10.9482 9.29835 11.4039 9.75396L16 14.3501L20.5962 9.75382C21.0519 9.29821 21.7905 9.29821 22.2462 9.75382Z\" fill=\"#333332\"/>\n      </svg>\n    </div>\n  </div>\n`;\nclass Nm {\n  constructor() {\n    we(this, \"bridgeUrl\", \"https://login.argent.xyz\");\n    we(this, \"mobileUrl\", \"argent://\");\n    we(this, \"type\", \"overlay\");\n    we(this, \"wcUri\");\n    we(this, \"overlay\");\n    we(this, \"popupWindow\");\n    we(this, \"closingTimeout\");\n    we(this, \"close\", () => {\n      this.overlay?.remove(), this.popupWindow?.close(), this.overlay = void 0, this.popupWindow = void 0;\n    });\n  }\n  showConnectionModal(e) {\n    const t = encodeURIComponent(e), s = encodeURIComponent(window.location.href);\n    this.showModal({\n      desktop: `${this.bridgeUrl}?wc=${t}&device=desktop`,\n      ios: `${this.mobileUrl}app/wc?uri=${t}&href=${s}&device=mobile`,\n      android: `${this.mobileUrl}app/wc?uri=${t}&href=${s}&device=mobile`\n    });\n  }\n  showApprovalModal(e) {\n    if (Us === \"desktop\") {\n      this.showModal({\n        desktop: `${this.bridgeUrl}?action=sign`,\n        ios: \"\",\n        android: \"\"\n      });\n      return;\n    }\n    const t = encodeURIComponent(window.location.href);\n    this.showModal({\n      desktop: `${this.bridgeUrl}?action=sign&device=desktop`,\n      ios: `${this.mobileUrl}app/wc/request?href=${t}&device=mobile`,\n      android: `${this.mobileUrl}app/wc/request?href=${t}&device=mobile`\n    });\n  }\n  closeModal(e) {\n    e ? (this.overlay?.querySelector(\"iframe\")?.contentWindow?.postMessage(\"argent-login.success\", \"*\"), this.popupWindow?.postMessage(\"argent-login.success\", \"*\"), this.closingTimeout = setTimeout(this.close, 3400)) : this.close();\n  }\n  showModal(e) {\n    if (clearTimeout(this.closingTimeout), (this.overlay || this.popupWindow) && this.close(), Us === \"android\" || Us === \"ios\") {\n      const n = document.createElement(\"button\");\n      n.style.display = \"none\", n.addEventListener(\"click\", () => {\n        window.location.href = e[Us];\n      }), n.click();\n      return;\n    }\n    if (this.type === \"window\") {\n      const n = \"menubar=no,location=no,resizable=no,scrollbars=no,status=no,width=840,height=540\";\n      this.popupWindow = window.open(e.desktop, \"_blank\", n) || void 0;\n      return;\n    }\n    const t = document.createElement(\"div\");\n    t.innerHTML = Om, t.id = \"argent-mobile-modal-overlay\";\n    for (const [n, o] of Object.entries(Dm))\n      t.style[n] = o;\n    document.body.appendChild(t), t.addEventListener(\"click\", () => this.closeModal()), this.overlay = t;\n    const s = t.querySelector(\"iframe\");\n    s.setAttribute(\"src\", e.desktop);\n    for (const [n, o] of Object.entries(xm))\n      s.style[n] = o;\n    t.querySelector(\n      \".argent-close-button\"\n    ).addEventListener(\"click\", () => this.closeModal());\n  }\n}\nconst kt = new Nm(), Xs = starknet__WEBPACK_IMPORTED_MODULE_1__.constants.NetworkName, Pm = async ({\n  projectId: i,\n  chainId: e,\n  name: t,\n  description: s,\n  rpcUrl: r,\n  bridgeUrl: n = Rm(e),\n  mobileUrl: o = Cm(e),\n  modalType: c = \"overlay\",\n  url: u,\n  icons: d,\n  walletConnect: p,\n  provider: b\n}, x) => {\n  if (!n)\n    throw new Error(\"bridgeUrl is required\");\n  if (!o)\n    throw new Error(\"mobileUrl is required\");\n  kt.bridgeUrl = n, kt.mobileUrl = o, kt.type = c;\n  const O = {\n    projectId: i,\n    metadata: {\n      name: t ?? \"Unknown dapp\",\n      description: s ?? \"Unknown dapp description\",\n      url: u ?? \"#\",\n      icons: d ?? [],\n      ...p?.metadata\n    }\n  }, _ = await Sm.init(O), C = new x({ client: _, chainId: e, rpcUrl: r, provider: b });\n  _.on(\"session_event\", (F) => {\n  }), _.on(\"session_update\", ({ topic: F, params: K }) => {\n    const { namespaces: I } = K, D = _.session.get(F);\n    C.updateSession({ ...D, namespaces: I });\n  }), _.on(\"session_delete\", () => {\n  });\n  try {\n    const F = _.session.getAll().find(C.isValidSession);\n    if (F)\n      return C.updateSession(F), C;\n    const K = { requiredNamespaces: C.getRequiredNamespaces() };\n    (0,_index_ed16cdbf_js__WEBPACK_IMPORTED_MODULE_2__.r)(), await new Promise((y) => setTimeout(y, 200));\n    const { uri: I, approval: D } = await _.connect(K);\n    if (I) {\n      kt.showConnectionModal(I), kt.wcUri = I;\n      const y = await D();\n      C.updateSession(y), kt.closeModal(\"animateSuccess\");\n    }\n    return C;\n  } catch {\n    return console.error(\"@argent/login::error\"), kt.closeModal(), null;\n  }\n}, Rm = (i) => {\n  if (!i)\n    throw new Error(\n      `Unknown or unsupported chainId (${i}), either specify a supported chain or set bridgeUrl.`\n    );\n  const e = parseInt(`${i}`);\n  if (String(i).startsWith(Xs.SN_GOERLI) || e === 5)\n    return \"https://login.hydrogen.argent47.net\";\n  if (String(i).startsWith(Xs.SN_MAIN) || e === 1)\n    return \"https://login.argent.xyz\";\n}, Cm = (i) => {\n  if (!i)\n    throw new Error(\n      `Unknown or unsupported chainId (${i}), either specify a supported chain or set mobileUrl.`\n    );\n  const e = parseInt(`${i}`);\n  if (String(i).startsWith(Xs.SN_GOERLI) || e === 5)\n    return \"argent-dev://\";\n  if (String(i).startsWith(Xs.SN_MAIN) || e === 1)\n    return \"argent://\";\n};\nclass Am extends Nt {\n  constructor(e) {\n    super(), this.opts = e, this.protocol = \"wc\", this.version = 2;\n  }\n}\nclass Tm extends Nt {\n  constructor(e, t) {\n    super(), this.core = e, this.logger = t, this.records = /* @__PURE__ */ new Map();\n  }\n}\nclass $m {\n  constructor(e, t) {\n    this.logger = e, this.core = t;\n  }\n}\nclass Fm extends Nt {\n  constructor(e, t) {\n    super(), this.relayer = e, this.logger = t;\n  }\n}\nlet Um = class extends Nt {\n  constructor(e) {\n    super();\n  }\n}, Lm = class {\n  constructor(e, t, s, r) {\n    this.core = e, this.logger = t, this.name = s;\n  }\n};\nclass Mm extends Nt {\n  constructor(e, t) {\n    super(), this.relayer = e, this.logger = t;\n  }\n}\nclass qm extends Nt {\n  constructor(e, t) {\n    super(), this.core = e, this.logger = t;\n  }\n}\nclass jm {\n  constructor(e, t) {\n    this.projectId = e, this.logger = t;\n  }\n}\nlet zm = class {\n  constructor(e) {\n    this.opts = e, this.protocol = \"wc\", this.version = 2;\n  }\n}, Km = class {\n  constructor(e) {\n    this.client = e;\n  }\n};\nconst gh = \":\";\nfunction Vm(i) {\n  const { namespace: e, reference: t } = i;\n  return [e, t].join(gh);\n}\nfunction Bm(i) {\n  const [e, t, s] = i.split(gh);\n  return { namespace: e, reference: t, address: s };\n}\nfunction km(i, e) {\n  const t = [];\n  return i.forEach((s) => {\n    const r = e(s);\n    t.includes(r) || t.push(r);\n  }), t;\n}\nfunction Hm(i) {\n  const { namespace: e, reference: t } = Bm(i);\n  return Vm({ namespace: e, reference: t });\n}\nfunction Gm(i) {\n  return km(i, Hm);\n}\nfunction Wm(i, e = []) {\n  const t = [];\n  return Object.keys(i).forEach((s) => {\n    if (e.length && !e.includes(s))\n      return;\n    const r = i[s];\n    t.push(...r.accounts);\n  }), t;\n}\nfunction Ym(i, e = []) {\n  const t = [];\n  return Object.keys(i).forEach((s) => {\n    if (e.length && !e.includes(s))\n      return;\n    const r = i[s];\n    t.push(...Gm(r.accounts));\n  }), t;\n}\nfunction Jm(i, e = []) {\n  const t = [];\n  return Object.keys(i).forEach((s) => {\n    if (e.length && !e.includes(s))\n      return;\n    const r = i[s];\n    t.push(...In(s, r));\n  }), t;\n}\nfunction In(i, e) {\n  return i.includes(\":\") ? [i] : e.chains || [];\n}\nconst yh = \"base10\", _t = \"base16\", Jr = \"base64pad\", Dn = \"utf8\", mh = 0, Ni = 1, Qm = 0, ga = 1, Qr = 12, xn = 32;\nfunction Xm() {\n  const i = ms.generateKeyPair();\n  return { privateKey: Ne(i.secretKey, _t), publicKey: Ne(i.publicKey, _t) };\n}\nfunction Xr() {\n  const i = li.randomBytes(xn);\n  return Ne(i, _t);\n}\nfunction Zm(i, e) {\n  const t = ms.sharedKey(Ce(i, _t), Ce(e, _t)), s = new Rc(Si.SHA256, t).expand(xn);\n  return Ne(s, _t);\n}\nfunction eb(i) {\n  const e = Si.hash(Ce(i, _t));\n  return Ne(e, _t);\n}\nfunction Ui(i) {\n  const e = Si.hash(Ce(i, Dn));\n  return Ne(e, _t);\n}\nfunction tb(i) {\n  return Ce(`${i}`, yh);\n}\nfunction Is(i) {\n  return Number(Ne(i, yh));\n}\nfunction ib(i) {\n  const e = tb(typeof i.type < \"u\" ? i.type : mh);\n  if (Is(e) === Ni && typeof i.senderPublicKey > \"u\")\n    throw new Error(\"Missing sender public key for type 1 envelope\");\n  const t = typeof i.senderPublicKey < \"u\" ? Ce(i.senderPublicKey, _t) : void 0, s = typeof i.iv < \"u\" ? Ce(i.iv, _t) : li.randomBytes(Qr), r = new gs.ChaCha20Poly1305(Ce(i.symKey, _t)).seal(s, Ce(i.message, Dn));\n  return rb({ type: e, sealed: r, iv: s, senderPublicKey: t });\n}\nfunction sb(i) {\n  const e = new gs.ChaCha20Poly1305(Ce(i.symKey, _t)), { sealed: t, iv: s } = Zs(i.encoded), r = e.open(s, t);\n  if (r === null)\n    throw new Error(\"Failed to decrypt\");\n  return Ne(r, Dn);\n}\nfunction rb(i) {\n  if (Is(i.type) === Ni) {\n    if (typeof i.senderPublicKey > \"u\")\n      throw new Error(\"Missing sender public key for type 1 envelope\");\n    return Ne(ls([i.type, i.senderPublicKey, i.iv, i.sealed]), Jr);\n  }\n  return Ne(ls([i.type, i.iv, i.sealed]), Jr);\n}\nfunction Zs(i) {\n  const e = Ce(i, Jr), t = e.slice(Qm, ga), s = ga;\n  if (Is(t) === Ni) {\n    const c = s + xn, u = c + Qr, d = e.slice(s, c), p = e.slice(c, u), b = e.slice(u);\n    return { type: t, sealed: b, iv: p, senderPublicKey: d };\n  }\n  const r = s + Qr, n = e.slice(s, r), o = e.slice(r);\n  return { type: t, sealed: o, iv: n };\n}\nfunction nb(i, e) {\n  const t = Zs(i);\n  return bh({ type: Is(t.type), senderPublicKey: typeof t.senderPublicKey < \"u\" ? Ne(t.senderPublicKey, _t) : void 0, receiverPublicKey: e?.receiverPublicKey });\n}\nfunction bh(i) {\n  const e = i?.type || mh;\n  if (e === Ni) {\n    if (typeof i?.senderPublicKey > \"u\")\n      throw new Error(\"missing sender public key\");\n    if (typeof i?.receiverPublicKey > \"u\")\n      throw new Error(\"missing receiver public key\");\n  }\n  return { type: e, senderPublicKey: i?.senderPublicKey, receiverPublicKey: i?.receiverPublicKey };\n}\nfunction ya(i) {\n  return i.type === Ni && typeof i.senderPublicKey == \"string\" && typeof i.receiverPublicKey == \"string\";\n}\nvar ob = Object.defineProperty, ma = Object.getOwnPropertySymbols, ab = Object.prototype.hasOwnProperty, cb = Object.prototype.propertyIsEnumerable, ba = (i, e, t) => e in i ? ob(i, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : i[e] = t, wa = (i, e) => {\n  for (var t in e || (e = {}))\n    ab.call(e, t) && ba(i, t, e[t]);\n  if (ma)\n    for (var t of ma(e))\n      cb.call(e, t) && ba(i, t, e[t]);\n  return i;\n};\nconst hb = \"ReactNative\", as = { reactNative: \"react-native\", node: \"node\", browser: \"browser\", unknown: \"unknown\" }, ub = \"js\";\nfunction On() {\n  return typeof process < \"u\" && typeof process.versions < \"u\" && typeof process.versions.node < \"u\";\n}\nfunction wh() {\n  return !un() && !!bs() && navigator.product === hb;\n}\nfunction Nn() {\n  return !On() && !!bs();\n}\nfunction lb() {\n  return wh() ? as.reactNative : On() ? as.node : Nn() ? as.browser : as.unknown;\n}\nfunction db(i, e) {\n  let t = ii.parse(i);\n  return t = wa(wa({}, t), e), i = ii.stringify(t), i;\n}\nfunction fb() {\n  return fn() || { name: \"\", description: \"\", url: \"\", icons: [\"\"] };\n}\nfunction pb() {\n  const i = hn();\n  if (i === null)\n    return \"unknown\";\n  const e = i.os ? i.os.replace(\" \", \"\").toLowerCase() : \"unknown\";\n  return i.type === \"browser\" ? [e, i.name, i.version].join(\"-\") : [e, i.version].join(\"-\");\n}\nfunction gb() {\n  var i;\n  const e = lb();\n  return e === as.browser ? [e, ((i = ln()) == null ? void 0 : i.host) || \"unknown\"].join(\":\") : e;\n}\nfunction yb(i, e, t) {\n  const s = pb(), r = gb();\n  return [[i, e].join(\"-\"), [ub, t].join(\"-\"), s, r].join(\"/\");\n}\nfunction mb({ protocol: i, version: e, relayUrl: t, sdkVersion: s, auth: r, projectId: n, useOnCloseEvent: o }) {\n  const c = t.split(\"?\"), u = yb(i, e, s), d = { auth: r, ua: u, projectId: n, useOnCloseEvent: o || void 0 }, p = db(c[1] || \"\", d);\n  return c[0] + \"?\" + p;\n}\nfunction Ei(i, e) {\n  return i.filter((t) => e.includes(t)).length === i.length;\n}\nfunction vh(i) {\n  return Object.fromEntries(i.entries());\n}\nfunction _h(i) {\n  return new Map(Object.entries(i));\n}\nfunction Ti(i = V.FIVE_MINUTES, e) {\n  const t = V.toMiliseconds(i || V.FIVE_MINUTES);\n  let s, r, n;\n  return { resolve: (o) => {\n    n && s && (clearTimeout(n), s(o));\n  }, reject: (o) => {\n    n && r && (clearTimeout(n), r(o));\n  }, done: () => new Promise((o, c) => {\n    n = setTimeout(() => {\n      c(new Error(e));\n    }, t), s = o, r = c;\n  }) };\n}\nfunction er(i, e, t) {\n  return new Promise(async (s, r) => {\n    const n = setTimeout(() => r(new Error(t)), e);\n    try {\n      const o = await i;\n      s(o);\n    } catch (o) {\n      r(o);\n    }\n    clearTimeout(n);\n  });\n}\nfunction Eh(i, e) {\n  if (typeof e == \"string\" && e.startsWith(`${i}:`))\n    return e;\n  if (i.toLowerCase() === \"topic\") {\n    if (typeof e != \"string\")\n      throw new Error('Value must be \"string\" for expirer target type: topic');\n    return `topic:${e}`;\n  } else if (i.toLowerCase() === \"id\") {\n    if (typeof e != \"number\")\n      throw new Error('Value must be \"number\" for expirer target type: id');\n    return `id:${e}`;\n  }\n  throw new Error(`Unknown expirer target type: ${i}`);\n}\nfunction bb(i) {\n  return Eh(\"topic\", i);\n}\nfunction wb(i) {\n  return Eh(\"id\", i);\n}\nfunction Sh(i) {\n  const [e, t] = i.split(\":\"), s = { id: void 0, topic: void 0 };\n  if (e === \"topic\" && typeof t == \"string\")\n    s.topic = t;\n  else if (e === \"id\" && Number.isInteger(Number(t)))\n    s.id = Number(t);\n  else\n    throw new Error(`Invalid target, expected id:number or topic:string, got ${e}:${t}`);\n  return s;\n}\nfunction Ht(i, e) {\n  return V.fromMiliseconds((e || Date.now()) + V.toMiliseconds(i));\n}\nfunction ci(i) {\n  return Date.now() >= V.toMiliseconds(i);\n}\nfunction ke(i, e) {\n  return `${i}${e ? `:${e}` : \"\"}`;\n}\nconst vb = \"irn\";\nfunction Zr(i) {\n  return i?.relay || { protocol: vb };\n}\nfunction Vs(i) {\n  const e = Ac[i];\n  if (typeof e > \"u\")\n    throw new Error(`Relay Protocol not supported: ${i}`);\n  return e;\n}\nvar _b = Object.defineProperty, va = Object.getOwnPropertySymbols, Eb = Object.prototype.hasOwnProperty, Sb = Object.prototype.propertyIsEnumerable, _a = (i, e, t) => e in i ? _b(i, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : i[e] = t, Ib = (i, e) => {\n  for (var t in e || (e = {}))\n    Eb.call(e, t) && _a(i, t, e[t]);\n  if (va)\n    for (var t of va(e))\n      Sb.call(e, t) && _a(i, t, e[t]);\n  return i;\n};\nfunction Db(i, e = \"-\") {\n  const t = {}, s = \"relay\" + e;\n  return Object.keys(i).forEach((r) => {\n    if (r.startsWith(s)) {\n      const n = r.replace(s, \"\"), o = i[r];\n      t[n] = o;\n    }\n  }), t;\n}\nfunction xb(i) {\n  const e = i.indexOf(\":\"), t = i.indexOf(\"?\") !== -1 ? i.indexOf(\"?\") : void 0, s = i.substring(0, e), r = i.substring(e + 1, t).split(\"@\"), n = typeof t < \"u\" ? i.substring(t) : \"\", o = ii.parse(n);\n  return { protocol: s, topic: Ob(r[0]), version: parseInt(r[1], 10), symKey: o.symKey, relay: Db(o) };\n}\nfunction Ob(i) {\n  return i.startsWith(\"//\") ? i.substring(2) : i;\n}\nfunction Nb(i, e = \"-\") {\n  const t = \"relay\", s = {};\n  return Object.keys(i).forEach((r) => {\n    const n = t + e + r;\n    i[r] && (s[n] = i[r]);\n  }), s;\n}\nfunction Pb(i) {\n  return `${i.protocol}:${i.topic}@${i.version}?` + ii.stringify(Ib({ symKey: i.symKey }, Nb(i.relay)));\n}\nfunction zi(i) {\n  const e = [];\n  return i.forEach((t) => {\n    const [s, r] = t.split(\":\");\n    e.push(`${s}:${r}`);\n  }), e;\n}\nfunction Rb(i) {\n  const e = [];\n  return Object.values(i).forEach((t) => {\n    e.push(...zi(t.accounts));\n  }), e;\n}\nfunction Cb(i, e) {\n  const t = [];\n  return Object.values(i).forEach((s) => {\n    zi(s.accounts).includes(e) && t.push(...s.methods);\n  }), t;\n}\nfunction Ab(i, e) {\n  const t = [];\n  return Object.values(i).forEach((s) => {\n    zi(s.accounts).includes(e) && t.push(...s.events);\n  }), t;\n}\nfunction Tb(i, e) {\n  const t = Bs(i, e);\n  if (t)\n    throw new Error(t.message);\n  const s = {};\n  for (const [r, n] of Object.entries(i))\n    s[r] = { methods: n.methods, events: n.events, chains: n.accounts.map((o) => `${o.split(\":\")[0]}:${o.split(\":\")[1]}`) };\n  return s;\n}\nconst $b = { INVALID_METHOD: { message: \"Invalid method.\", code: 1001 }, INVALID_EVENT: { message: \"Invalid event.\", code: 1002 }, INVALID_UPDATE_REQUEST: { message: \"Invalid update request.\", code: 1003 }, INVALID_EXTEND_REQUEST: { message: \"Invalid extend request.\", code: 1004 }, INVALID_SESSION_SETTLE_REQUEST: { message: \"Invalid session settle request.\", code: 1005 }, UNAUTHORIZED_METHOD: { message: \"Unauthorized method.\", code: 3001 }, UNAUTHORIZED_EVENT: { message: \"Unauthorized event.\", code: 3002 }, UNAUTHORIZED_UPDATE_REQUEST: { message: \"Unauthorized update request.\", code: 3003 }, UNAUTHORIZED_EXTEND_REQUEST: { message: \"Unauthorized extend request.\", code: 3004 }, USER_REJECTED: { message: \"User rejected.\", code: 5e3 }, USER_REJECTED_CHAINS: { message: \"User rejected chains.\", code: 5001 }, USER_REJECTED_METHODS: { message: \"User rejected methods.\", code: 5002 }, USER_REJECTED_EVENTS: { message: \"User rejected events.\", code: 5003 }, UNSUPPORTED_CHAINS: { message: \"Unsupported chains.\", code: 5100 }, UNSUPPORTED_METHODS: { message: \"Unsupported methods.\", code: 5101 }, UNSUPPORTED_EVENTS: { message: \"Unsupported events.\", code: 5102 }, UNSUPPORTED_ACCOUNTS: { message: \"Unsupported accounts.\", code: 5103 }, UNSUPPORTED_NAMESPACE_KEY: { message: \"Unsupported namespace key.\", code: 5104 }, USER_DISCONNECTED: { message: \"User disconnected.\", code: 6e3 }, SESSION_SETTLEMENT_FAILED: { message: \"Session settlement failed.\", code: 7e3 }, WC_METHOD_UNSUPPORTED: { message: \"Unsupported wc_ method.\", code: 10001 } }, Fb = { NOT_INITIALIZED: { message: \"Not initialized.\", code: 1 }, NO_MATCHING_KEY: { message: \"No matching key.\", code: 2 }, RESTORE_WILL_OVERRIDE: { message: \"Restore will override.\", code: 3 }, RESUBSCRIBED: { message: \"Resubscribed.\", code: 4 }, MISSING_OR_INVALID: { message: \"Missing or invalid.\", code: 5 }, EXPIRED: { message: \"Expired.\", code: 6 }, UNKNOWN_TYPE: { message: \"Unknown type.\", code: 7 }, MISMATCHED_TOPIC: { message: \"Mismatched topic.\", code: 8 }, NON_CONFORMING_NAMESPACES: { message: \"Non conforming namespaces.\", code: 9 } };\nfunction J(i, e) {\n  const { message: t, code: s } = Fb[i];\n  return { message: e ? `${t} ${e}` : t, code: s };\n}\nfunction Je(i, e) {\n  const { message: t, code: s } = $b[i];\n  return { message: e ? `${t} ${e}` : t, code: s };\n}\nfunction Ds(i, e) {\n  return Array.isArray(i) ? typeof e < \"u\" && i.length ? i.every(e) : !0 : !1;\n}\nfunction us(i) {\n  return Object.getPrototypeOf(i) === Object.prototype && Object.keys(i).length;\n}\nfunction wt(i) {\n  return typeof i > \"u\";\n}\nfunction at(i, e) {\n  return e && wt(i) ? !0 : typeof i == \"string\" && !!i.trim().length;\n}\nfunction Pn(i, e) {\n  return e && wt(i) ? !0 : typeof i == \"number\" && !isNaN(i);\n}\nfunction Ub(i, e) {\n  const { requiredNamespaces: t } = e, s = Object.keys(i.namespaces), r = Object.keys(t);\n  let n = !0;\n  return Ei(r, s) ? (s.forEach((o) => {\n    const { accounts: c, methods: u, events: d } = i.namespaces[o], p = zi(c), b = t[o];\n    (!Ei(In(o, b), p) || !Ei(b.methods, u) || !Ei(b.events, d)) && (n = !1);\n  }), n) : !1;\n}\nfunction Rn(i) {\n  return at(i, !1) && i.includes(\":\") ? i.split(\":\").length === 2 : !1;\n}\nfunction Lb(i) {\n  if (at(i, !1) && i.includes(\":\")) {\n    const e = i.split(\":\");\n    if (e.length === 3) {\n      const t = e[0] + \":\" + e[1];\n      return !!e[2] && Rn(t);\n    }\n  }\n  return !1;\n}\nfunction Mb(i) {\n  if (at(i, !1))\n    try {\n      return typeof new URL(i) < \"u\";\n    } catch {\n      return !1;\n    }\n  return !1;\n}\nfunction qb(i) {\n  var e;\n  return (e = i?.proposer) == null ? void 0 : e.publicKey;\n}\nfunction jb(i) {\n  return i?.topic;\n}\nfunction zb(i, e) {\n  let t = null;\n  return at(i?.publicKey, !1) || (t = J(\"MISSING_OR_INVALID\", `${e} controller public key should be a string`)), t;\n}\nfunction Ea(i) {\n  let e = !0;\n  return Ds(i) ? i.length && (e = i.every((t) => at(t, !1))) : e = !1, e;\n}\nfunction Kb(i, e, t) {\n  let s = null;\n  return Ds(e) ? e.forEach((r) => {\n    s || (!Rn(r) || !r.includes(i)) && (s = Je(\"UNSUPPORTED_CHAINS\", `${t}, chain ${r} should be a string and conform to \"namespace:chainId\" format`));\n  }) : s = Je(\"UNSUPPORTED_CHAINS\", `${t}, chains ${e} should be an array of strings conforming to \"namespace:chainId\" format`), s;\n}\nfunction Vb(i, e) {\n  let t = null;\n  return Object.entries(i).forEach(([s, r]) => {\n    if (t)\n      return;\n    const n = Kb(s, In(s, r), `${e} requiredNamespace`);\n    n && (t = n);\n  }), t;\n}\nfunction Bb(i, e) {\n  let t = null;\n  return Ds(i) ? i.forEach((s) => {\n    t || Lb(s) || (t = Je(\"UNSUPPORTED_ACCOUNTS\", `${e}, account ${s} should be a string and conform to \"namespace:chainId:address\" format`));\n  }) : t = Je(\"UNSUPPORTED_ACCOUNTS\", `${e}, accounts should be an array of strings conforming to \"namespace:chainId:address\" format`), t;\n}\nfunction kb(i, e) {\n  let t = null;\n  return Object.values(i).forEach((s) => {\n    if (t)\n      return;\n    const r = Bb(s?.accounts, `${e} namespace`);\n    r && (t = r);\n  }), t;\n}\nfunction Hb(i, e) {\n  let t = null;\n  return Ea(i?.methods) ? Ea(i?.events) || (t = Je(\"UNSUPPORTED_EVENTS\", `${e}, events should be an array of strings or empty array for no events`)) : t = Je(\"UNSUPPORTED_METHODS\", `${e}, methods should be an array of strings or empty array for no methods`), t;\n}\nfunction Ih(i, e) {\n  let t = null;\n  return Object.values(i).forEach((s) => {\n    if (t)\n      return;\n    const r = Hb(s, `${e}, namespace`);\n    r && (t = r);\n  }), t;\n}\nfunction Gb(i, e, t) {\n  let s = null;\n  if (i && us(i)) {\n    const r = Ih(i, e);\n    r && (s = r);\n    const n = Vb(i, e);\n    n && (s = n);\n  } else\n    s = J(\"MISSING_OR_INVALID\", `${e}, ${t} should be an object with data`);\n  return s;\n}\nfunction Bs(i, e) {\n  let t = null;\n  if (i && us(i)) {\n    const s = Ih(i, e);\n    s && (t = s);\n    const r = kb(i, e);\n    r && (t = r);\n  } else\n    t = J(\"MISSING_OR_INVALID\", `${e}, namespaces should be an object with data`);\n  return t;\n}\nfunction Dh(i) {\n  return at(i.protocol, !0);\n}\nfunction Wb(i, e) {\n  let t = !1;\n  return e && !i ? t = !0 : i && Ds(i) && i.length && i.forEach((s) => {\n    t = Dh(s);\n  }), t;\n}\nfunction Yb(i) {\n  return typeof i == \"number\";\n}\nfunction It(i) {\n  return typeof i < \"u\" && typeof i !== null;\n}\nfunction Jb(i) {\n  return !(!i || typeof i != \"object\" || !i.code || !Pn(i.code, !1) || !i.message || !at(i.message, !1));\n}\nfunction Qb(i) {\n  return !(wt(i) || !at(i.method, !1));\n}\nfunction Xb(i) {\n  return !(wt(i) || wt(i.result) && wt(i.error) || !Pn(i.id, !1) || !at(i.jsonrpc, !1));\n}\nfunction Zb(i) {\n  return !(wt(i) || !at(i.name, !1));\n}\nfunction Sa(i, e) {\n  return !(!Rn(e) || !Rb(i).includes(e));\n}\nfunction ew(i, e, t) {\n  return at(t, !1) ? Cb(i, e).includes(t) : !1;\n}\nfunction tw(i, e, t) {\n  return at(t, !1) ? Ab(i, e).includes(t) : !1;\n}\nfunction Ia(i, e, t) {\n  let s = null;\n  const r = iw(i), n = sw(e), o = Object.keys(r), c = Object.keys(n), u = Da(Object.keys(i)), d = Da(Object.keys(e)), p = u.filter((b) => !d.includes(b));\n  return p.length && (s = J(\"NON_CONFORMING_NAMESPACES\", `${t} namespaces keys don't satisfy requiredNamespaces.\n      Required: ${p.toString()}\n      Received: ${Object.keys(e).toString()}`)), Ei(o, c) || (s = J(\"NON_CONFORMING_NAMESPACES\", `${t} namespaces chains don't satisfy required namespaces.\n      Required: ${o.toString()}\n      Approved: ${c.toString()}`)), Object.keys(e).forEach((b) => {\n    if (!b.includes(\":\") || s)\n      return;\n    const x = zi(e[b].accounts);\n    x.includes(b) || (s = J(\"NON_CONFORMING_NAMESPACES\", `${t} namespaces accounts don't satisfy namespace accounts for ${b}\n        Required: ${b}\n        Approved: ${x.toString()}`));\n  }), o.forEach((b) => {\n    s || (Ei(r[b].methods, n[b].methods) ? Ei(r[b].events, n[b].events) || (s = J(\"NON_CONFORMING_NAMESPACES\", `${t} namespaces events don't satisfy namespace events for ${b}`)) : s = J(\"NON_CONFORMING_NAMESPACES\", `${t} namespaces methods don't satisfy namespace methods for ${b}`));\n  }), s;\n}\nfunction iw(i) {\n  const e = {};\n  return Object.keys(i).forEach((t) => {\n    var s;\n    t.includes(\":\") ? e[t] = i[t] : (s = i[t].chains) == null || s.forEach((r) => {\n      e[r] = { methods: i[t].methods, events: i[t].events };\n    });\n  }), e;\n}\nfunction Da(i) {\n  return [...new Set(i.map((e) => e.includes(\":\") ? e.split(\":\")[0] : e))];\n}\nfunction sw(i) {\n  const e = {};\n  return Object.keys(i).forEach((t) => {\n    t.includes(\":\") ? e[t] = i[t] : zi(i[t].accounts)?.forEach((r) => {\n      e[r] = { accounts: i[t].accounts.filter((n) => n.includes(`${r}:`)), methods: i[t].methods, events: i[t].events };\n    });\n  }), e;\n}\nfunction rw(i, e) {\n  return Pn(i, !1) && i <= e.max && i >= e.min;\n}\nfunction nw(i, e) {\n  if (i.length >= 255)\n    throw new TypeError(\"Alphabet too long\");\n  for (var t = new Uint8Array(256), s = 0; s < t.length; s++)\n    t[s] = 255;\n  for (var r = 0; r < i.length; r++) {\n    var n = i.charAt(r), o = n.charCodeAt(0);\n    if (t[o] !== 255)\n      throw new TypeError(n + \" is ambiguous\");\n    t[o] = r;\n  }\n  var c = i.length, u = i.charAt(0), d = Math.log(c) / Math.log(256), p = Math.log(256) / Math.log(c);\n  function b(_) {\n    if (_ instanceof Uint8Array || (ArrayBuffer.isView(_) ? _ = new Uint8Array(_.buffer, _.byteOffset, _.byteLength) : Array.isArray(_) && (_ = Uint8Array.from(_))), !(_ instanceof Uint8Array))\n      throw new TypeError(\"Expected Uint8Array\");\n    if (_.length === 0)\n      return \"\";\n    for (var C = 0, F = 0, K = 0, I = _.length; K !== I && _[K] === 0; )\n      K++, C++;\n    for (var D = (I - K) * p + 1 >>> 0, y = new Uint8Array(D); K !== I; ) {\n      for (var w = _[K], f = 0, a = D - 1; (w !== 0 || f < F) && a !== -1; a--, f++)\n        w += 256 * y[a] >>> 0, y[a] = w % c >>> 0, w = w / c >>> 0;\n      if (w !== 0)\n        throw new Error(\"Non-zero carry\");\n      F = f, K++;\n    }\n    for (var l = D - F; l !== D && y[l] === 0; )\n      l++;\n    for (var L = u.repeat(C); l < D; ++l)\n      L += i.charAt(y[l]);\n    return L;\n  }\n  function x(_) {\n    if (typeof _ != \"string\")\n      throw new TypeError(\"Expected String\");\n    if (_.length === 0)\n      return new Uint8Array();\n    var C = 0;\n    if (_[C] !== \" \") {\n      for (var F = 0, K = 0; _[C] === u; )\n        F++, C++;\n      for (var I = (_.length - C) * d + 1 >>> 0, D = new Uint8Array(I); _[C]; ) {\n        var y = t[_.charCodeAt(C)];\n        if (y === 255)\n          return;\n        for (var w = 0, f = I - 1; (y !== 0 || w < K) && f !== -1; f--, w++)\n          y += c * D[f] >>> 0, D[f] = y % 256 >>> 0, y = y / 256 >>> 0;\n        if (y !== 0)\n          throw new Error(\"Non-zero carry\");\n        K = w, C++;\n      }\n      if (_[C] !== \" \") {\n        for (var a = I - K; a !== I && D[a] === 0; )\n          a++;\n        for (var l = new Uint8Array(F + (I - a)), L = F; a !== I; )\n          l[L++] = D[a++];\n        return l;\n      }\n    }\n  }\n  function O(_) {\n    var C = x(_);\n    if (C)\n      return C;\n    throw new Error(`Non-${e} character`);\n  }\n  return { encode: b, decodeUnsafe: x, decode: O };\n}\nvar ow = nw, aw = ow;\nconst xh = (i) => {\n  if (i instanceof Uint8Array && i.constructor.name === \"Uint8Array\")\n    return i;\n  if (i instanceof ArrayBuffer)\n    return new Uint8Array(i);\n  if (ArrayBuffer.isView(i))\n    return new Uint8Array(i.buffer, i.byteOffset, i.byteLength);\n  throw new Error(\"Unknown type, must be binary type\");\n}, cw = (i) => new TextEncoder().encode(i), hw = (i) => new TextDecoder().decode(i);\nclass uw {\n  constructor(e, t, s) {\n    this.name = e, this.prefix = t, this.baseEncode = s;\n  }\n  encode(e) {\n    if (e instanceof Uint8Array)\n      return `${this.prefix}${this.baseEncode(e)}`;\n    throw Error(\"Unknown type, must be binary type\");\n  }\n}\nclass lw {\n  constructor(e, t, s) {\n    if (this.name = e, this.prefix = t, t.codePointAt(0) === void 0)\n      throw new Error(\"Invalid prefix character\");\n    this.prefixCodePoint = t.codePointAt(0), this.baseDecode = s;\n  }\n  decode(e) {\n    if (typeof e == \"string\") {\n      if (e.codePointAt(0) !== this.prefixCodePoint)\n        throw Error(`Unable to decode multibase string ${JSON.stringify(e)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);\n      return this.baseDecode(e.slice(this.prefix.length));\n    } else\n      throw Error(\"Can only multibase decode strings\");\n  }\n  or(e) {\n    return Oh(this, e);\n  }\n}\nclass dw {\n  constructor(e) {\n    this.decoders = e;\n  }\n  or(e) {\n    return Oh(this, e);\n  }\n  decode(e) {\n    const t = e[0], s = this.decoders[t];\n    if (s)\n      return s.decode(e);\n    throw RangeError(`Unable to decode multibase string ${JSON.stringify(e)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);\n  }\n}\nconst Oh = (i, e) => new dw({ ...i.decoders || { [i.prefix]: i }, ...e.decoders || { [e.prefix]: e } });\nclass fw {\n  constructor(e, t, s, r) {\n    this.name = e, this.prefix = t, this.baseEncode = s, this.baseDecode = r, this.encoder = new uw(e, t, s), this.decoder = new lw(e, t, r);\n  }\n  encode(e) {\n    return this.encoder.encode(e);\n  }\n  decode(e) {\n    return this.decoder.decode(e);\n  }\n}\nconst fr = ({ name: i, prefix: e, encode: t, decode: s }) => new fw(i, e, t, s), xs = ({ prefix: i, name: e, alphabet: t }) => {\n  const { encode: s, decode: r } = aw(t, e);\n  return fr({ prefix: i, name: e, encode: s, decode: (n) => xh(r(n)) });\n}, pw = (i, e, t, s) => {\n  const r = {};\n  for (let p = 0; p < e.length; ++p)\n    r[e[p]] = p;\n  let n = i.length;\n  for (; i[n - 1] === \"=\"; )\n    --n;\n  const o = new Uint8Array(n * t / 8 | 0);\n  let c = 0, u = 0, d = 0;\n  for (let p = 0; p < n; ++p) {\n    const b = r[i[p]];\n    if (b === void 0)\n      throw new SyntaxError(`Non-${s} character`);\n    u = u << t | b, c += t, c >= 8 && (c -= 8, o[d++] = 255 & u >> c);\n  }\n  if (c >= t || 255 & u << 8 - c)\n    throw new SyntaxError(\"Unexpected end of data\");\n  return o;\n}, gw = (i, e, t) => {\n  const s = e[e.length - 1] === \"=\", r = (1 << t) - 1;\n  let n = \"\", o = 0, c = 0;\n  for (let u = 0; u < i.length; ++u)\n    for (c = c << 8 | i[u], o += 8; o > t; )\n      o -= t, n += e[r & c >> o];\n  if (o && (n += e[r & c << t - o]), s)\n    for (; n.length * t & 7; )\n      n += \"=\";\n  return n;\n}, dt = ({ name: i, prefix: e, bitsPerChar: t, alphabet: s }) => fr({ prefix: e, name: i, encode(r) {\n  return gw(r, s, t);\n}, decode(r) {\n  return pw(r, s, t, i);\n} }), yw = fr({ prefix: \"\\0\", name: \"identity\", encode: (i) => hw(i), decode: (i) => cw(i) });\nvar mw = Object.freeze({ __proto__: null, identity: yw });\nconst bw = dt({ prefix: \"0\", name: \"base2\", alphabet: \"01\", bitsPerChar: 1 });\nvar ww = Object.freeze({ __proto__: null, base2: bw });\nconst vw = dt({ prefix: \"7\", name: \"base8\", alphabet: \"01234567\", bitsPerChar: 3 });\nvar _w = Object.freeze({ __proto__: null, base8: vw });\nconst Ew = xs({ prefix: \"9\", name: \"base10\", alphabet: \"0123456789\" });\nvar Sw = Object.freeze({ __proto__: null, base10: Ew });\nconst Iw = dt({ prefix: \"f\", name: \"base16\", alphabet: \"0123456789abcdef\", bitsPerChar: 4 }), Dw = dt({ prefix: \"F\", name: \"base16upper\", alphabet: \"0123456789ABCDEF\", bitsPerChar: 4 });\nvar xw = Object.freeze({ __proto__: null, base16: Iw, base16upper: Dw });\nconst Ow = dt({ prefix: \"b\", name: \"base32\", alphabet: \"abcdefghijklmnopqrstuvwxyz234567\", bitsPerChar: 5 }), Nw = dt({ prefix: \"B\", name: \"base32upper\", alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\", bitsPerChar: 5 }), Pw = dt({ prefix: \"c\", name: \"base32pad\", alphabet: \"abcdefghijklmnopqrstuvwxyz234567=\", bitsPerChar: 5 }), Rw = dt({ prefix: \"C\", name: \"base32padupper\", alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=\", bitsPerChar: 5 }), Cw = dt({ prefix: \"v\", name: \"base32hex\", alphabet: \"0123456789abcdefghijklmnopqrstuv\", bitsPerChar: 5 }), Aw = dt({ prefix: \"V\", name: \"base32hexupper\", alphabet: \"0123456789ABCDEFGHIJKLMNOPQRSTUV\", bitsPerChar: 5 }), Tw = dt({ prefix: \"t\", name: \"base32hexpad\", alphabet: \"0123456789abcdefghijklmnopqrstuv=\", bitsPerChar: 5 }), $w = dt({ prefix: \"T\", name: \"base32hexpadupper\", alphabet: \"0123456789ABCDEFGHIJKLMNOPQRSTUV=\", bitsPerChar: 5 }), Fw = dt({ prefix: \"h\", name: \"base32z\", alphabet: \"ybndrfg8ejkmcpqxot1uwisza345h769\", bitsPerChar: 5 });\nvar Uw = Object.freeze({ __proto__: null, base32: Ow, base32upper: Nw, base32pad: Pw, base32padupper: Rw, base32hex: Cw, base32hexupper: Aw, base32hexpad: Tw, base32hexpadupper: $w, base32z: Fw });\nconst Lw = xs({ prefix: \"k\", name: \"base36\", alphabet: \"0123456789abcdefghijklmnopqrstuvwxyz\" }), Mw = xs({ prefix: \"K\", name: \"base36upper\", alphabet: \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\" });\nvar qw = Object.freeze({ __proto__: null, base36: Lw, base36upper: Mw });\nconst jw = xs({ name: \"base58btc\", prefix: \"z\", alphabet: \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\" }), zw = xs({ name: \"base58flickr\", prefix: \"Z\", alphabet: \"123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ\" });\nvar Kw = Object.freeze({ __proto__: null, base58btc: jw, base58flickr: zw });\nconst Vw = dt({ prefix: \"m\", name: \"base64\", alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\", bitsPerChar: 6 }), Bw = dt({ prefix: \"M\", name: \"base64pad\", alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\", bitsPerChar: 6 }), kw = dt({ prefix: \"u\", name: \"base64url\", alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\", bitsPerChar: 6 }), Hw = dt({ prefix: \"U\", name: \"base64urlpad\", alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=\", bitsPerChar: 6 });\nvar Gw = Object.freeze({ __proto__: null, base64: Vw, base64pad: Bw, base64url: kw, base64urlpad: Hw });\nconst Nh = Array.from(\"🚀🪐☄🛰🌌🌑🌒🌓🌔🌕🌖🌗🌘🌍🌏🌎🐉☀💻🖥💾💿😂❤😍🤣😊🙏💕😭😘👍😅👏😁🔥🥰💔💖💙😢🤔😆🙄💪😉☺👌🤗💜😔😎😇🌹🤦🎉💞✌✨🤷😱😌🌸🙌😋💗💚😏💛🙂💓🤩😄😀🖤😃💯🙈👇🎶😒🤭❣😜💋👀😪😑💥🙋😞😩😡🤪👊🥳😥🤤👉💃😳✋😚😝😴🌟😬🙃🍀🌷😻😓⭐✅🥺🌈😈🤘💦✔😣🏃💐☹🎊💘😠☝😕🌺🎂🌻😐🖕💝🙊😹🗣💫💀👑🎵🤞😛🔴😤🌼😫⚽🤙☕🏆🤫👈😮🙆🍻🍃🐶💁😲🌿🧡🎁⚡🌞🎈❌✊👋😰🤨😶🤝🚶💰🍓💢🤟🙁🚨💨🤬✈🎀🍺🤓😙💟🌱😖👶🥴▶➡❓💎💸⬇😨🌚🦋😷🕺⚠🙅😟😵👎🤲🤠🤧📌🔵💅🧐🐾🍒😗🤑🌊🤯🐷☎💧😯💆👆🎤🙇🍑❄🌴💣🐸💌📍🥀🤢👅💡💩👐📸👻🤐🤮🎼🥵🚩🍎🍊👼💍📣🥂\"), Ww = Nh.reduce((i, e, t) => (i[t] = e, i), []), Yw = Nh.reduce((i, e, t) => (i[e.codePointAt(0)] = t, i), []);\nfunction Jw(i) {\n  return i.reduce((e, t) => (e += Ww[t], e), \"\");\n}\nfunction Qw(i) {\n  const e = [];\n  for (const t of i) {\n    const s = Yw[t.codePointAt(0)];\n    if (s === void 0)\n      throw new Error(`Non-base256emoji character: ${t}`);\n    e.push(s);\n  }\n  return new Uint8Array(e);\n}\nconst Xw = fr({ prefix: \"🚀\", name: \"base256emoji\", encode: Jw, decode: Qw });\nvar Zw = Object.freeze({ __proto__: null, base256emoji: Xw }), e0 = Ph, xa = 128, t0 = 127, i0 = ~t0, s0 = Math.pow(2, 31);\nfunction Ph(i, e, t) {\n  e = e || [], t = t || 0;\n  for (var s = t; i >= s0; )\n    e[t++] = i & 255 | xa, i /= 128;\n  for (; i & i0; )\n    e[t++] = i & 255 | xa, i >>>= 7;\n  return e[t] = i | 0, Ph.bytes = t - s + 1, e;\n}\nvar r0 = en, n0 = 128, Oa = 127;\nfunction en(i, s) {\n  var t = 0, s = s || 0, r = 0, n = s, o, c = i.length;\n  do {\n    if (n >= c)\n      throw en.bytes = 0, new RangeError(\"Could not decode varint\");\n    o = i[n++], t += r < 28 ? (o & Oa) << r : (o & Oa) * Math.pow(2, r), r += 7;\n  } while (o >= n0);\n  return en.bytes = n - s, t;\n}\nvar o0 = Math.pow(2, 7), a0 = Math.pow(2, 14), c0 = Math.pow(2, 21), h0 = Math.pow(2, 28), u0 = Math.pow(2, 35), l0 = Math.pow(2, 42), d0 = Math.pow(2, 49), f0 = Math.pow(2, 56), p0 = Math.pow(2, 63), g0 = function(i) {\n  return i < o0 ? 1 : i < a0 ? 2 : i < c0 ? 3 : i < h0 ? 4 : i < u0 ? 5 : i < l0 ? 6 : i < d0 ? 7 : i < f0 ? 8 : i < p0 ? 9 : 10;\n}, y0 = { encode: e0, decode: r0, encodingLength: g0 }, Rh = y0;\nconst Na = (i, e, t = 0) => (Rh.encode(i, e, t), e), Pa = (i) => Rh.encodingLength(i), tn = (i, e) => {\n  const t = e.byteLength, s = Pa(i), r = s + Pa(t), n = new Uint8Array(r + t);\n  return Na(i, n, 0), Na(t, n, s), n.set(e, r), new m0(i, t, e, n);\n};\nclass m0 {\n  constructor(e, t, s, r) {\n    this.code = e, this.size = t, this.digest = s, this.bytes = r;\n  }\n}\nconst Ch = ({ name: i, code: e, encode: t }) => new b0(i, e, t);\nclass b0 {\n  constructor(e, t, s) {\n    this.name = e, this.code = t, this.encode = s;\n  }\n  digest(e) {\n    if (e instanceof Uint8Array) {\n      const t = this.encode(e);\n      return t instanceof Uint8Array ? tn(this.code, t) : t.then((s) => tn(this.code, s));\n    } else\n      throw Error(\"Unknown type, must be binary type\");\n  }\n}\nconst Ah = (i) => async (e) => new Uint8Array(await crypto.subtle.digest(i, e)), w0 = Ch({ name: \"sha2-256\", code: 18, encode: Ah(\"SHA-256\") }), v0 = Ch({ name: \"sha2-512\", code: 19, encode: Ah(\"SHA-512\") });\nvar _0 = Object.freeze({ __proto__: null, sha256: w0, sha512: v0 });\nconst Th = 0, E0 = \"identity\", $h = xh, S0 = (i) => tn(Th, $h(i)), I0 = { code: Th, name: E0, encode: $h, digest: S0 };\nvar D0 = Object.freeze({ __proto__: null, identity: I0 });\nnew TextEncoder(), new TextDecoder();\nconst Ra = { ...mw, ...ww, ..._w, ...Sw, ...xw, ...Uw, ...qw, ...Kw, ...Gw, ...Zw };\n({ ..._0, ...D0 });\nfunction Fh(i) {\n  return globalThis.Buffer != null ? new Uint8Array(i.buffer, i.byteOffset, i.byteLength) : i;\n}\nfunction x0(i = 0) {\n  return globalThis.Buffer != null && globalThis.Buffer.allocUnsafe != null ? Fh(globalThis.Buffer.allocUnsafe(i)) : new Uint8Array(i);\n}\nfunction Uh(i, e, t, s) {\n  return { name: i, prefix: e, encoder: { name: i, prefix: e, encode: t }, decoder: { decode: s } };\n}\nconst Ca = Uh(\"utf8\", \"u\", (i) => \"u\" + new TextDecoder(\"utf8\").decode(i), (i) => new TextEncoder().encode(i.substring(1))), Ar = Uh(\"ascii\", \"a\", (i) => {\n  let e = \"a\";\n  for (let t = 0; t < i.length; t++)\n    e += String.fromCharCode(i[t]);\n  return e;\n}, (i) => {\n  i = i.substring(1);\n  const e = x0(i.length);\n  for (let t = 0; t < i.length; t++)\n    e[t] = i.charCodeAt(t);\n  return e;\n}), O0 = { utf8: Ca, \"utf-8\": Ca, hex: Ra.base16, latin1: Ar, ascii: Ar, binary: Ar, ...Ra };\nfunction N0(i, e = \"utf8\") {\n  const t = O0[e];\n  if (!t)\n    throw new Error(`Unsupported encoding \"${e}\"`);\n  return (e === \"utf8\" || e === \"utf-8\") && globalThis.Buffer != null && globalThis.Buffer.from != null ? Fh(globalThis.Buffer.from(i, \"utf-8\")) : t.decoder.decode(`${t.prefix}${i}`);\n}\nconst Lh = \"wc\", P0 = 2, Cn = \"core\", ui = `${Lh}@2:${Cn}:`, R0 = { name: Cn, logger: \"error\" }, C0 = { database: \":memory:\" }, A0 = \"crypto\", Aa = \"client_ed25519_seed\", T0 = V.ONE_DAY, $0 = \"keychain\", F0 = \"0.3\", U0 = \"messages\", L0 = \"0.3\", M0 = V.SIX_HOURS, q0 = \"publisher\", Mh = \"irn\", j0 = \"error\", qh = \"wss://relay.walletconnect.com\", z0 = \"relayer\", He = { message: \"relayer_message\", message_ack: \"relayer_message_ack\", connect: \"relayer_connect\", disconnect: \"relayer_disconnect\", error: \"relayer_error\", connection_stalled: \"relayer_connection_stalled\", transport_closed: \"relayer_transport_closed\", publish: \"relayer_publish\" }, K0 = \"_subscription\", is = { payload: \"payload\", connect: \"connect\", disconnect: \"disconnect\", error: \"error\" }, V0 = V.ONE_SECOND / 2, B0 = \"y\", k0 = 1e4, H0 = \"0.3\", Bt = { created: \"subscription_created\", deleted: \"subscription_deleted\", expired: \"subscription_expired\", disabled: \"subscription_disabled\", sync: \"subscription_sync\", resubscribed: \"subscription_resubscribed\" }, G0 = \"subscription\", W0 = \"0.3\", Y0 = V.FIVE_SECONDS * 1e3, J0 = \"pairing\", Q0 = \"0.3\", ss = { wc_pairingDelete: { req: { ttl: V.ONE_DAY, prompt: !1, tag: 1e3 }, res: { ttl: V.ONE_DAY, prompt: !1, tag: 1001 } }, wc_pairingPing: { req: { ttl: V.THIRTY_SECONDS, prompt: !1, tag: 1002 }, res: { ttl: V.THIRTY_SECONDS, prompt: !1, tag: 1003 } }, unregistered_method: { req: { ttl: V.ONE_DAY, prompt: !1, tag: 0 }, res: { ttl: V.ONE_DAY, prompt: !1, tag: 0 } } }, Kt = { created: \"history_created\", updated: \"history_updated\", deleted: \"history_deleted\", sync: \"history_sync\" }, X0 = \"history\", Z0 = \"0.3\", ev = \"expirer\", $t = { created: \"expirer_created\", deleted: \"expirer_deleted\", expired: \"expirer_expired\", sync: \"expirer_sync\" }, tv = \"0.3\", Tr = \"verify-api\", Ta = \"https://verify.walletconnect.com\";\nclass iv {\n  constructor(e, t) {\n    this.core = e, this.logger = t, this.keychain = /* @__PURE__ */ new Map(), this.name = $0, this.version = F0, this.initialized = !1, this.storagePrefix = ui, this.init = async () => {\n      if (!this.initialized) {\n        const s = await this.getKeyChain();\n        typeof s < \"u\" && (this.keychain = s), this.initialized = !0;\n      }\n    }, this.has = (s) => (this.isInitialized(), this.keychain.has(s)), this.set = async (s, r) => {\n      this.isInitialized(), this.keychain.set(s, r), await this.persist();\n    }, this.get = (s) => {\n      this.isInitialized();\n      const r = this.keychain.get(s);\n      if (typeof r > \"u\") {\n        const { message: n } = J(\"NO_MATCHING_KEY\", `${this.name}: ${s}`);\n        throw new Error(n);\n      }\n      return r;\n    }, this.del = async (s) => {\n      this.isInitialized(), this.keychain.delete(s), await this.persist();\n    }, this.core = e, this.logger = ee.generateChildLogger(t, this.name);\n  }\n  get context() {\n    return ee.getLoggerContext(this.logger);\n  }\n  get storageKey() {\n    return this.storagePrefix + this.version + \"//\" + this.name;\n  }\n  async setKeyChain(e) {\n    await this.core.storage.setItem(this.storageKey, vh(e));\n  }\n  async getKeyChain() {\n    const e = await this.core.storage.getItem(this.storageKey);\n    return typeof e < \"u\" ? _h(e) : void 0;\n  }\n  async persist() {\n    await this.setKeyChain(this.keychain);\n  }\n  isInitialized() {\n    if (!this.initialized) {\n      const { message: e } = J(\"NOT_INITIALIZED\", this.name);\n      throw new Error(e);\n    }\n  }\n}\nclass sv {\n  constructor(e, t, s) {\n    this.core = e, this.logger = t, this.name = A0, this.initialized = !1, this.init = async () => {\n      this.initialized || (await this.keychain.init(), this.initialized = !0);\n    }, this.hasKeys = (r) => (this.isInitialized(), this.keychain.has(r)), this.getClientId = async () => {\n      this.isInitialized();\n      const r = await this.getClientSeed(), n = Ws(r);\n      return an(n.publicKey);\n    }, this.generateKeyPair = () => {\n      this.isInitialized();\n      const r = Xm();\n      return this.setPrivateKey(r.publicKey, r.privateKey);\n    }, this.signJWT = async (r) => {\n      this.isInitialized();\n      const n = await this.getClientSeed(), o = Ws(n), c = Xr();\n      return await Ic(c, r, T0, o);\n    }, this.generateSharedKey = (r, n, o) => {\n      this.isInitialized();\n      const c = this.getPrivateKey(r), u = Zm(c, n);\n      return this.setSymKey(u, o);\n    }, this.setSymKey = async (r, n) => {\n      this.isInitialized();\n      const o = n || eb(r);\n      return await this.keychain.set(o, r), o;\n    }, this.deleteKeyPair = async (r) => {\n      this.isInitialized(), await this.keychain.del(r);\n    }, this.deleteSymKey = async (r) => {\n      this.isInitialized(), await this.keychain.del(r);\n    }, this.encode = async (r, n, o) => {\n      this.isInitialized();\n      const c = bh(o), u = rr(n);\n      if (ya(c)) {\n        const x = c.senderPublicKey, O = c.receiverPublicKey;\n        r = await this.generateSharedKey(x, O);\n      }\n      const d = this.getSymKey(r), { type: p, senderPublicKey: b } = c;\n      return ib({ type: p, symKey: d, message: u, senderPublicKey: b });\n    }, this.decode = async (r, n, o) => {\n      this.isInitialized();\n      const c = nb(n, o);\n      if (ya(c)) {\n        const p = c.receiverPublicKey, b = c.senderPublicKey;\n        r = await this.generateSharedKey(p, b);\n      }\n      const u = this.getSymKey(r), d = sb({ symKey: u, encoded: n });\n      return rn(d);\n    }, this.getPayloadType = (r) => {\n      const n = Zs(r);\n      return Is(n.type);\n    }, this.getPayloadSenderPublicKey = (r) => {\n      const n = Zs(r);\n      return n.senderPublicKey ? Ne(n.senderPublicKey, _t) : void 0;\n    }, this.core = e, this.logger = ee.generateChildLogger(t, this.name), this.keychain = s || new iv(this.core, this.logger);\n  }\n  get context() {\n    return ee.getLoggerContext(this.logger);\n  }\n  async setPrivateKey(e, t) {\n    return await this.keychain.set(e, t), e;\n  }\n  getPrivateKey(e) {\n    return this.keychain.get(e);\n  }\n  async getClientSeed() {\n    let e = \"\";\n    try {\n      e = this.keychain.get(Aa);\n    } catch {\n      e = Xr(), await this.keychain.set(Aa, e);\n    }\n    return N0(e, \"base16\");\n  }\n  getSymKey(e) {\n    return this.keychain.get(e);\n  }\n  isInitialized() {\n    if (!this.initialized) {\n      const { message: e } = J(\"NOT_INITIALIZED\", this.name);\n      throw new Error(e);\n    }\n  }\n}\nclass rv extends $m {\n  constructor(e, t) {\n    super(e, t), this.logger = e, this.core = t, this.messages = /* @__PURE__ */ new Map(), this.name = U0, this.version = L0, this.initialized = !1, this.storagePrefix = ui, this.init = async () => {\n      if (!this.initialized) {\n        this.logger.trace(\"Initialized\");\n        try {\n          const s = await this.getRelayerMessages();\n          typeof s < \"u\" && (this.messages = s), this.logger.debug(`Successfully Restored records for ${this.name}`), this.logger.trace({ type: \"method\", method: \"restore\", size: this.messages.size });\n        } catch (s) {\n          this.logger.debug(`Failed to Restore records for ${this.name}`), this.logger.error(s);\n        } finally {\n          this.initialized = !0;\n        }\n      }\n    }, this.set = async (s, r) => {\n      this.isInitialized();\n      const n = Ui(r);\n      let o = this.messages.get(s);\n      return typeof o > \"u\" && (o = {}), typeof o[n] < \"u\" || (o[n] = r, this.messages.set(s, o), await this.persist()), n;\n    }, this.get = (s) => {\n      this.isInitialized();\n      let r = this.messages.get(s);\n      return typeof r > \"u\" && (r = {}), r;\n    }, this.has = (s, r) => {\n      this.isInitialized();\n      const n = this.get(s), o = Ui(r);\n      return typeof n[o] < \"u\";\n    }, this.del = async (s) => {\n      this.isInitialized(), this.messages.delete(s), await this.persist();\n    }, this.logger = ee.generateChildLogger(e, this.name), this.core = t;\n  }\n  get context() {\n    return ee.getLoggerContext(this.logger);\n  }\n  get storageKey() {\n    return this.storagePrefix + this.version + \"//\" + this.name;\n  }\n  async setRelayerMessages(e) {\n    await this.core.storage.setItem(this.storageKey, vh(e));\n  }\n  async getRelayerMessages() {\n    const e = await this.core.storage.getItem(this.storageKey);\n    return typeof e < \"u\" ? _h(e) : void 0;\n  }\n  async persist() {\n    await this.setRelayerMessages(this.messages);\n  }\n  isInitialized() {\n    if (!this.initialized) {\n      const { message: e } = J(\"NOT_INITIALIZED\", this.name);\n      throw new Error(e);\n    }\n  }\n}\nclass nv extends Fm {\n  constructor(e, t) {\n    super(e, t), this.relayer = e, this.logger = t, this.events = new We.EventEmitter(), this.name = q0, this.queue = /* @__PURE__ */ new Map(), this.publishTimeout = 1e4, this.publish = async (s, r, n) => {\n      this.logger.debug(\"Publishing Payload\"), this.logger.trace({ type: \"method\", method: \"publish\", params: { topic: s, message: r, opts: n } });\n      try {\n        const o = n?.ttl || M0, c = Zr(n), u = n?.prompt || !1, d = n?.tag || 0, p = n?.id || vn().toString(), b = { topic: s, message: r, opts: { ttl: o, relay: c, prompt: u, tag: d, id: p } };\n        this.queue.set(p, b);\n        try {\n          await await er(this.rpcPublish(s, r, o, c, u, d, p), this.publishTimeout), this.relayer.events.emit(He.publish, b);\n        } catch {\n          this.logger.debug(\"Publishing Payload stalled\"), this.relayer.events.emit(He.connection_stalled);\n          return;\n        }\n        this.logger.debug(\"Successfully Published Payload\"), this.logger.trace({ type: \"method\", method: \"publish\", params: { topic: s, message: r, opts: n } });\n      } catch (o) {\n        throw this.logger.debug(\"Failed to Publish Payload\"), this.logger.error(o), o;\n      }\n    }, this.on = (s, r) => {\n      this.events.on(s, r);\n    }, this.once = (s, r) => {\n      this.events.once(s, r);\n    }, this.off = (s, r) => {\n      this.events.off(s, r);\n    }, this.removeListener = (s, r) => {\n      this.events.removeListener(s, r);\n    }, this.relayer = e, this.logger = ee.generateChildLogger(t, this.name), this.registerEventListeners();\n  }\n  get context() {\n    return ee.getLoggerContext(this.logger);\n  }\n  rpcPublish(e, t, s, r, n, o, c) {\n    var u, d, p, b;\n    const x = { method: Vs(r.protocol).publish, params: { topic: e, message: t, ttl: s, prompt: n, tag: o }, id: c };\n    return wt((u = x.params) == null ? void 0 : u.prompt) && ((d = x.params) == null || delete d.prompt), wt((p = x.params) == null ? void 0 : p.tag) && ((b = x.params) == null || delete b.tag), this.logger.debug(\"Outgoing Relay Payload\"), this.logger.trace({ type: \"message\", direction: \"outgoing\", request: x }), this.relayer.request(x);\n  }\n  onPublish(e) {\n    this.queue.delete(e);\n  }\n  checkQueue() {\n    this.queue.forEach(async (e) => {\n      const { topic: t, message: s, opts: r } = e;\n      await this.publish(t, s, r);\n    });\n  }\n  registerEventListeners() {\n    this.relayer.core.heartbeat.on(Wt.HEARTBEAT_EVENTS.pulse, () => {\n      this.checkQueue();\n    }), this.relayer.on(He.message_ack, (e) => {\n      this.onPublish(e.id.toString());\n    });\n  }\n}\nclass ov {\n  constructor() {\n    this.map = /* @__PURE__ */ new Map(), this.set = (e, t) => {\n      const s = this.get(e);\n      this.exists(e, t) || this.map.set(e, [...s, t]);\n    }, this.get = (e) => this.map.get(e) || [], this.exists = (e, t) => this.get(e).includes(t), this.delete = (e, t) => {\n      if (typeof t > \"u\") {\n        this.map.delete(e);\n        return;\n      }\n      if (!this.map.has(e))\n        return;\n      const s = this.get(e);\n      if (!this.exists(e, t))\n        return;\n      const r = s.filter((n) => n !== t);\n      if (!r.length) {\n        this.map.delete(e);\n        return;\n      }\n      this.map.set(e, r);\n    }, this.clear = () => {\n      this.map.clear();\n    };\n  }\n  get topics() {\n    return Array.from(this.map.keys());\n  }\n}\nvar av = Object.defineProperty, cv = Object.defineProperties, hv = Object.getOwnPropertyDescriptors, $a = Object.getOwnPropertySymbols, uv = Object.prototype.hasOwnProperty, lv = Object.prototype.propertyIsEnumerable, Fa = (i, e, t) => e in i ? av(i, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : i[e] = t, rs = (i, e) => {\n  for (var t in e || (e = {}))\n    uv.call(e, t) && Fa(i, t, e[t]);\n  if ($a)\n    for (var t of $a(e))\n      lv.call(e, t) && Fa(i, t, e[t]);\n  return i;\n}, $r = (i, e) => cv(i, hv(e));\nclass dv extends Mm {\n  constructor(e, t) {\n    super(e, t), this.relayer = e, this.logger = t, this.subscriptions = /* @__PURE__ */ new Map(), this.topicMap = new ov(), this.events = new We.EventEmitter(), this.name = G0, this.version = W0, this.pending = /* @__PURE__ */ new Map(), this.cached = [], this.initialized = !1, this.pendingSubscriptionWatchLabel = \"pending_sub_watch_label\", this.pollingInterval = 20, this.storagePrefix = ui, this.subscribeTimeout = 1e4, this.restartInProgress = !1, this.batchSubscribeTopicsLimit = 500, this.init = async () => {\n      this.initialized || (this.logger.trace(\"Initialized\"), await this.restart(), this.registerEventListeners(), this.onEnable(), this.clientId = await this.relayer.core.crypto.getClientId());\n    }, this.subscribe = async (s, r) => {\n      await this.restartToComplete(), this.isInitialized(), this.logger.debug(\"Subscribing Topic\"), this.logger.trace({ type: \"method\", method: \"subscribe\", params: { topic: s, opts: r } });\n      try {\n        const n = Zr(r), o = { topic: s, relay: n };\n        this.pending.set(s, o);\n        const c = await this.rpcSubscribe(s, n);\n        return this.onSubscribe(c, o), this.logger.debug(\"Successfully Subscribed Topic\"), this.logger.trace({ type: \"method\", method: \"subscribe\", params: { topic: s, opts: r } }), c;\n      } catch (n) {\n        throw this.logger.debug(\"Failed to Subscribe Topic\"), this.logger.error(n), n;\n      }\n    }, this.unsubscribe = async (s, r) => {\n      await this.restartToComplete(), this.isInitialized(), typeof r?.id < \"u\" ? await this.unsubscribeById(s, r.id, r) : await this.unsubscribeByTopic(s, r);\n    }, this.isSubscribed = async (s) => this.topics.includes(s) ? !0 : await new Promise((r, n) => {\n      const o = new V.Watch();\n      o.start(this.pendingSubscriptionWatchLabel);\n      const c = setInterval(() => {\n        !this.pending.has(s) && this.topics.includes(s) && (clearInterval(c), o.stop(this.pendingSubscriptionWatchLabel), r(!0)), o.elapsed(this.pendingSubscriptionWatchLabel) >= Y0 && (clearInterval(c), o.stop(this.pendingSubscriptionWatchLabel), n(new Error(\"Subscription resolution timeout\")));\n      }, this.pollingInterval);\n    }).catch(() => !1), this.on = (s, r) => {\n      this.events.on(s, r);\n    }, this.once = (s, r) => {\n      this.events.once(s, r);\n    }, this.off = (s, r) => {\n      this.events.off(s, r);\n    }, this.removeListener = (s, r) => {\n      this.events.removeListener(s, r);\n    }, this.restart = async () => {\n      this.restartInProgress = !0, await this.restore(), await this.reset(), this.restartInProgress = !1;\n    }, this.relayer = e, this.logger = ee.generateChildLogger(t, this.name), this.clientId = \"\";\n  }\n  get context() {\n    return ee.getLoggerContext(this.logger);\n  }\n  get storageKey() {\n    return this.storagePrefix + this.version + \"//\" + this.name;\n  }\n  get length() {\n    return this.subscriptions.size;\n  }\n  get ids() {\n    return Array.from(this.subscriptions.keys());\n  }\n  get values() {\n    return Array.from(this.subscriptions.values());\n  }\n  get topics() {\n    return this.topicMap.topics;\n  }\n  hasSubscription(e, t) {\n    let s = !1;\n    try {\n      s = this.getSubscription(e).topic === t;\n    } catch {\n    }\n    return s;\n  }\n  onEnable() {\n    this.cached = [], this.initialized = !0;\n  }\n  onDisable() {\n    this.cached = this.values, this.subscriptions.clear(), this.topicMap.clear();\n  }\n  async unsubscribeByTopic(e, t) {\n    const s = this.topicMap.get(e);\n    await Promise.all(s.map(async (r) => await this.unsubscribeById(e, r, t)));\n  }\n  async unsubscribeById(e, t, s) {\n    this.logger.debug(\"Unsubscribing Topic\"), this.logger.trace({ type: \"method\", method: \"unsubscribe\", params: { topic: e, id: t, opts: s } });\n    try {\n      const r = Zr(s);\n      await this.rpcUnsubscribe(e, t, r);\n      const n = Je(\"USER_DISCONNECTED\", `${this.name}, ${e}`);\n      await this.onUnsubscribe(e, t, n), this.logger.debug(\"Successfully Unsubscribed Topic\"), this.logger.trace({ type: \"method\", method: \"unsubscribe\", params: { topic: e, id: t, opts: s } });\n    } catch (r) {\n      throw this.logger.debug(\"Failed to Unsubscribe Topic\"), this.logger.error(r), r;\n    }\n  }\n  async rpcSubscribe(e, t) {\n    const s = { method: Vs(t.protocol).subscribe, params: { topic: e } };\n    this.logger.debug(\"Outgoing Relay Payload\"), this.logger.trace({ type: \"payload\", direction: \"outgoing\", request: s });\n    try {\n      await await er(this.relayer.request(s), this.subscribeTimeout);\n    } catch {\n      this.logger.debug(\"Outgoing Relay Subscribe Payload stalled\"), this.relayer.events.emit(He.connection_stalled);\n    }\n    return Ui(e + this.clientId);\n  }\n  async rpcBatchSubscribe(e) {\n    if (!e.length)\n      return;\n    const t = e[0].relay, s = { method: Vs(t.protocol).batchSubscribe, params: { topics: e.map((r) => r.topic) } };\n    this.logger.debug(\"Outgoing Relay Payload\"), this.logger.trace({ type: \"payload\", direction: \"outgoing\", request: s });\n    try {\n      return await await er(this.relayer.request(s), this.subscribeTimeout);\n    } catch {\n      this.logger.debug(\"Outgoing Relay Payload stalled\"), this.relayer.events.emit(He.connection_stalled);\n    }\n  }\n  rpcUnsubscribe(e, t, s) {\n    const r = { method: Vs(s.protocol).unsubscribe, params: { topic: e, id: t } };\n    return this.logger.debug(\"Outgoing Relay Payload\"), this.logger.trace({ type: \"payload\", direction: \"outgoing\", request: r }), this.relayer.request(r);\n  }\n  onSubscribe(e, t) {\n    this.setSubscription(e, $r(rs({}, t), { id: e })), this.pending.delete(t.topic);\n  }\n  onBatchSubscribe(e) {\n    e.length && e.forEach((t) => {\n      this.setSubscription(t.id, rs({}, t)), this.pending.delete(t.topic);\n    });\n  }\n  async onUnsubscribe(e, t, s) {\n    this.events.removeAllListeners(t), this.hasSubscription(t, e) && this.deleteSubscription(t, s), await this.relayer.messages.del(e);\n  }\n  async setRelayerSubscriptions(e) {\n    await this.relayer.core.storage.setItem(this.storageKey, e);\n  }\n  async getRelayerSubscriptions() {\n    return await this.relayer.core.storage.getItem(this.storageKey);\n  }\n  setSubscription(e, t) {\n    this.subscriptions.has(e) || (this.logger.debug(\"Setting subscription\"), this.logger.trace({ type: \"method\", method: \"setSubscription\", id: e, subscription: t }), this.addSubscription(e, t));\n  }\n  addSubscription(e, t) {\n    this.subscriptions.set(e, rs({}, t)), this.topicMap.set(t.topic, e), this.events.emit(Bt.created, t);\n  }\n  getSubscription(e) {\n    this.logger.debug(\"Getting subscription\"), this.logger.trace({ type: \"method\", method: \"getSubscription\", id: e });\n    const t = this.subscriptions.get(e);\n    if (!t) {\n      const { message: s } = J(\"NO_MATCHING_KEY\", `${this.name}: ${e}`);\n      throw new Error(s);\n    }\n    return t;\n  }\n  deleteSubscription(e, t) {\n    this.logger.debug(\"Deleting subscription\"), this.logger.trace({ type: \"method\", method: \"deleteSubscription\", id: e, reason: t });\n    const s = this.getSubscription(e);\n    this.subscriptions.delete(e), this.topicMap.delete(s.topic, e), this.events.emit(Bt.deleted, $r(rs({}, s), { reason: t }));\n  }\n  async persist() {\n    await this.setRelayerSubscriptions(this.values), this.events.emit(Bt.sync);\n  }\n  async reset() {\n    if (this.cached.length) {\n      const e = Math.ceil(this.cached.length / this.batchSubscribeTopicsLimit);\n      for (let t = 0; t < e; t++) {\n        const s = this.cached.splice(0, this.batchSubscribeTopicsLimit);\n        await this.batchSubscribe(s);\n      }\n    }\n    this.events.emit(Bt.resubscribed);\n  }\n  async restore() {\n    try {\n      const e = await this.getRelayerSubscriptions();\n      if (typeof e > \"u\" || !e.length)\n        return;\n      if (this.subscriptions.size) {\n        const { message: t } = J(\"RESTORE_WILL_OVERRIDE\", this.name);\n        throw this.logger.error(t), this.logger.error(`${this.name}: ${JSON.stringify(this.values)}`), new Error(t);\n      }\n      this.cached = e, this.logger.debug(`Successfully Restored subscriptions for ${this.name}`), this.logger.trace({ type: \"method\", method: \"restore\", subscriptions: this.values });\n    } catch (e) {\n      this.logger.debug(`Failed to Restore subscriptions for ${this.name}`), this.logger.error(e);\n    }\n  }\n  async batchSubscribe(e) {\n    if (!e.length)\n      return;\n    const t = await this.rpcBatchSubscribe(e);\n    Ds(t) && this.onBatchSubscribe(t.map((s, r) => $r(rs({}, e[r]), { id: s })));\n  }\n  async onConnect() {\n    this.restartInProgress || (await this.restart(), this.onEnable());\n  }\n  onDisconnect() {\n    this.onDisable();\n  }\n  async checkPending() {\n    if (this.relayer.transportExplicitlyClosed)\n      return;\n    const e = [];\n    this.pending.forEach((t) => {\n      e.push(t);\n    }), await this.batchSubscribe(e);\n  }\n  registerEventListeners() {\n    this.relayer.core.heartbeat.on(Wt.HEARTBEAT_EVENTS.pulse, async () => {\n      await this.checkPending();\n    }), this.relayer.on(He.connect, async () => {\n      await this.onConnect();\n    }), this.relayer.on(He.disconnect, () => {\n      this.onDisconnect();\n    }), this.events.on(Bt.created, async (e) => {\n      const t = Bt.created;\n      this.logger.info(`Emitting ${t}`), this.logger.debug({ type: \"event\", event: t, data: e }), await this.persist();\n    }), this.events.on(Bt.deleted, async (e) => {\n      const t = Bt.deleted;\n      this.logger.info(`Emitting ${t}`), this.logger.debug({ type: \"event\", event: t, data: e }), await this.persist();\n    });\n  }\n  isInitialized() {\n    if (!this.initialized) {\n      const { message: e } = J(\"NOT_INITIALIZED\", this.name);\n      throw new Error(e);\n    }\n  }\n  async restartToComplete() {\n    this.restartInProgress && await new Promise((e) => {\n      const t = setInterval(() => {\n        this.restartInProgress || (clearInterval(t), e());\n      }, this.pollingInterval);\n    });\n  }\n}\nvar fv = Object.defineProperty, Ua = Object.getOwnPropertySymbols, pv = Object.prototype.hasOwnProperty, gv = Object.prototype.propertyIsEnumerable, La = (i, e, t) => e in i ? fv(i, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : i[e] = t, yv = (i, e) => {\n  for (var t in e || (e = {}))\n    pv.call(e, t) && La(i, t, e[t]);\n  if (Ua)\n    for (var t of Ua(e))\n      gv.call(e, t) && La(i, t, e[t]);\n  return i;\n};\nclass mv extends Um {\n  constructor(e) {\n    super(e), this.protocol = \"wc\", this.version = 2, this.events = new We.EventEmitter(), this.name = z0, this.transportExplicitlyClosed = !1, this.initialized = !1, this.reconnecting = !1, this.connectionStatusPollingInterval = 20, this.staleConnectionErrors = [\"socket hang up\", \"socket stalled\"], this.request = async (t) => {\n      this.logger.debug(\"Publishing Request Payload\");\n      try {\n        return await this.toEstablishConnection(), await this.provider.request(t);\n      } catch (s) {\n        throw this.logger.debug(\"Failed to Publish Request\"), this.logger.error(s), s;\n      }\n    }, this.core = e.core, this.logger = typeof e.logger < \"u\" && typeof e.logger != \"string\" ? ee.generateChildLogger(e.logger, this.name) : ee.pino(ee.getDefaultLoggerOptions({ level: e.logger || j0 })), this.messages = new rv(this.logger, e.core), this.subscriber = new dv(this, this.logger), this.publisher = new nv(this, this.logger), this.relayUrl = e?.relayUrl || qh, this.projectId = e.projectId, this.provider = {};\n  }\n  async init() {\n    this.logger.trace(\"Initialized\"), await this.createProvider(), await Promise.all([this.messages.init(), this.transportOpen(), this.subscriber.init()]), this.registerEventListeners(), this.initialized = !0, setTimeout(async () => {\n      this.subscriber.topics.length === 0 && (this.logger.info(\"No topics subscribted to after init, closing transport\"), await this.transportClose(), this.transportExplicitlyClosed = !1);\n    }, k0);\n  }\n  get context() {\n    return ee.getLoggerContext(this.logger);\n  }\n  get connected() {\n    return this.provider.connection.connected;\n  }\n  get connecting() {\n    return this.provider.connection.connecting;\n  }\n  async publish(e, t, s) {\n    this.isInitialized(), await this.publisher.publish(e, t, s), await this.recordMessageEvent({ topic: e, message: t, publishedAt: Date.now() });\n  }\n  async subscribe(e, t) {\n    this.isInitialized();\n    let s = \"\";\n    return await Promise.all([new Promise((r) => {\n      this.subscriber.once(Bt.created, (n) => {\n        n.topic === e && r();\n      });\n    }), new Promise(async (r) => {\n      s = await this.subscriber.subscribe(e, t), r();\n    })]), s;\n  }\n  async unsubscribe(e, t) {\n    this.isInitialized(), await this.subscriber.unsubscribe(e, t);\n  }\n  on(e, t) {\n    this.events.on(e, t);\n  }\n  once(e, t) {\n    this.events.once(e, t);\n  }\n  off(e, t) {\n    this.events.off(e, t);\n  }\n  removeListener(e, t) {\n    this.events.removeListener(e, t);\n  }\n  async transportClose() {\n    this.transportExplicitlyClosed = !0, this.connected && (await this.provider.disconnect(), this.events.emit(He.transport_closed));\n  }\n  async transportOpen(e) {\n    if (this.transportExplicitlyClosed = !1, !this.reconnecting) {\n      this.relayUrl = e || this.relayUrl, this.reconnecting = !0;\n      try {\n        await Promise.all([new Promise((t) => {\n          this.initialized || t(), this.subscriber.once(Bt.resubscribed, () => {\n            t();\n          });\n        }), await Promise.race([new Promise(async (t, s) => {\n          await er(this.provider.connect(), 5e3, \"socket stalled\").catch((r) => s(r)).then(() => t()).finally(() => this.removeListener(He.transport_closed, this.rejectTransportOpen));\n        }), new Promise((t) => this.once(He.transport_closed, this.rejectTransportOpen))])]);\n      } catch (t) {\n        this.logger.error(t);\n        const s = t;\n        if (!this.isConnectionStalled(s.message))\n          throw t;\n        this.events.emit(He.transport_closed);\n      } finally {\n        this.reconnecting = !1;\n      }\n    }\n  }\n  async restartTransport(e) {\n    this.transportExplicitlyClosed || (this.relayUrl = e || this.relayUrl, this.connected && await Promise.all([new Promise((t) => {\n      this.provider.once(is.disconnect, () => {\n        t();\n      });\n    }), this.transportClose()]), await this.createProvider(), await this.transportOpen());\n  }\n  isConnectionStalled(e) {\n    return this.staleConnectionErrors.some((t) => e.includes(t));\n  }\n  rejectTransportOpen() {\n    throw new Error(\"closeTransport called before connection was established\");\n  }\n  async createProvider() {\n    const e = await this.core.crypto.signJWT(this.relayUrl);\n    this.provider = new _n(new Wc(mb({ sdkVersion: B0, protocol: this.protocol, version: this.version, relayUrl: this.relayUrl, projectId: this.projectId, auth: e, useOnCloseEvent: !0 }))), this.registerProviderListeners();\n  }\n  async recordMessageEvent(e) {\n    const { topic: t, message: s } = e;\n    await this.messages.set(t, s);\n  }\n  async shouldIgnoreMessageEvent(e) {\n    const { topic: t, message: s } = e;\n    return await this.subscriber.isSubscribed(t) ? this.messages.has(t, s) : !0;\n  }\n  async onProviderPayload(e) {\n    if (this.logger.debug(\"Incoming Relay Payload\"), this.logger.trace({ type: \"payload\", direction: \"incoming\", payload: e }), ji(e)) {\n      if (!e.method.endsWith(K0))\n        return;\n      const t = e.params, { topic: s, message: r, publishedAt: n } = t.data, o = { topic: s, message: r, publishedAt: n };\n      this.logger.debug(\"Emitting Relayer Payload\"), this.logger.trace(yv({ type: \"event\", event: t.id }, o)), this.events.emit(t.id, o), await this.acknowledgePayload(e), await this.onMessageEvent(o);\n    } else\n      Oi(e) && this.events.emit(He.message_ack, e);\n  }\n  async onMessageEvent(e) {\n    await this.shouldIgnoreMessageEvent(e) || (this.events.emit(He.message, e), await this.recordMessageEvent(e));\n  }\n  async acknowledgePayload(e) {\n    const t = xi(e.id, !0);\n    await this.provider.connection.send(t);\n  }\n  registerProviderListeners() {\n    this.provider.on(is.payload, (e) => this.onProviderPayload(e)), this.provider.on(is.connect, () => {\n      this.events.emit(He.connect);\n    }), this.provider.on(is.disconnect, () => {\n      this.onProviderDisconnect();\n    }), this.provider.on(is.error, (e) => {\n      this.logger.error(e), this.events.emit(He.error, e);\n    });\n  }\n  registerEventListeners() {\n    this.events.on(He.connection_stalled, async () => {\n      await this.restartTransport();\n    });\n  }\n  onProviderDisconnect() {\n    this.events.emit(He.disconnect), this.attemptToReconnect();\n  }\n  attemptToReconnect() {\n    this.transportExplicitlyClosed || setTimeout(async () => {\n      await this.restartTransport();\n    }, V.toMiliseconds(V0));\n  }\n  isInitialized() {\n    if (!this.initialized) {\n      const { message: e } = J(\"NOT_INITIALIZED\", this.name);\n      throw new Error(e);\n    }\n  }\n  async toEstablishConnection() {\n    if (!this.connected) {\n      if (this.connecting)\n        return await new Promise((e) => {\n          const t = setInterval(() => {\n            this.connected && (clearInterval(t), e());\n          }, this.connectionStatusPollingInterval);\n        });\n      await this.restartTransport();\n    }\n  }\n}\nvar bv = Object.defineProperty, Ma = Object.getOwnPropertySymbols, wv = Object.prototype.hasOwnProperty, vv = Object.prototype.propertyIsEnumerable, qa = (i, e, t) => e in i ? bv(i, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : i[e] = t, ja = (i, e) => {\n  for (var t in e || (e = {}))\n    wv.call(e, t) && qa(i, t, e[t]);\n  if (Ma)\n    for (var t of Ma(e))\n      vv.call(e, t) && qa(i, t, e[t]);\n  return i;\n};\nclass pr extends Lm {\n  constructor(e, t, s, r = ui, n = void 0) {\n    super(e, t, s, r), this.core = e, this.logger = t, this.name = s, this.map = /* @__PURE__ */ new Map(), this.version = H0, this.cached = [], this.initialized = !1, this.storagePrefix = ui, this.init = async () => {\n      this.initialized || (this.logger.trace(\"Initialized\"), await this.restore(), this.cached.forEach((o) => {\n        this.getKey && o !== null && !wt(o) ? this.map.set(this.getKey(o), o) : qb(o) ? this.map.set(o.id, o) : jb(o) && this.map.set(o.topic, o);\n      }), this.cached = [], this.initialized = !0);\n    }, this.set = async (o, c) => {\n      this.isInitialized(), this.map.has(o) ? await this.update(o, c) : (this.logger.debug(\"Setting value\"), this.logger.trace({ type: \"method\", method: \"set\", key: o, value: c }), this.map.set(o, c), await this.persist());\n    }, this.get = (o) => (this.isInitialized(), this.logger.debug(\"Getting value\"), this.logger.trace({ type: \"method\", method: \"get\", key: o }), this.getData(o)), this.getAll = (o) => (this.isInitialized(), o ? this.values.filter((c) => Object.keys(o).every((u) => Yc(c[u], o[u]))) : this.values), this.update = async (o, c) => {\n      this.isInitialized(), this.logger.debug(\"Updating value\"), this.logger.trace({ type: \"method\", method: \"update\", key: o, update: c });\n      const u = ja(ja({}, this.getData(o)), c);\n      this.map.set(o, u), await this.persist();\n    }, this.delete = async (o, c) => {\n      this.isInitialized(), this.map.has(o) && (this.logger.debug(\"Deleting value\"), this.logger.trace({ type: \"method\", method: \"delete\", key: o, reason: c }), this.map.delete(o), await this.persist());\n    }, this.logger = ee.generateChildLogger(t, this.name), this.storagePrefix = r, this.getKey = n;\n  }\n  get context() {\n    return ee.getLoggerContext(this.logger);\n  }\n  get storageKey() {\n    return this.storagePrefix + this.version + \"//\" + this.name;\n  }\n  get length() {\n    return this.map.size;\n  }\n  get keys() {\n    return Array.from(this.map.keys());\n  }\n  get values() {\n    return Array.from(this.map.values());\n  }\n  async setDataStore(e) {\n    await this.core.storage.setItem(this.storageKey, e);\n  }\n  async getDataStore() {\n    return await this.core.storage.getItem(this.storageKey);\n  }\n  getData(e) {\n    const t = this.map.get(e);\n    if (!t) {\n      const { message: s } = J(\"NO_MATCHING_KEY\", `${this.name}: ${e}`);\n      throw this.logger.error(s), new Error(s);\n    }\n    return t;\n  }\n  async persist() {\n    await this.setDataStore(this.values);\n  }\n  async restore() {\n    try {\n      const e = await this.getDataStore();\n      if (typeof e > \"u\" || !e.length)\n        return;\n      if (this.map.size) {\n        const { message: t } = J(\"RESTORE_WILL_OVERRIDE\", this.name);\n        throw this.logger.error(t), new Error(t);\n      }\n      this.cached = e, this.logger.debug(`Successfully Restored value for ${this.name}`), this.logger.trace({ type: \"method\", method: \"restore\", value: this.values });\n    } catch (e) {\n      this.logger.debug(`Failed to Restore value for ${this.name}`), this.logger.error(e);\n    }\n  }\n  isInitialized() {\n    if (!this.initialized) {\n      const { message: e } = J(\"NOT_INITIALIZED\", this.name);\n      throw new Error(e);\n    }\n  }\n}\nclass _v {\n  constructor(e, t) {\n    this.core = e, this.logger = t, this.name = J0, this.version = Q0, this.events = new ir(), this.initialized = !1, this.storagePrefix = ui, this.ignoredPayloadTypes = [Ni], this.registeredMethods = [], this.init = async () => {\n      this.initialized || (await this.pairings.init(), await this.cleanup(), this.registerRelayerEvents(), this.registerExpirerEvents(), this.initialized = !0, this.logger.trace(\"Initialized\"));\n    }, this.register = ({ methods: s }) => {\n      this.isInitialized(), this.registeredMethods = [.../* @__PURE__ */ new Set([...this.registeredMethods, ...s])];\n    }, this.create = async () => {\n      this.isInitialized();\n      const s = Xr(), r = await this.core.crypto.setSymKey(s), n = Ht(V.FIVE_MINUTES), o = { protocol: Mh }, c = { topic: r, expiry: n, relay: o, active: !1 }, u = Pb({ protocol: this.core.protocol, version: this.core.version, topic: r, symKey: s, relay: o });\n      return await this.pairings.set(r, c), await this.core.relayer.subscribe(r), this.core.expirer.set(r, n), { topic: r, uri: u };\n    }, this.pair = async (s) => {\n      this.isInitialized(), this.isValidPair(s);\n      const { topic: r, symKey: n, relay: o } = xb(s.uri);\n      if (this.pairings.keys.includes(r))\n        throw new Error(`Pairing already exists: ${r}`);\n      if (this.core.crypto.hasKeys(r))\n        throw new Error(`Keychain already exists: ${r}`);\n      const c = Ht(V.FIVE_MINUTES), u = { topic: r, relay: o, expiry: c, active: !1 };\n      return await this.pairings.set(r, u), await this.core.crypto.setSymKey(n, r), await this.core.relayer.subscribe(r, { relay: o }), this.core.expirer.set(r, c), s.activatePairing && await this.activate({ topic: r }), u;\n    }, this.activate = async ({ topic: s }) => {\n      this.isInitialized();\n      const r = Ht(V.THIRTY_DAYS);\n      await this.pairings.update(s, { active: !0, expiry: r }), this.core.expirer.set(s, r);\n    }, this.ping = async (s) => {\n      this.isInitialized(), await this.isValidPing(s);\n      const { topic: r } = s;\n      if (this.pairings.keys.includes(r)) {\n        const n = await this.sendRequest(r, \"wc_pairingPing\", {}), { done: o, resolve: c, reject: u } = Ti();\n        this.events.once(ke(\"pairing_ping\", n), ({ error: d }) => {\n          d ? u(d) : c();\n        }), await o();\n      }\n    }, this.updateExpiry = async ({ topic: s, expiry: r }) => {\n      this.isInitialized(), await this.pairings.update(s, { expiry: r });\n    }, this.updateMetadata = async ({ topic: s, metadata: r }) => {\n      this.isInitialized(), await this.pairings.update(s, { peerMetadata: r });\n    }, this.getPairings = () => (this.isInitialized(), this.pairings.values), this.disconnect = async (s) => {\n      this.isInitialized(), await this.isValidDisconnect(s);\n      const { topic: r } = s;\n      this.pairings.keys.includes(r) && (await this.sendRequest(r, \"wc_pairingDelete\", Je(\"USER_DISCONNECTED\")), await this.deletePairing(r));\n    }, this.sendRequest = async (s, r, n) => {\n      const o = ti(r, n), c = await this.core.crypto.encode(s, o), u = ss[r].req;\n      return this.core.history.set(s, o), this.core.relayer.publish(s, c, u), o.id;\n    }, this.sendResult = async (s, r, n) => {\n      const o = xi(s, n), c = await this.core.crypto.encode(r, o), u = await this.core.history.get(r, s), d = ss[u.request.method].res;\n      await this.core.relayer.publish(r, c, d), await this.core.history.resolve(o);\n    }, this.sendError = async (s, r, n) => {\n      const o = qi(s, n), c = await this.core.crypto.encode(r, o), u = await this.core.history.get(r, s), d = ss[u.request.method] ? ss[u.request.method].res : ss.unregistered_method.res;\n      await this.core.relayer.publish(r, c, d), await this.core.history.resolve(o);\n    }, this.deletePairing = async (s, r) => {\n      await this.core.relayer.unsubscribe(s), await Promise.all([this.pairings.delete(s, Je(\"USER_DISCONNECTED\")), this.core.crypto.deleteSymKey(s), r ? Promise.resolve() : this.core.expirer.del(s)]);\n    }, this.cleanup = async () => {\n      const s = this.pairings.getAll().filter((r) => ci(r.expiry));\n      await Promise.all(s.map((r) => this.deletePairing(r.topic)));\n    }, this.onRelayEventRequest = (s) => {\n      const { topic: r, payload: n } = s, o = n.method;\n      if (this.pairings.keys.includes(r))\n        switch (o) {\n          case \"wc_pairingPing\":\n            return this.onPairingPingRequest(r, n);\n          case \"wc_pairingDelete\":\n            return this.onPairingDeleteRequest(r, n);\n          default:\n            return this.onUnknownRpcMethodRequest(r, n);\n        }\n    }, this.onRelayEventResponse = async (s) => {\n      const { topic: r, payload: n } = s, o = (await this.core.history.get(r, n.id)).request.method;\n      if (this.pairings.keys.includes(r))\n        switch (o) {\n          case \"wc_pairingPing\":\n            return this.onPairingPingResponse(r, n);\n          default:\n            return this.onUnknownRpcMethodResponse(o);\n        }\n    }, this.onPairingPingRequest = async (s, r) => {\n      const { id: n } = r;\n      try {\n        this.isValidPing({ topic: s }), await this.sendResult(n, s, !0), this.events.emit(\"pairing_ping\", { id: n, topic: s });\n      } catch (o) {\n        await this.sendError(n, s, o), this.logger.error(o);\n      }\n    }, this.onPairingPingResponse = (s, r) => {\n      const { id: n } = r;\n      setTimeout(() => {\n        ht(r) ? this.events.emit(ke(\"pairing_ping\", n), {}) : Ge(r) && this.events.emit(ke(\"pairing_ping\", n), { error: r.error });\n      }, 500);\n    }, this.onPairingDeleteRequest = async (s, r) => {\n      const { id: n } = r;\n      try {\n        this.isValidDisconnect({ topic: s }), await this.deletePairing(s), this.events.emit(\"pairing_delete\", { id: n, topic: s });\n      } catch (o) {\n        await this.sendError(n, s, o), this.logger.error(o);\n      }\n    }, this.onUnknownRpcMethodRequest = async (s, r) => {\n      const { id: n, method: o } = r;\n      try {\n        if (this.registeredMethods.includes(o))\n          return;\n        const c = Je(\"WC_METHOD_UNSUPPORTED\", o);\n        await this.sendError(n, s, c), this.logger.error(c);\n      } catch (c) {\n        await this.sendError(n, s, c), this.logger.error(c);\n      }\n    }, this.onUnknownRpcMethodResponse = (s) => {\n      this.registeredMethods.includes(s) || this.logger.error(Je(\"WC_METHOD_UNSUPPORTED\", s));\n    }, this.isValidPair = (s) => {\n      if (!It(s)) {\n        const { message: r } = J(\"MISSING_OR_INVALID\", `pair() params: ${s}`);\n        throw new Error(r);\n      }\n      if (!Mb(s.uri)) {\n        const { message: r } = J(\"MISSING_OR_INVALID\", `pair() uri: ${s.uri}`);\n        throw new Error(r);\n      }\n    }, this.isValidPing = async (s) => {\n      if (!It(s)) {\n        const { message: n } = J(\"MISSING_OR_INVALID\", `ping() params: ${s}`);\n        throw new Error(n);\n      }\n      const { topic: r } = s;\n      await this.isValidPairingTopic(r);\n    }, this.isValidDisconnect = async (s) => {\n      if (!It(s)) {\n        const { message: n } = J(\"MISSING_OR_INVALID\", `disconnect() params: ${s}`);\n        throw new Error(n);\n      }\n      const { topic: r } = s;\n      await this.isValidPairingTopic(r);\n    }, this.isValidPairingTopic = async (s) => {\n      if (!at(s, !1)) {\n        const { message: r } = J(\"MISSING_OR_INVALID\", `pairing topic should be a string: ${s}`);\n        throw new Error(r);\n      }\n      if (!this.pairings.keys.includes(s)) {\n        const { message: r } = J(\"NO_MATCHING_KEY\", `pairing topic doesn't exist: ${s}`);\n        throw new Error(r);\n      }\n      if (ci(this.pairings.get(s).expiry)) {\n        await this.deletePairing(s);\n        const { message: r } = J(\"EXPIRED\", `pairing topic: ${s}`);\n        throw new Error(r);\n      }\n    }, this.core = e, this.logger = ee.generateChildLogger(t, this.name), this.pairings = new pr(this.core, this.logger, this.name, this.storagePrefix);\n  }\n  get context() {\n    return ee.getLoggerContext(this.logger);\n  }\n  isInitialized() {\n    if (!this.initialized) {\n      const { message: e } = J(\"NOT_INITIALIZED\", this.name);\n      throw new Error(e);\n    }\n  }\n  registerRelayerEvents() {\n    this.core.relayer.on(He.message, async (e) => {\n      const { topic: t, message: s } = e;\n      if (this.ignoredPayloadTypes.includes(this.core.crypto.getPayloadType(s)))\n        return;\n      const r = await this.core.crypto.decode(t, s);\n      ji(r) ? (this.core.history.set(t, r), this.onRelayEventRequest({ topic: t, payload: r })) : Oi(r) && (await this.core.history.resolve(r), this.onRelayEventResponse({ topic: t, payload: r }));\n    });\n  }\n  registerExpirerEvents() {\n    this.core.expirer.on($t.expired, async (e) => {\n      const { topic: t } = Sh(e.target);\n      t && this.pairings.keys.includes(t) && (await this.deletePairing(t, !0), this.events.emit(\"pairing_expire\", { topic: t }));\n    });\n  }\n}\nclass Ev extends Tm {\n  constructor(e, t) {\n    super(e, t), this.core = e, this.logger = t, this.records = /* @__PURE__ */ new Map(), this.events = new We.EventEmitter(), this.name = X0, this.version = Z0, this.cached = [], this.initialized = !1, this.storagePrefix = ui, this.init = async () => {\n      this.initialized || (this.logger.trace(\"Initialized\"), await this.restore(), this.cached.forEach((s) => this.records.set(s.id, s)), this.cached = [], this.registerEventListeners(), this.initialized = !0);\n    }, this.set = (s, r, n) => {\n      if (this.isInitialized(), this.logger.debug(\"Setting JSON-RPC request history record\"), this.logger.trace({ type: \"method\", method: \"set\", topic: s, request: r, chainId: n }), this.records.has(r.id))\n        return;\n      const o = { id: r.id, topic: s, request: { method: r.method, params: r.params || null }, chainId: n };\n      this.records.set(o.id, o), this.events.emit(Kt.created, o);\n    }, this.resolve = async (s) => {\n      if (this.isInitialized(), this.logger.debug(\"Updating JSON-RPC response history record\"), this.logger.trace({ type: \"method\", method: \"update\", response: s }), !this.records.has(s.id))\n        return;\n      const r = await this.getRecord(s.id);\n      typeof r.response > \"u\" && (r.response = Ge(s) ? { error: s.error } : { result: s.result }, this.records.set(r.id, r), this.events.emit(Kt.updated, r));\n    }, this.get = async (s, r) => (this.isInitialized(), this.logger.debug(\"Getting record\"), this.logger.trace({ type: \"method\", method: \"get\", topic: s, id: r }), await this.getRecord(r)), this.delete = (s, r) => {\n      this.isInitialized(), this.logger.debug(\"Deleting record\"), this.logger.trace({ type: \"method\", method: \"delete\", id: r }), this.values.forEach((n) => {\n        if (n.topic === s) {\n          if (typeof r < \"u\" && n.id !== r)\n            return;\n          this.records.delete(n.id), this.events.emit(Kt.deleted, n);\n        }\n      });\n    }, this.exists = async (s, r) => (this.isInitialized(), this.records.has(r) ? (await this.getRecord(r)).topic === s : !1), this.on = (s, r) => {\n      this.events.on(s, r);\n    }, this.once = (s, r) => {\n      this.events.once(s, r);\n    }, this.off = (s, r) => {\n      this.events.off(s, r);\n    }, this.removeListener = (s, r) => {\n      this.events.removeListener(s, r);\n    }, this.logger = ee.generateChildLogger(t, this.name);\n  }\n  get context() {\n    return ee.getLoggerContext(this.logger);\n  }\n  get storageKey() {\n    return this.storagePrefix + this.version + \"//\" + this.name;\n  }\n  get size() {\n    return this.records.size;\n  }\n  get keys() {\n    return Array.from(this.records.keys());\n  }\n  get values() {\n    return Array.from(this.records.values());\n  }\n  get pending() {\n    const e = [];\n    return this.values.forEach((t) => {\n      if (typeof t.response < \"u\")\n        return;\n      const s = { topic: t.topic, request: ti(t.request.method, t.request.params, t.id), chainId: t.chainId };\n      return e.push(s);\n    }), e;\n  }\n  async setJsonRpcRecords(e) {\n    await this.core.storage.setItem(this.storageKey, e);\n  }\n  async getJsonRpcRecords() {\n    return await this.core.storage.getItem(this.storageKey);\n  }\n  getRecord(e) {\n    this.isInitialized();\n    const t = this.records.get(e);\n    if (!t) {\n      const { message: s } = J(\"NO_MATCHING_KEY\", `${this.name}: ${e}`);\n      throw new Error(s);\n    }\n    return t;\n  }\n  async persist() {\n    await this.setJsonRpcRecords(this.values), this.events.emit(Kt.sync);\n  }\n  async restore() {\n    try {\n      const e = await this.getJsonRpcRecords();\n      if (typeof e > \"u\" || !e.length)\n        return;\n      if (this.records.size) {\n        const { message: t } = J(\"RESTORE_WILL_OVERRIDE\", this.name);\n        throw this.logger.error(t), new Error(t);\n      }\n      this.cached = e, this.logger.debug(`Successfully Restored records for ${this.name}`), this.logger.trace({ type: \"method\", method: \"restore\", records: this.values });\n    } catch (e) {\n      this.logger.debug(`Failed to Restore records for ${this.name}`), this.logger.error(e);\n    }\n  }\n  registerEventListeners() {\n    this.events.on(Kt.created, (e) => {\n      const t = Kt.created;\n      this.logger.info(`Emitting ${t}`), this.logger.debug({ type: \"event\", event: t, record: e }), this.persist();\n    }), this.events.on(Kt.updated, (e) => {\n      const t = Kt.updated;\n      this.logger.info(`Emitting ${t}`), this.logger.debug({ type: \"event\", event: t, record: e }), this.persist();\n    }), this.events.on(Kt.deleted, (e) => {\n      const t = Kt.deleted;\n      this.logger.info(`Emitting ${t}`), this.logger.debug({ type: \"event\", event: t, record: e }), this.persist();\n    });\n  }\n  isInitialized() {\n    if (!this.initialized) {\n      const { message: e } = J(\"NOT_INITIALIZED\", this.name);\n      throw new Error(e);\n    }\n  }\n}\nclass Sv extends qm {\n  constructor(e, t) {\n    super(e, t), this.core = e, this.logger = t, this.expirations = /* @__PURE__ */ new Map(), this.events = new We.EventEmitter(), this.name = ev, this.version = tv, this.cached = [], this.initialized = !1, this.storagePrefix = ui, this.init = async () => {\n      this.initialized || (this.logger.trace(\"Initialized\"), await this.restore(), this.cached.forEach((s) => this.expirations.set(s.target, s)), this.cached = [], this.registerEventListeners(), this.initialized = !0);\n    }, this.has = (s) => {\n      try {\n        const r = this.formatTarget(s);\n        return typeof this.getExpiration(r) < \"u\";\n      } catch {\n        return !1;\n      }\n    }, this.set = (s, r) => {\n      this.isInitialized();\n      const n = this.formatTarget(s), o = { target: n, expiry: r };\n      this.expirations.set(n, o), this.checkExpiry(n, o), this.events.emit($t.created, { target: n, expiration: o });\n    }, this.get = (s) => {\n      this.isInitialized();\n      const r = this.formatTarget(s);\n      return this.getExpiration(r);\n    }, this.del = (s) => {\n      if (this.isInitialized(), this.has(s)) {\n        const r = this.formatTarget(s), n = this.getExpiration(r);\n        this.expirations.delete(r), this.events.emit($t.deleted, { target: r, expiration: n });\n      }\n    }, this.on = (s, r) => {\n      this.events.on(s, r);\n    }, this.once = (s, r) => {\n      this.events.once(s, r);\n    }, this.off = (s, r) => {\n      this.events.off(s, r);\n    }, this.removeListener = (s, r) => {\n      this.events.removeListener(s, r);\n    }, this.logger = ee.generateChildLogger(t, this.name);\n  }\n  get context() {\n    return ee.getLoggerContext(this.logger);\n  }\n  get storageKey() {\n    return this.storagePrefix + this.version + \"//\" + this.name;\n  }\n  get length() {\n    return this.expirations.size;\n  }\n  get keys() {\n    return Array.from(this.expirations.keys());\n  }\n  get values() {\n    return Array.from(this.expirations.values());\n  }\n  formatTarget(e) {\n    if (typeof e == \"string\")\n      return bb(e);\n    if (typeof e == \"number\")\n      return wb(e);\n    const { message: t } = J(\"UNKNOWN_TYPE\", `Target type: ${typeof e}`);\n    throw new Error(t);\n  }\n  async setExpirations(e) {\n    await this.core.storage.setItem(this.storageKey, e);\n  }\n  async getExpirations() {\n    return await this.core.storage.getItem(this.storageKey);\n  }\n  async persist() {\n    await this.setExpirations(this.values), this.events.emit($t.sync);\n  }\n  async restore() {\n    try {\n      const e = await this.getExpirations();\n      if (typeof e > \"u\" || !e.length)\n        return;\n      if (this.expirations.size) {\n        const { message: t } = J(\"RESTORE_WILL_OVERRIDE\", this.name);\n        throw this.logger.error(t), new Error(t);\n      }\n      this.cached = e, this.logger.debug(`Successfully Restored expirations for ${this.name}`), this.logger.trace({ type: \"method\", method: \"restore\", expirations: this.values });\n    } catch (e) {\n      this.logger.debug(`Failed to Restore expirations for ${this.name}`), this.logger.error(e);\n    }\n  }\n  getExpiration(e) {\n    const t = this.expirations.get(e);\n    if (!t) {\n      const { message: s } = J(\"NO_MATCHING_KEY\", `${this.name}: ${e}`);\n      throw this.logger.error(s), new Error(s);\n    }\n    return t;\n  }\n  checkExpiry(e, t) {\n    const { expiry: s } = t;\n    V.toMiliseconds(s) - Date.now() <= 0 && this.expire(e, t);\n  }\n  expire(e, t) {\n    this.expirations.delete(e), this.events.emit($t.expired, { target: e, expiration: t });\n  }\n  checkExpirations() {\n    this.core.relayer.connected && this.expirations.forEach((e, t) => this.checkExpiry(t, e));\n  }\n  registerEventListeners() {\n    this.core.heartbeat.on(Wt.HEARTBEAT_EVENTS.pulse, () => this.checkExpirations()), this.events.on($t.created, (e) => {\n      const t = $t.created;\n      this.logger.info(`Emitting ${t}`), this.logger.debug({ type: \"event\", event: t, data: e }), this.persist();\n    }), this.events.on($t.expired, (e) => {\n      const t = $t.expired;\n      this.logger.info(`Emitting ${t}`), this.logger.debug({ type: \"event\", event: t, data: e }), this.persist();\n    }), this.events.on($t.deleted, (e) => {\n      const t = $t.deleted;\n      this.logger.info(`Emitting ${t}`), this.logger.debug({ type: \"event\", event: t, data: e }), this.persist();\n    });\n  }\n  isInitialized() {\n    if (!this.initialized) {\n      const { message: e } = J(\"NOT_INITIALIZED\", this.name);\n      throw new Error(e);\n    }\n  }\n}\nclass Iv extends jm {\n  constructor(e, t) {\n    super(e, t), this.projectId = e, this.logger = t, this.name = Tr, this.initialized = !1, this.init = async (s) => {\n      wh() || !Nn() || (this.verifyUrl = s?.verifyUrl || Ta, await this.createIframe());\n    }, this.register = async (s) => {\n      var r;\n      this.initialized || await this.init(), this.iframe && ((r = this.iframe.contentWindow) == null || r.postMessage(s.attestationId, this.verifyUrl), this.logger.info(`postMessage sent: ${s.attestationId} ${this.verifyUrl}`));\n    }, this.resolve = async (s) => {\n      var r;\n      if (this.isDevEnv)\n        return \"\";\n      this.logger.info(`resolving attestation: ${s.attestationId}`);\n      const n = this.startAbortTimer(V.FIVE_SECONDS), o = await fetch(`${this.verifyUrl}/attestation/${s.attestationId}`, { signal: this.abortController.signal });\n      return clearTimeout(n), o.status === 200 ? (r = await o.json()) == null ? void 0 : r.origin : \"\";\n    }, this.createIframe = async () => {\n      try {\n        await Promise.race([new Promise((s, r) => {\n          if (document.getElementById(Tr))\n            return s();\n          const n = document.createElement(\"iframe\");\n          n.setAttribute(\"id\", Tr), n.setAttribute(\"src\", `${this.verifyUrl}/${this.projectId}`), n.style.display = \"none\", n.addEventListener(\"load\", () => {\n            this.initialized = !0, s();\n          }), n.addEventListener(\"error\", (o) => {\n            r(o);\n          }), document.body.append(n), this.iframe = n;\n        }), new Promise((s) => {\n          setTimeout(() => s(\"iframe load timeout\"), V.toMiliseconds(V.ONE_SECOND / 2));\n        })]);\n      } catch (s) {\n        this.logger.error(`Verify iframe failed to load: ${this.verifyUrl}`), this.logger.error(s);\n      }\n    }, this.logger = ee.generateChildLogger(t, this.name), this.verifyUrl = Ta, this.abortController = new AbortController(), this.isDevEnv = On() && process.env.IS_VITEST;\n  }\n  get context() {\n    return ee.getLoggerContext(this.logger);\n  }\n  startAbortTimer(e) {\n    return setTimeout(() => this.abortController.abort(), V.toMiliseconds(e));\n  }\n}\nvar Dv = Object.defineProperty, za = Object.getOwnPropertySymbols, xv = Object.prototype.hasOwnProperty, Ov = Object.prototype.propertyIsEnumerable, Ka = (i, e, t) => e in i ? Dv(i, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : i[e] = t, Va = (i, e) => {\n  for (var t in e || (e = {}))\n    xv.call(e, t) && Ka(i, t, e[t]);\n  if (za)\n    for (var t of za(e))\n      Ov.call(e, t) && Ka(i, t, e[t]);\n  return i;\n};\nlet Nv = class jh extends Am {\n  constructor(e) {\n    super(e), this.protocol = Lh, this.version = P0, this.name = Cn, this.events = new We.EventEmitter(), this.initialized = !1, this.on = (s, r) => this.events.on(s, r), this.once = (s, r) => this.events.once(s, r), this.off = (s, r) => this.events.off(s, r), this.removeListener = (s, r) => this.events.removeListener(s, r), this.projectId = e?.projectId, this.relayUrl = e?.relayUrl || qh;\n    const t = typeof e?.logger < \"u\" && typeof e?.logger != \"string\" ? e.logger : ee.pino(ee.getDefaultLoggerOptions({ level: e?.logger || R0.logger }));\n    this.logger = ee.generateChildLogger(t, this.name), this.heartbeat = new Wt.HeartBeat(), this.crypto = new sv(this, this.logger, e?.keychain), this.history = new Ev(this, this.logger), this.expirer = new Sv(this, this.logger), this.storage = e != null && e.storage ? e.storage : new nc(Va(Va({}, C0), e?.storageOptions)), this.relayer = new mv({ core: this, logger: this.logger, relayUrl: this.relayUrl, projectId: this.projectId }), this.pairing = new _v(this, this.logger), this.verify = new Iv(this.projectId || \"\", this.logger);\n  }\n  static async init(e) {\n    const t = new jh(e);\n    return await t.initialize(), t;\n  }\n  get context() {\n    return ee.getLoggerContext(this.logger);\n  }\n  async start() {\n    this.initialized || await this.initialize();\n  }\n  async initialize() {\n    this.logger.trace(\"Initialized\");\n    try {\n      await this.crypto.init(), await this.history.init(), await this.expirer.init(), await this.relayer.init(), await this.heartbeat.init(), await this.pairing.init(), this.initialized = !0, this.logger.info(\"Core Initialization Success\");\n    } catch (e) {\n      throw this.logger.warn(`Core Initialization Failure at epoch ${Date.now()}`, e), this.logger.error(e.message), e;\n    }\n  }\n};\nconst Pv = Nv, zh = \"wc\", Kh = 2, Vh = \"client\", An = `${zh}@${Kh}:${Vh}:`, Fr = { name: Vh, logger: \"error\", controller: !1, relayUrl: \"wss://relay.walletconnect.com\" }, Rv = \"proposal\", Cv = \"Proposal expired\", Av = \"session\", Ls = V.SEVEN_DAYS, Tv = \"engine\", ns = { wc_sessionPropose: { req: { ttl: V.FIVE_MINUTES, prompt: !0, tag: 1100 }, res: { ttl: V.FIVE_MINUTES, prompt: !1, tag: 1101 } }, wc_sessionSettle: { req: { ttl: V.FIVE_MINUTES, prompt: !1, tag: 1102 }, res: { ttl: V.FIVE_MINUTES, prompt: !1, tag: 1103 } }, wc_sessionUpdate: { req: { ttl: V.ONE_DAY, prompt: !1, tag: 1104 }, res: { ttl: V.ONE_DAY, prompt: !1, tag: 1105 } }, wc_sessionExtend: { req: { ttl: V.ONE_DAY, prompt: !1, tag: 1106 }, res: { ttl: V.ONE_DAY, prompt: !1, tag: 1107 } }, wc_sessionRequest: { req: { ttl: V.FIVE_MINUTES, prompt: !0, tag: 1108 }, res: { ttl: V.FIVE_MINUTES, prompt: !1, tag: 1109 } }, wc_sessionEvent: { req: { ttl: V.FIVE_MINUTES, prompt: !0, tag: 1110 }, res: { ttl: V.FIVE_MINUTES, prompt: !1, tag: 1111 } }, wc_sessionDelete: { req: { ttl: V.ONE_DAY, prompt: !1, tag: 1112 }, res: { ttl: V.ONE_DAY, prompt: !1, tag: 1113 } }, wc_sessionPing: { req: { ttl: V.THIRTY_SECONDS, prompt: !1, tag: 1114 }, res: { ttl: V.THIRTY_SECONDS, prompt: !1, tag: 1115 } } }, Ur = { min: V.FIVE_MINUTES, max: V.SEVEN_DAYS }, $v = \"request\", Fv = [\"wc_sessionPropose\", \"wc_sessionRequest\", \"wc_authRequest\"];\nvar Uv = Object.defineProperty, Lv = Object.defineProperties, Mv = Object.getOwnPropertyDescriptors, Ba = Object.getOwnPropertySymbols, qv = Object.prototype.hasOwnProperty, jv = Object.prototype.propertyIsEnumerable, ka = (i, e, t) => e in i ? Uv(i, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : i[e] = t, At = (i, e) => {\n  for (var t in e || (e = {}))\n    qv.call(e, t) && ka(i, t, e[t]);\n  if (Ba)\n    for (var t of Ba(e))\n      jv.call(e, t) && ka(i, t, e[t]);\n  return i;\n}, Lr = (i, e) => Lv(i, Mv(e));\nclass zv extends Km {\n  constructor(e) {\n    super(e), this.name = Tv, this.events = new ir(), this.initialized = !1, this.ignoredPayloadTypes = [Ni], this.init = async () => {\n      this.initialized || (await this.cleanup(), this.registerRelayerEvents(), this.registerExpirerEvents(), this.client.core.pairing.register({ methods: Object.keys(ns) }), this.initialized = !0);\n    }, this.connect = async (t) => {\n      this.isInitialized();\n      const s = Lr(At({}, t), { requiredNamespaces: t.requiredNamespaces || {}, optionalNamespaces: t.optionalNamespaces || {} });\n      await this.isValidConnect(s);\n      const { pairingTopic: r, requiredNamespaces: n, optionalNamespaces: o, sessionProperties: c, relays: u } = s;\n      let d = r, p, b = !1;\n      if (d && (b = this.client.core.pairing.pairings.get(d).active), !d || !b) {\n        const { topic: D, uri: y } = await this.client.core.pairing.create();\n        d = D, p = y;\n      }\n      const x = await this.client.core.crypto.generateKeyPair(), O = At({ requiredNamespaces: n, optionalNamespaces: o, relays: u ?? [{ protocol: Mh }], proposer: { publicKey: x, metadata: this.client.metadata } }, c && { sessionProperties: c }), { reject: _, resolve: C, done: F } = Ti(V.FIVE_MINUTES, Cv);\n      if (this.events.once(ke(\"session_connect\"), async ({ error: D, session: y }) => {\n        if (D)\n          _(D);\n        else if (y) {\n          y.self.publicKey = x;\n          const w = Lr(At({}, y), { requiredNamespaces: y.requiredNamespaces, optionalNamespaces: y.optionalNamespaces });\n          await this.client.session.set(y.topic, w), await this.setExpiry(y.topic, y.expiry), d && await this.client.core.pairing.updateMetadata({ topic: d, metadata: y.peer.metadata }), C(w);\n        }\n      }), !d) {\n        const { message: D } = J(\"NO_MATCHING_KEY\", `connect() pairing topic: ${d}`);\n        throw new Error(D);\n      }\n      const K = await this.sendRequest(d, \"wc_sessionPropose\", O), I = Ht(V.FIVE_MINUTES);\n      return await this.setProposal(K, At({ id: K, expiry: I }, O)), { uri: p, approval: F };\n    }, this.pair = async (t) => (this.isInitialized(), await this.client.core.pairing.pair(t)), this.approve = async (t) => {\n      this.isInitialized(), await this.isValidApprove(t);\n      const { id: s, relayProtocol: r, namespaces: n, sessionProperties: o } = t, c = this.client.proposal.get(s);\n      let { pairingTopic: u, proposer: d, requiredNamespaces: p, optionalNamespaces: b } = c;\n      u = u || \"\", us(p) || (p = Tb(n, \"approve()\"));\n      const x = await this.client.core.crypto.generateKeyPair(), O = d.publicKey, _ = await this.client.core.crypto.generateSharedKey(x, O);\n      u && s && (await this.client.core.pairing.updateMetadata({ topic: u, metadata: d.metadata }), await this.sendResult(s, u, { relay: { protocol: r ?? \"irn\" }, responderPublicKey: x }), await this.client.proposal.delete(s, Je(\"USER_DISCONNECTED\")), await this.client.core.pairing.activate({ topic: u }));\n      const C = At({ relay: { protocol: r ?? \"irn\" }, namespaces: n, requiredNamespaces: p, optionalNamespaces: b, pairingTopic: u, controller: { publicKey: x, metadata: this.client.metadata }, expiry: Ht(Ls) }, o && { sessionProperties: o });\n      await this.client.core.relayer.subscribe(_), await this.sendRequest(_, \"wc_sessionSettle\", C);\n      const F = Lr(At({}, C), { topic: _, pairingTopic: u, acknowledged: !1, self: C.controller, peer: { publicKey: d.publicKey, metadata: d.metadata }, controller: x });\n      return await this.client.session.set(_, F), await this.setExpiry(_, Ht(Ls)), { topic: _, acknowledged: () => new Promise((K) => setTimeout(() => K(this.client.session.get(_)), 500)) };\n    }, this.reject = async (t) => {\n      this.isInitialized(), await this.isValidReject(t);\n      const { id: s, reason: r } = t, { pairingTopic: n } = this.client.proposal.get(s);\n      n && (await this.sendError(s, n, r), await this.client.proposal.delete(s, Je(\"USER_DISCONNECTED\")));\n    }, this.update = async (t) => {\n      this.isInitialized(), await this.isValidUpdate(t);\n      const { topic: s, namespaces: r } = t, n = await this.sendRequest(s, \"wc_sessionUpdate\", { namespaces: r }), { done: o, resolve: c, reject: u } = Ti();\n      return this.events.once(ke(\"session_update\", n), ({ error: d }) => {\n        d ? u(d) : c();\n      }), await this.client.session.update(s, { namespaces: r }), { acknowledged: o };\n    }, this.extend = async (t) => {\n      this.isInitialized(), await this.isValidExtend(t);\n      const { topic: s } = t, r = await this.sendRequest(s, \"wc_sessionExtend\", {}), { done: n, resolve: o, reject: c } = Ti();\n      return this.events.once(ke(\"session_extend\", r), ({ error: u }) => {\n        u ? c(u) : o();\n      }), await this.setExpiry(s, Ht(Ls)), { acknowledged: n };\n    }, this.request = async (t) => {\n      this.isInitialized(), await this.isValidRequest(t);\n      const { chainId: s, request: r, topic: n, expiry: o } = t, c = await this.sendRequest(n, \"wc_sessionRequest\", { request: r, chainId: s }, o), { done: u, resolve: d, reject: p } = Ti(o);\n      return this.events.once(ke(\"session_request\", c), ({ error: b, result: x }) => {\n        b ? p(b) : d(x);\n      }), this.client.events.emit(\"session_request_sent\", { topic: n, request: r, chainId: s, id: c }), await u();\n    }, this.respond = async (t) => {\n      this.isInitialized(), await this.isValidRespond(t);\n      const { topic: s, response: r } = t, { id: n } = r;\n      ht(r) ? await this.sendResult(n, s, r.result) : Ge(r) && await this.sendError(n, s, r.error), this.deletePendingSessionRequest(t.response.id, { message: \"fulfilled\", code: 0 });\n    }, this.ping = async (t) => {\n      this.isInitialized(), await this.isValidPing(t);\n      const { topic: s } = t;\n      if (this.client.session.keys.includes(s)) {\n        const r = await this.sendRequest(s, \"wc_sessionPing\", {}), { done: n, resolve: o, reject: c } = Ti();\n        this.events.once(ke(\"session_ping\", r), ({ error: u }) => {\n          u ? c(u) : o();\n        }), await n();\n      } else\n        this.client.core.pairing.pairings.keys.includes(s) && await this.client.core.pairing.ping({ topic: s });\n    }, this.emit = async (t) => {\n      this.isInitialized(), await this.isValidEmit(t);\n      const { topic: s, event: r, chainId: n } = t;\n      await this.sendRequest(s, \"wc_sessionEvent\", { event: r, chainId: n });\n    }, this.disconnect = async (t) => {\n      this.isInitialized(), await this.isValidDisconnect(t);\n      const { topic: s } = t;\n      this.client.session.keys.includes(s) ? (await this.sendRequest(s, \"wc_sessionDelete\", Je(\"USER_DISCONNECTED\")), await this.deleteSession(s)) : await this.client.core.pairing.disconnect({ topic: s });\n    }, this.find = (t) => (this.isInitialized(), this.client.session.getAll().filter((s) => Ub(s, t))), this.getPendingSessionRequests = () => (this.isInitialized(), this.client.pendingRequest.getAll()), this.cleanupDuplicatePairings = async (t) => {\n      try {\n        const s = this.client.core.pairing.pairings.get(t.pairingTopic), r = this.client.core.pairing.pairings.getAll().filter((n) => {\n          var o, c;\n          return ((o = n.peerMetadata) == null ? void 0 : o.url) && ((c = n.peerMetadata) == null ? void 0 : c.url) === t.self.metadata.url && n.topic !== s.topic;\n        });\n        if (r.length === 0)\n          return;\n        this.client.logger.info(`Cleaning up ${r.length} duplicate pairing(s)`), await Promise.all(r.map((n) => this.client.core.pairing.disconnect({ topic: n.topic }))), this.client.logger.info(\"Duplicate pairings clean up finished\");\n      } catch (s) {\n        this.client.logger.error(s);\n      }\n    }, this.deleteSession = async (t, s) => {\n      const { self: r } = this.client.session.get(t);\n      await this.client.core.relayer.unsubscribe(t), await Promise.all([this.client.session.delete(t, Je(\"USER_DISCONNECTED\")), this.client.core.crypto.deleteKeyPair(r.publicKey), this.client.core.crypto.deleteSymKey(t), s ? Promise.resolve() : this.client.core.expirer.del(t)]);\n    }, this.deleteProposal = async (t, s) => {\n      await Promise.all([this.client.proposal.delete(t, Je(\"USER_DISCONNECTED\")), s ? Promise.resolve() : this.client.core.expirer.del(t)]);\n    }, this.deletePendingSessionRequest = async (t, s, r = !1) => {\n      await Promise.all([this.client.pendingRequest.delete(t, s), r ? Promise.resolve() : this.client.core.expirer.del(t)]);\n    }, this.setExpiry = async (t, s) => {\n      this.client.session.keys.includes(t) && await this.client.session.update(t, { expiry: s }), this.client.core.expirer.set(t, s);\n    }, this.setProposal = async (t, s) => {\n      await this.client.proposal.set(t, s), this.client.core.expirer.set(t, s.expiry);\n    }, this.setPendingSessionRequest = async (t) => {\n      const s = ns.wc_sessionRequest.req.ttl, { id: r, topic: n, params: o } = t;\n      await this.client.pendingRequest.set(r, { id: r, topic: n, params: o }), s && this.client.core.expirer.set(r, Ht(s));\n    }, this.sendRequest = async (t, s, r, n) => {\n      const o = ti(s, r);\n      if (Nn() && Fv.includes(s)) {\n        const d = Ui(JSON.stringify(o));\n        await this.client.core.verify.register({ attestationId: d });\n      }\n      const c = await this.client.core.crypto.encode(t, o), u = ns[s].req;\n      return n && (u.ttl = n), this.client.core.history.set(t, o), this.client.core.relayer.publish(t, c, u), o.id;\n    }, this.sendResult = async (t, s, r) => {\n      const n = xi(t, r), o = await this.client.core.crypto.encode(s, n), c = await this.client.core.history.get(s, t), u = ns[c.request.method].res;\n      this.client.core.relayer.publish(s, o, u), await this.client.core.history.resolve(n);\n    }, this.sendError = async (t, s, r) => {\n      const n = qi(t, r), o = await this.client.core.crypto.encode(s, n), c = await this.client.core.history.get(s, t), u = ns[c.request.method].res;\n      this.client.core.relayer.publish(s, o, u), await this.client.core.history.resolve(n);\n    }, this.cleanup = async () => {\n      const t = [], s = [];\n      this.client.session.getAll().forEach((r) => {\n        ci(r.expiry) && t.push(r.topic);\n      }), this.client.proposal.getAll().forEach((r) => {\n        ci(r.expiry) && s.push(r.id);\n      }), await Promise.all([...t.map((r) => this.deleteSession(r)), ...s.map((r) => this.deleteProposal(r))]);\n    }, this.onRelayEventRequest = (t) => {\n      const { topic: s, payload: r } = t, n = r.method;\n      switch (n) {\n        case \"wc_sessionPropose\":\n          return this.onSessionProposeRequest(s, r);\n        case \"wc_sessionSettle\":\n          return this.onSessionSettleRequest(s, r);\n        case \"wc_sessionUpdate\":\n          return this.onSessionUpdateRequest(s, r);\n        case \"wc_sessionExtend\":\n          return this.onSessionExtendRequest(s, r);\n        case \"wc_sessionPing\":\n          return this.onSessionPingRequest(s, r);\n        case \"wc_sessionDelete\":\n          return this.onSessionDeleteRequest(s, r);\n        case \"wc_sessionRequest\":\n          return this.onSessionRequest(s, r);\n        case \"wc_sessionEvent\":\n          return this.onSessionEventRequest(s, r);\n        default:\n          return this.client.logger.info(`Unsupported request method ${n}`);\n      }\n    }, this.onRelayEventResponse = async (t) => {\n      const { topic: s, payload: r } = t, n = (await this.client.core.history.get(s, r.id)).request.method;\n      switch (n) {\n        case \"wc_sessionPropose\":\n          return this.onSessionProposeResponse(s, r);\n        case \"wc_sessionSettle\":\n          return this.onSessionSettleResponse(s, r);\n        case \"wc_sessionUpdate\":\n          return this.onSessionUpdateResponse(s, r);\n        case \"wc_sessionExtend\":\n          return this.onSessionExtendResponse(s, r);\n        case \"wc_sessionPing\":\n          return this.onSessionPingResponse(s, r);\n        case \"wc_sessionRequest\":\n          return this.onSessionRequestResponse(s, r);\n        default:\n          return this.client.logger.info(`Unsupported response method ${n}`);\n      }\n    }, this.onSessionProposeRequest = async (t, s) => {\n      const { params: r, id: n } = s;\n      try {\n        this.isValidConnect(At({}, s.params));\n        const o = Ht(V.FIVE_MINUTES), c = At({ id: n, pairingTopic: t, expiry: o }, r);\n        await this.setProposal(n, c);\n        const u = Ui(JSON.stringify(s)), d = await this.getVerifyContext(u, c.proposer.metadata);\n        this.client.events.emit(\"session_proposal\", { id: n, params: c, verifyContext: d });\n      } catch (o) {\n        await this.sendError(n, t, o), this.client.logger.error(o);\n      }\n    }, this.onSessionProposeResponse = async (t, s) => {\n      const { id: r } = s;\n      if (ht(s)) {\n        const { result: n } = s;\n        this.client.logger.trace({ type: \"method\", method: \"onSessionProposeResponse\", result: n });\n        const o = this.client.proposal.get(r);\n        this.client.logger.trace({ type: \"method\", method: \"onSessionProposeResponse\", proposal: o });\n        const c = o.proposer.publicKey;\n        this.client.logger.trace({ type: \"method\", method: \"onSessionProposeResponse\", selfPublicKey: c });\n        const u = n.responderPublicKey;\n        this.client.logger.trace({ type: \"method\", method: \"onSessionProposeResponse\", peerPublicKey: u });\n        const d = await this.client.core.crypto.generateSharedKey(c, u);\n        this.client.logger.trace({ type: \"method\", method: \"onSessionProposeResponse\", sessionTopic: d });\n        const p = await this.client.core.relayer.subscribe(d);\n        this.client.logger.trace({ type: \"method\", method: \"onSessionProposeResponse\", subscriptionId: p }), await this.client.core.pairing.activate({ topic: t });\n      } else\n        Ge(s) && (await this.client.proposal.delete(r, Je(\"USER_DISCONNECTED\")), this.events.emit(ke(\"session_connect\"), { error: s.error }));\n    }, this.onSessionSettleRequest = async (t, s) => {\n      const { id: r, params: n } = s;\n      try {\n        this.isValidSessionSettleRequest(n);\n        const { relay: o, controller: c, expiry: u, namespaces: d, requiredNamespaces: p, optionalNamespaces: b, sessionProperties: x, pairingTopic: O } = s.params, _ = At({ topic: t, relay: o, expiry: u, namespaces: d, acknowledged: !0, pairingTopic: O, requiredNamespaces: p, optionalNamespaces: b, controller: c.publicKey, self: { publicKey: \"\", metadata: this.client.metadata }, peer: { publicKey: c.publicKey, metadata: c.metadata } }, x && { sessionProperties: x });\n        await this.sendResult(s.id, t, !0), this.events.emit(ke(\"session_connect\"), { session: _ }), this.cleanupDuplicatePairings(_);\n      } catch (o) {\n        await this.sendError(r, t, o), this.client.logger.error(o);\n      }\n    }, this.onSessionSettleResponse = async (t, s) => {\n      const { id: r } = s;\n      ht(s) ? (await this.client.session.update(t, { acknowledged: !0 }), this.events.emit(ke(\"session_approve\", r), {})) : Ge(s) && (await this.client.session.delete(t, Je(\"USER_DISCONNECTED\")), this.events.emit(ke(\"session_approve\", r), { error: s.error }));\n    }, this.onSessionUpdateRequest = async (t, s) => {\n      const { params: r, id: n } = s;\n      try {\n        this.isValidUpdate(At({ topic: t }, r)), await this.client.session.update(t, { namespaces: r.namespaces }), await this.sendResult(n, t, !0), this.client.events.emit(\"session_update\", { id: n, topic: t, params: r });\n      } catch (o) {\n        await this.sendError(n, t, o), this.client.logger.error(o);\n      }\n    }, this.onSessionUpdateResponse = (t, s) => {\n      const { id: r } = s;\n      ht(s) ? this.events.emit(ke(\"session_update\", r), {}) : Ge(s) && this.events.emit(ke(\"session_update\", r), { error: s.error });\n    }, this.onSessionExtendRequest = async (t, s) => {\n      const { id: r } = s;\n      try {\n        this.isValidExtend({ topic: t }), await this.setExpiry(t, Ht(Ls)), await this.sendResult(r, t, !0), this.client.events.emit(\"session_extend\", { id: r, topic: t });\n      } catch (n) {\n        await this.sendError(r, t, n), this.client.logger.error(n);\n      }\n    }, this.onSessionExtendResponse = (t, s) => {\n      const { id: r } = s;\n      ht(s) ? this.events.emit(ke(\"session_extend\", r), {}) : Ge(s) && this.events.emit(ke(\"session_extend\", r), { error: s.error });\n    }, this.onSessionPingRequest = async (t, s) => {\n      const { id: r } = s;\n      try {\n        this.isValidPing({ topic: t }), await this.sendResult(r, t, !0), this.client.events.emit(\"session_ping\", { id: r, topic: t });\n      } catch (n) {\n        await this.sendError(r, t, n), this.client.logger.error(n);\n      }\n    }, this.onSessionPingResponse = (t, s) => {\n      const { id: r } = s;\n      setTimeout(() => {\n        ht(s) ? this.events.emit(ke(\"session_ping\", r), {}) : Ge(s) && this.events.emit(ke(\"session_ping\", r), { error: s.error });\n      }, 500);\n    }, this.onSessionDeleteRequest = async (t, s) => {\n      const { id: r } = s;\n      try {\n        this.isValidDisconnect({ topic: t, reason: s.params }), await Promise.all([new Promise((n) => {\n          this.client.core.relayer.once(He.publish, async () => {\n            n(await this.deleteSession(t));\n          });\n        }), this.sendResult(r, t, !0)]), this.client.events.emit(\"session_delete\", { id: r, topic: t });\n      } catch (n) {\n        await this.sendError(r, t, n), this.client.logger.error(n);\n      }\n    }, this.onSessionRequest = async (t, s) => {\n      const { id: r, params: n } = s;\n      try {\n        this.isValidRequest(At({ topic: t }, n)), await this.setPendingSessionRequest({ id: r, topic: t, params: n });\n        const o = Ui(JSON.stringify(s)), c = this.client.session.get(t), u = await this.getVerifyContext(o, c.peer.metadata);\n        this.client.events.emit(\"session_request\", { id: r, topic: t, params: n, verifyContext: u });\n      } catch (o) {\n        await this.sendError(r, t, o), this.client.logger.error(o);\n      }\n    }, this.onSessionRequestResponse = (t, s) => {\n      const { id: r } = s;\n      ht(s) ? this.events.emit(ke(\"session_request\", r), { result: s.result }) : Ge(s) && this.events.emit(ke(\"session_request\", r), { error: s.error });\n    }, this.onSessionEventRequest = async (t, s) => {\n      const { id: r, params: n } = s;\n      try {\n        this.isValidEmit(At({ topic: t }, n)), this.client.events.emit(\"session_event\", { id: r, topic: t, params: n });\n      } catch (o) {\n        await this.sendError(r, t, o), this.client.logger.error(o);\n      }\n    }, this.isValidConnect = async (t) => {\n      if (!It(t)) {\n        const { message: u } = J(\"MISSING_OR_INVALID\", `connect() params: ${JSON.stringify(t)}`);\n        throw new Error(u);\n      }\n      const { pairingTopic: s, requiredNamespaces: r, optionalNamespaces: n, sessionProperties: o, relays: c } = t;\n      if (wt(s) || await this.isValidPairingTopic(s), !Wb(c, !0)) {\n        const { message: u } = J(\"MISSING_OR_INVALID\", `connect() relays: ${c}`);\n        throw new Error(u);\n      }\n      !wt(r) && us(r) !== 0 && this.validateNamespaces(r, \"requiredNamespaces\"), !wt(n) && us(n) !== 0 && this.validateNamespaces(n, \"optionalNamespaces\"), wt(o) || this.validateSessionProps(o, \"sessionProperties\");\n    }, this.validateNamespaces = (t, s) => {\n      const r = Gb(t, \"connect()\", s);\n      if (r)\n        throw new Error(r.message);\n    }, this.isValidApprove = async (t) => {\n      if (!It(t))\n        throw new Error(J(\"MISSING_OR_INVALID\", `approve() params: ${t}`).message);\n      const { id: s, namespaces: r, relayProtocol: n, sessionProperties: o } = t;\n      await this.isValidProposalId(s);\n      const c = this.client.proposal.get(s), u = Bs(r, \"approve()\");\n      if (u)\n        throw new Error(u.message);\n      const d = Ia(c.requiredNamespaces, r, \"approve()\");\n      if (d)\n        throw new Error(d.message);\n      if (!at(n, !0)) {\n        const { message: p } = J(\"MISSING_OR_INVALID\", `approve() relayProtocol: ${n}`);\n        throw new Error(p);\n      }\n      wt(o) || this.validateSessionProps(o, \"sessionProperties\");\n    }, this.isValidReject = async (t) => {\n      if (!It(t)) {\n        const { message: n } = J(\"MISSING_OR_INVALID\", `reject() params: ${t}`);\n        throw new Error(n);\n      }\n      const { id: s, reason: r } = t;\n      if (await this.isValidProposalId(s), !Jb(r)) {\n        const { message: n } = J(\"MISSING_OR_INVALID\", `reject() reason: ${JSON.stringify(r)}`);\n        throw new Error(n);\n      }\n    }, this.isValidSessionSettleRequest = (t) => {\n      if (!It(t)) {\n        const { message: d } = J(\"MISSING_OR_INVALID\", `onSessionSettleRequest() params: ${t}`);\n        throw new Error(d);\n      }\n      const { relay: s, controller: r, namespaces: n, expiry: o } = t;\n      if (!Dh(s)) {\n        const { message: d } = J(\"MISSING_OR_INVALID\", \"onSessionSettleRequest() relay protocol should be a string\");\n        throw new Error(d);\n      }\n      const c = zb(r, \"onSessionSettleRequest()\");\n      if (c)\n        throw new Error(c.message);\n      const u = Bs(n, \"onSessionSettleRequest()\");\n      if (u)\n        throw new Error(u.message);\n      if (ci(o)) {\n        const { message: d } = J(\"EXPIRED\", \"onSessionSettleRequest()\");\n        throw new Error(d);\n      }\n    }, this.isValidUpdate = async (t) => {\n      if (!It(t)) {\n        const { message: u } = J(\"MISSING_OR_INVALID\", `update() params: ${t}`);\n        throw new Error(u);\n      }\n      const { topic: s, namespaces: r } = t;\n      await this.isValidSessionTopic(s);\n      const n = this.client.session.get(s), o = Bs(r, \"update()\");\n      if (o)\n        throw new Error(o.message);\n      const c = Ia(n.requiredNamespaces, r, \"update()\");\n      if (c)\n        throw new Error(c.message);\n    }, this.isValidExtend = async (t) => {\n      if (!It(t)) {\n        const { message: r } = J(\"MISSING_OR_INVALID\", `extend() params: ${t}`);\n        throw new Error(r);\n      }\n      const { topic: s } = t;\n      await this.isValidSessionTopic(s);\n    }, this.isValidRequest = async (t) => {\n      if (!It(t)) {\n        const { message: u } = J(\"MISSING_OR_INVALID\", `request() params: ${t}`);\n        throw new Error(u);\n      }\n      const { topic: s, request: r, chainId: n, expiry: o } = t;\n      await this.isValidSessionTopic(s);\n      const { namespaces: c } = this.client.session.get(s);\n      if (!Sa(c, n)) {\n        const { message: u } = J(\"MISSING_OR_INVALID\", `request() chainId: ${n}`);\n        throw new Error(u);\n      }\n      if (!Qb(r)) {\n        const { message: u } = J(\"MISSING_OR_INVALID\", `request() ${JSON.stringify(r)}`);\n        throw new Error(u);\n      }\n      if (!ew(c, n, r.method)) {\n        const { message: u } = J(\"MISSING_OR_INVALID\", `request() method: ${r.method}`);\n        throw new Error(u);\n      }\n      if (o && !rw(o, Ur)) {\n        const { message: u } = J(\"MISSING_OR_INVALID\", `request() expiry: ${o}. Expiry must be a number (in seconds) between ${Ur.min} and ${Ur.max}`);\n        throw new Error(u);\n      }\n    }, this.isValidRespond = async (t) => {\n      if (!It(t)) {\n        const { message: n } = J(\"MISSING_OR_INVALID\", `respond() params: ${t}`);\n        throw new Error(n);\n      }\n      const { topic: s, response: r } = t;\n      if (await this.isValidSessionTopic(s), !Xb(r)) {\n        const { message: n } = J(\"MISSING_OR_INVALID\", `respond() response: ${JSON.stringify(r)}`);\n        throw new Error(n);\n      }\n    }, this.isValidPing = async (t) => {\n      if (!It(t)) {\n        const { message: r } = J(\"MISSING_OR_INVALID\", `ping() params: ${t}`);\n        throw new Error(r);\n      }\n      const { topic: s } = t;\n      await this.isValidSessionOrPairingTopic(s);\n    }, this.isValidEmit = async (t) => {\n      if (!It(t)) {\n        const { message: c } = J(\"MISSING_OR_INVALID\", `emit() params: ${t}`);\n        throw new Error(c);\n      }\n      const { topic: s, event: r, chainId: n } = t;\n      await this.isValidSessionTopic(s);\n      const { namespaces: o } = this.client.session.get(s);\n      if (!Sa(o, n)) {\n        const { message: c } = J(\"MISSING_OR_INVALID\", `emit() chainId: ${n}`);\n        throw new Error(c);\n      }\n      if (!Zb(r)) {\n        const { message: c } = J(\"MISSING_OR_INVALID\", `emit() event: ${JSON.stringify(r)}`);\n        throw new Error(c);\n      }\n      if (!tw(o, n, r.name)) {\n        const { message: c } = J(\"MISSING_OR_INVALID\", `emit() event: ${JSON.stringify(r)}`);\n        throw new Error(c);\n      }\n    }, this.isValidDisconnect = async (t) => {\n      if (!It(t)) {\n        const { message: r } = J(\"MISSING_OR_INVALID\", `disconnect() params: ${t}`);\n        throw new Error(r);\n      }\n      const { topic: s } = t;\n      await this.isValidSessionOrPairingTopic(s);\n    }, this.getVerifyContext = async (t, s) => {\n      const r = { verified: { verifyUrl: s.verifyUrl || \"\", validation: \"UNKNOWN\", origin: s.url || \"\" } };\n      try {\n        const n = await this.client.core.verify.resolve({ attestationId: t, verifyUrl: s.verifyUrl });\n        n && (r.verified.origin = n, r.verified.validation = n === s.url ? \"VALID\" : \"INVALID\");\n      } catch (n) {\n        this.client.logger.error(n);\n      }\n      return this.client.logger.info(`Verify context: ${JSON.stringify(r)}`), r;\n    }, this.validateSessionProps = (t, s) => {\n      Object.values(t).forEach((r) => {\n        if (!at(r, !1)) {\n          const { message: n } = J(\"MISSING_OR_INVALID\", `${s} must be in Record<string, string> format. Received: ${JSON.stringify(r)}`);\n          throw new Error(n);\n        }\n      });\n    };\n  }\n  isInitialized() {\n    if (!this.initialized) {\n      const { message: e } = J(\"NOT_INITIALIZED\", this.name);\n      throw new Error(e);\n    }\n  }\n  registerRelayerEvents() {\n    this.client.core.relayer.on(He.message, async (e) => {\n      const { topic: t, message: s } = e;\n      if (this.ignoredPayloadTypes.includes(this.client.core.crypto.getPayloadType(s)))\n        return;\n      const r = await this.client.core.crypto.decode(t, s);\n      ji(r) ? (this.client.core.history.set(t, r), this.onRelayEventRequest({ topic: t, payload: r })) : Oi(r) && (await this.client.core.history.resolve(r), this.onRelayEventResponse({ topic: t, payload: r }));\n    });\n  }\n  registerExpirerEvents() {\n    this.client.core.expirer.on($t.expired, async (e) => {\n      const { topic: t, id: s } = Sh(e.target);\n      if (s && this.client.pendingRequest.keys.includes(s))\n        return await this.deletePendingSessionRequest(s, J(\"EXPIRED\"), !0);\n      t ? this.client.session.keys.includes(t) && (await this.deleteSession(t, !0), this.client.events.emit(\"session_expire\", { topic: t })) : s && (await this.deleteProposal(s, !0), this.client.events.emit(\"proposal_expire\", { id: s }));\n    });\n  }\n  isValidPairingTopic(e) {\n    if (!at(e, !1)) {\n      const { message: t } = J(\"MISSING_OR_INVALID\", `pairing topic should be a string: ${e}`);\n      throw new Error(t);\n    }\n    if (!this.client.core.pairing.pairings.keys.includes(e)) {\n      const { message: t } = J(\"NO_MATCHING_KEY\", `pairing topic doesn't exist: ${e}`);\n      throw new Error(t);\n    }\n    if (ci(this.client.core.pairing.pairings.get(e).expiry)) {\n      const { message: t } = J(\"EXPIRED\", `pairing topic: ${e}`);\n      throw new Error(t);\n    }\n  }\n  async isValidSessionTopic(e) {\n    if (!at(e, !1)) {\n      const { message: t } = J(\"MISSING_OR_INVALID\", `session topic should be a string: ${e}`);\n      throw new Error(t);\n    }\n    if (!this.client.session.keys.includes(e)) {\n      const { message: t } = J(\"NO_MATCHING_KEY\", `session topic doesn't exist: ${e}`);\n      throw new Error(t);\n    }\n    if (ci(this.client.session.get(e).expiry)) {\n      await this.deleteSession(e);\n      const { message: t } = J(\"EXPIRED\", `session topic: ${e}`);\n      throw new Error(t);\n    }\n  }\n  async isValidSessionOrPairingTopic(e) {\n    if (this.client.session.keys.includes(e))\n      await this.isValidSessionTopic(e);\n    else if (this.client.core.pairing.pairings.keys.includes(e))\n      this.isValidPairingTopic(e);\n    else if (at(e, !1)) {\n      const { message: t } = J(\"NO_MATCHING_KEY\", `session or pairing topic doesn't exist: ${e}`);\n      throw new Error(t);\n    } else {\n      const { message: t } = J(\"MISSING_OR_INVALID\", `session or pairing topic should be a string: ${e}`);\n      throw new Error(t);\n    }\n  }\n  async isValidProposalId(e) {\n    if (!Yb(e)) {\n      const { message: t } = J(\"MISSING_OR_INVALID\", `proposal id should be a number: ${e}`);\n      throw new Error(t);\n    }\n    if (!this.client.proposal.keys.includes(e)) {\n      const { message: t } = J(\"NO_MATCHING_KEY\", `proposal id doesn't exist: ${e}`);\n      throw new Error(t);\n    }\n    if (ci(this.client.proposal.get(e).expiry)) {\n      await this.deleteProposal(e);\n      const { message: t } = J(\"EXPIRED\", `proposal id: ${e}`);\n      throw new Error(t);\n    }\n  }\n}\nclass Kv extends pr {\n  constructor(e, t) {\n    super(e, t, Rv, An), this.core = e, this.logger = t;\n  }\n}\nclass Vv extends pr {\n  constructor(e, t) {\n    super(e, t, Av, An), this.core = e, this.logger = t;\n  }\n}\nclass Bv extends pr {\n  constructor(e, t) {\n    super(e, t, $v, An, (s) => s.id), this.core = e, this.logger = t;\n  }\n}\nclass Tn extends zm {\n  constructor(e) {\n    super(e), this.protocol = zh, this.version = Kh, this.name = Fr.name, this.events = new We.EventEmitter(), this.on = (s, r) => this.events.on(s, r), this.once = (s, r) => this.events.once(s, r), this.off = (s, r) => this.events.off(s, r), this.removeListener = (s, r) => this.events.removeListener(s, r), this.removeAllListeners = (s) => this.events.removeAllListeners(s), this.connect = async (s) => {\n      try {\n        return await this.engine.connect(s);\n      } catch (r) {\n        throw this.logger.error(r.message), r;\n      }\n    }, this.pair = async (s) => {\n      try {\n        return await this.engine.pair(s);\n      } catch (r) {\n        throw this.logger.error(r.message), r;\n      }\n    }, this.approve = async (s) => {\n      try {\n        return await this.engine.approve(s);\n      } catch (r) {\n        throw this.logger.error(r.message), r;\n      }\n    }, this.reject = async (s) => {\n      try {\n        return await this.engine.reject(s);\n      } catch (r) {\n        throw this.logger.error(r.message), r;\n      }\n    }, this.update = async (s) => {\n      try {\n        return await this.engine.update(s);\n      } catch (r) {\n        throw this.logger.error(r.message), r;\n      }\n    }, this.extend = async (s) => {\n      try {\n        return await this.engine.extend(s);\n      } catch (r) {\n        throw this.logger.error(r.message), r;\n      }\n    }, this.request = async (s) => {\n      try {\n        return await this.engine.request(s);\n      } catch (r) {\n        throw this.logger.error(r.message), r;\n      }\n    }, this.respond = async (s) => {\n      try {\n        return await this.engine.respond(s);\n      } catch (r) {\n        throw this.logger.error(r.message), r;\n      }\n    }, this.ping = async (s) => {\n      try {\n        return await this.engine.ping(s);\n      } catch (r) {\n        throw this.logger.error(r.message), r;\n      }\n    }, this.emit = async (s) => {\n      try {\n        return await this.engine.emit(s);\n      } catch (r) {\n        throw this.logger.error(r.message), r;\n      }\n    }, this.disconnect = async (s) => {\n      try {\n        return await this.engine.disconnect(s);\n      } catch (r) {\n        throw this.logger.error(r.message), r;\n      }\n    }, this.find = (s) => {\n      try {\n        return this.engine.find(s);\n      } catch (r) {\n        throw this.logger.error(r.message), r;\n      }\n    }, this.getPendingSessionRequests = () => {\n      try {\n        return this.engine.getPendingSessionRequests();\n      } catch (s) {\n        throw this.logger.error(s.message), s;\n      }\n    }, this.name = e?.name || Fr.name, this.metadata = e?.metadata || fb();\n    const t = typeof e?.logger < \"u\" && typeof e?.logger != \"string\" ? e.logger : ee.pino(ee.getDefaultLoggerOptions({ level: e?.logger || Fr.logger }));\n    this.core = e?.core || new Pv(e), this.logger = ee.generateChildLogger(t, this.name), this.session = new Vv(this.core, this.logger), this.proposal = new Kv(this.core, this.logger), this.pendingRequest = new Bv(this.core, this.logger), this.engine = new zv(this);\n  }\n  static async init(e) {\n    const t = new Tn(e);\n    return await t.initialize(), t;\n  }\n  get context() {\n    return ee.getLoggerContext(this.logger);\n  }\n  get pairing() {\n    return this.core.pairing.pairings;\n  }\n  async initialize() {\n    this.logger.trace(\"Initialized\");\n    try {\n      await this.core.start(), await this.session.init(), await this.proposal.init(), await this.pendingRequest.init(), await this.engine.init(), this.core.verify.init({ verifyUrl: this.metadata.verifyUrl }), this.logger.info(\"SignClient Initialization Success\");\n    } catch (e) {\n      throw this.logger.info(\"SignClient Initialization Failure\"), this.logger.error(e.message), e;\n    }\n  }\n}\nfunction kv(i) {\n  return typeof i < \"u\" && typeof i.context < \"u\";\n}\nconst Gt = { init: \"signer_init\", uri: \"signer_uri\", created: \"signer_created\", updated: \"signer_updated\", deleted: \"signer_deleted\", event: \"signer_event\" };\nclass Hv extends Dg {\n  constructor(e) {\n    super(), this.events = new We.EventEmitter(), this.pending = !1, this.initializing = !1, this.requiredNamespaces = e?.requiredNamespaces || {}, this.opts = e?.client;\n  }\n  get connected() {\n    return typeof this.session < \"u\";\n  }\n  get connecting() {\n    return this.pending;\n  }\n  get chains() {\n    return this.session ? Ym(this.session.namespaces) : Jm(this.requiredNamespaces);\n  }\n  get accounts() {\n    return this.session ? Wm(this.session.namespaces) : [];\n  }\n  on(e, t) {\n    this.events.on(e, t);\n  }\n  once(e, t) {\n    this.events.once(e, t);\n  }\n  off(e, t) {\n    this.events.off(e, t);\n  }\n  removeListener(e, t) {\n    this.events.removeListener(e, t);\n  }\n  async open() {\n    if (this.pending)\n      return new Promise((e, t) => {\n        this.events.once(\"open\", () => {\n          if (this.events.once(\"open_error\", (s) => {\n            t(s);\n          }), typeof this.client > \"u\")\n            return t(new Error(\"Sign Client not initialized\"));\n          e();\n        });\n      });\n    try {\n      this.pending = !0;\n      const e = await this.register(), t = e.find({ requiredNamespaces: this.requiredNamespaces });\n      if (t.length)\n        return this.onOpen(t[0]);\n      const { uri: s, approval: r } = await e.connect({ requiredNamespaces: this.requiredNamespaces });\n      this.events.emit(Gt.uri, { uri: s }), this.session = await r(), this.events.emit(Gt.created, this.session), this.onOpen();\n    } catch (e) {\n      throw this.events.emit(\"open_error\", e), e;\n    }\n  }\n  async close() {\n    typeof this.session > \"u\" || (await (await this.register()).disconnect({ topic: this.session.topic, reason: Je(\"USER_DISCONNECTED\") }), this.onClose());\n  }\n  async send(e, t) {\n    if (typeof this.client > \"u\" && (this.client = await this.register(), this.connected || await this.open()), typeof this.session > \"u\")\n      throw new Error(\"Signer connection is missing session\");\n    this.client.request({ topic: this.session.topic, request: e, chainId: t?.chainId }).then((s) => this.events.emit(\"payload\", xi(e.id, s))).catch((s) => this.events.emit(\"payload\", qi(e.id, s.message)));\n  }\n  async register(e = this.opts) {\n    if (typeof this.client < \"u\")\n      return this.client;\n    if (this.initializing)\n      return new Promise((t, s) => {\n        this.events.once(\"register_error\", (r) => {\n          s(r);\n        }), this.events.once(Gt.init, () => {\n          if (typeof this.client > \"u\")\n            return s(new Error(\"Sign Client not initialized\"));\n          t(this.client);\n        });\n      });\n    if (kv(e))\n      return this.client = e, this.registerEventListeners(), this.client;\n    try {\n      return this.initializing = !0, this.client = await Tn.init(e), this.initializing = !1, this.registerEventListeners(), this.events.emit(Gt.init), this.client;\n    } catch (t) {\n      throw this.events.emit(\"register_error\", t), t;\n    }\n  }\n  onOpen(e) {\n    this.pending = !1, e && (this.session = e), this.events.emit(\"open\");\n  }\n  onClose() {\n    this.pending = !1, this.client && (this.client = void 0), this.events.emit(\"close\");\n  }\n  registerEventListeners() {\n    typeof this.client < \"u\" && (this.client.on(\"session_event\", (e) => {\n      var t;\n      this.session && ((t = this.session) == null ? void 0 : t.topic) !== e.topic || this.events.emit(Gt.event, e.params);\n    }), this.client.on(\"session_update\", (e) => {\n      var t;\n      typeof this.client < \"u\" && (this.session && ((t = this.session) == null ? void 0 : t.topic) !== e.topic || (this.session = this.client.session.get(e.topic), this.events.emit(Gt.updated, this.session)));\n    }), this.client.on(\"session_delete\", (e) => {\n      var t;\n      this.session && (this.session && ((t = this.session) == null ? void 0 : t.topic) !== e.topic || (this.onClose(), this.events.emit(Gt.deleted, this.session), this.session = void 0));\n    }));\n  }\n}\nconst Bh = \":\";\nfunction Gv(i) {\n  const { namespace: e, reference: t } = i;\n  return [e, t].join(Bh);\n}\nfunction Wv(i) {\n  const [e, t, s] = i.split(Bh);\n  return { namespace: e, reference: t, address: s };\n}\nfunction Yv(i, e) {\n  const t = [];\n  return i.forEach((s) => {\n    const r = e(s);\n    t.includes(r) || t.push(r);\n  }), t;\n}\nfunction Jv(i) {\n  const { namespace: e, reference: t } = Wv(i);\n  return Gv({ namespace: e, reference: t });\n}\nfunction Qv(i) {\n  return Yv(i, Jv);\n}\nfunction Xv(i, e = []) {\n  const t = [];\n  return Object.keys(i).forEach((s) => {\n    if (e.length && !e.includes(s))\n      return;\n    const r = i[s];\n    t.push(...r.accounts);\n  }), t;\n}\nfunction Zv(i, e = []) {\n  const t = [];\n  return Object.keys(i).forEach((s) => {\n    if (e.length && !e.includes(s))\n      return;\n    const r = i[s];\n    t.push(...Qv(r.accounts));\n  }), t;\n}\nclass e_ {\n  constructor() {\n    we(this, \"accounts\", []);\n    we(this, \"eventEmitter\", new We.EventEmitter());\n    we(this, \"updateSession\", (e) => {\n      if (!this.isValidSession(e))\n        throw console.warn(\n          \"updateSession incompatible session\",\n          e,\n          \"for adapter\",\n          this.formatChainId(this.chainId)\n        ), new Error(\"Invalid session\");\n      this.session = e;\n      const t = Zv(e.namespaces, [this.namespace]);\n      this.setChainIds(t);\n      const s = Xv(e.namespaces, [\n        this.namespace\n      ]);\n      this.setAccounts(s);\n    });\n    we(this, \"isValidSession\", ({\n      namespaces: e,\n      requiredNamespaces: t\n    }) => {\n      const s = this.formatChainId(this.chainId);\n      return t ? !!t[this.namespace]?.chains?.includes(s) : !!e?.[this.namespace]?.accounts.some(\n        (r) => r.startsWith(s)\n      );\n    });\n  }\n  getRequiredNamespaces() {\n    const e = [this.formatChainId(this.chainId)];\n    return {\n      [this.namespace]: { chains: e, methods: this.methods, events: this.events }\n    };\n  }\n  isCompatibleChainId(e) {\n    return typeof e == \"string\" ? e.startsWith(`${this.namespace}:`) : !1;\n  }\n  setChainIds(e) {\n    const s = e.filter((r) => this.isCompatibleChainId(r)).map((r) => this.parseChainId(r)).filter((r) => r !== this.chainId);\n    s.length && (this.chainId = s[0], this.eventEmitter.emit(\"chainChanged\", this.chainId));\n  }\n  setChainId(e) {\n    if (this.isCompatibleChainId(e)) {\n      const t = this.parseChainId(e);\n      this.chainId = t, this.eventEmitter.emit(\"chainChanged\", this.chainId);\n    }\n  }\n  parseAccountId(e) {\n    const [t, s, r] = e.split(\":\");\n    return { chainId: `${t}:${s}`, address: r };\n  }\n  getSignerConnection(e) {\n    return new Hv({\n      requiredNamespaces: {\n        [this.namespace]: {\n          chains: this.rpc.chains,\n          methods: this.rpc.methods,\n          events: this.rpc.events\n        }\n      },\n      client: e\n    });\n  }\n  registerEventListeners() {\n    this.rpcProvider.on(\"connect\", () => {\n      const { chains: e, accounts: t } = this.signerConnection;\n      e?.length && this.setChainIds(e), t?.length && this.setAccounts(t);\n    }), this.signerConnection.on(Gt.created, this.updateSession), this.signerConnection.on(Gt.updated, this.updateSession), this.signerConnection.on(Gt.event, (e) => {\n      if (!this.rpc.chains.includes(e.chainId))\n        return;\n      const { event: t } = e;\n      t.name === \"accountsChanged\" ? (this.accounts = t.data, this.eventEmitter.emit(\"accountsChanged\", this.accounts)) : t.name === \"chainChanged\" ? this.setChainId(t.data) : this.eventEmitter.emit(t.name, t.data);\n    }), this.rpcProvider.on(\"disconnect\", () => {\n      this.eventEmitter.emit(\"disconnect\");\n    });\n  }\n}\nclass Ha extends starknet__WEBPACK_IMPORTED_MODULE_1__.Account {\n  constructor(e, t, s, r) {\n    super(e, t, s), this.wallet = r;\n  }\n  async execute(e, t = void 0, s = {}) {\n    return e = Array.isArray(e) ? e : [e], await this.wallet.starknet_requestAddInvokeTransaction({\n      accountAddress: this.address,\n      executionRequest: { calls: e, abis: t, invocationDetails: s }\n    });\n  }\n  async declare(e, t) {\n    throw new Error(\"Not supported via Argent Login\");\n  }\n  async deployAccount(e, t) {\n    throw new Error(\"Not supported via Argent Login\");\n  }\n}\nclass t_ {\n  constructor(e) {\n    this.wallet = e;\n  }\n  async getPubKey() {\n    throw new Error(\"Not supported via Argent Login\");\n  }\n  async signMessage(e, t) {\n    const { signature: s } = await this.wallet.starknet_signTypedData({\n      accountAddress: t,\n      typedData: e\n    });\n    return s;\n  }\n  async signTransaction(e, t, s) {\n    throw new Error(\"Not supported via Argent Login\");\n  }\n  async signDeployAccountTransaction(e) {\n    throw new Error(\"Not supported via Argent Login\");\n  }\n  async signDeclareTransaction(e) {\n    throw new Error(\"Not supported via Argent Login\");\n  }\n}\nconst i_ = (i) => i.replace(/^SN_/, \"SN\"), s_ = (i) => i.replace(/^SN/, \"SN_\");\nclass r_ extends e_ {\n  constructor({ client: t, chainId: s, rpcUrl: r, provider: n }) {\n    super();\n    we(this, \"id\", \"argentMobile\");\n    we(this, \"name\", \"Argent Mobile\");\n    we(this, \"version\", \"0.1.0\");\n    we(this, \"icon\", \"\");\n    we(this, \"provider\");\n    we(this, \"signer\");\n    we(this, \"account\");\n    we(this, \"selectedAddress\", \"\");\n    // NamespaceAdapter\n    we(this, \"namespace\", \"starknet\");\n    we(this, \"methods\", [\n      \"starknet_signTypedData\",\n      \"starknet_requestAddInvokeTransaction\"\n    ]);\n    we(this, \"events\", [\"chainChanged\", \"accountsChanged\"]);\n    we(this, \"remoteSigner\");\n    we(this, \"signerConnection\");\n    we(this, \"rpcProvider\");\n    we(this, \"chainId\");\n    we(this, \"client\");\n    we(this, \"session\");\n    we(this, \"rpc\");\n    we(this, \"walletRpc\");\n    we(this, \"on\", (t, s) => {\n      this.eventEmitter.on(t, s);\n    });\n    we(this, \"off\", (t, s) => {\n      this.eventEmitter.off(t, s);\n    });\n    this.chainId = String(s ?? starknet__WEBPACK_IMPORTED_MODULE_1__.constants.NetworkName.SN_MAIN), this.rpc = {\n      chains: s ? [this.formatChainId(this.chainId)] : [],\n      methods: this.methods,\n      events: this.events\n    }, this.signerConnection = this.getSignerConnection(t), this.rpcProvider = new _n(this.signerConnection), this.client = t, this.registerEventListeners(), this.walletRpc = new Proxy({}, {\n      get: (o, c) => (u) => this.requestWallet({ method: c, params: u })\n    }), this.remoteSigner = new t_(this.walletRpc), this.provider = n || new starknet__WEBPACK_IMPORTED_MODULE_1__.RpcProvider({ nodeUrl: r }), this.account = new Ha(\n      this.provider,\n      \"\",\n      this.remoteSigner,\n      this.walletRpc\n    );\n  }\n  getNetworkName(t) {\n    if (t === \"SN_GOERLI\")\n      return starknet__WEBPACK_IMPORTED_MODULE_1__.constants.NetworkName.SN_GOERLI;\n    if (t === \"SN_MAIN\")\n      return starknet__WEBPACK_IMPORTED_MODULE_1__.constants.NetworkName.SN_MAIN;\n    throw new Error(`Unknown starknet.js network name for chainId ${t}`);\n  }\n  // StarknetWindowObject\n  async request(t) {\n    throw new Error(\"Not implemented: .request()\");\n  }\n  async enable() {\n    return await this.rpcProvider.connect(), this.accounts;\n  }\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  get isConnected() {\n    return !0;\n  }\n  async isPreauthorized() {\n    return !!this.client.session.getAll().find(this.isValidSession);\n  }\n  async requestWallet(t) {\n    if (!this.session)\n      throw new Error(\"No session\");\n    try {\n      const { topic: s } = this.session, r = this.formatChainId(this.chainId);\n      kt.showApprovalModal(t);\n      const n = await this.client.request({ topic: s, chainId: r, request: t });\n      return kt.closeModal(\"animateSuccess\"), n;\n    } catch (s) {\n      throw kt.closeModal(), s instanceof Error ? new Error(s.message) : new Error(\"Unknow error on requestWallet\");\n    }\n  }\n  // NamespaceAdapter\n  get isConnecting() {\n    return this.signerConnection.connecting;\n  }\n  async disable() {\n    await this.rpcProvider.disconnect();\n  }\n  get isWalletConnect() {\n    return !0;\n  }\n  // NamespaceAdapter private methods\n  registerEventListeners() {\n    super.registerEventListeners(), this.eventEmitter.on(\"chainChanged\", (t) => {\n      throw new Error(\"Not implemented: chainChanged\");\n    });\n  }\n  formatChainId(t) {\n    return `${this.namespace}:${i_(t)}`;\n  }\n  parseChainId(t) {\n    return s_(t.split(\":\")[1]);\n  }\n  setAccounts(t) {\n    this.accounts = t.filter(\n      (n) => this.parseChainId(this.parseAccountId(n).chainId) === this.chainId\n    ).map((n) => this.parseAccountId(n).address);\n    const { address: s } = this.parseAccountId(t[0]), r = s.startsWith(\"0x\") ? s : `0x${s}`;\n    this.account = new Ha(\n      this.provider,\n      r,\n      this.remoteSigner,\n      this.walletRpc\n    ), this.eventEmitter.emit(\"accountsChanged\", this.accounts), this.selectedAddress = r;\n  }\n}\nconst Y_ = async (i) => Pm(i, r_);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/starknetkit/dist/index-8e228000.js\n"));

/***/ })

}]);
msgid ""
msgstr ""
"Project-Id-Version: The Starknet Book\n"
"POT-Creation-Date: \n"
"PO-Revision-Date: 2023-10-26 09:12+0100\n"
"Last-Translator: dami <pinonesdamian@gmail.com>\n"
"Language-Team: Spanish <es@tp.org.es>\n"
"Language: es\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Generator: Poedit 3.4\n"

#: src/SUMMARY.md:1
msgid "The Starknet Book"
msgstr "El Libro de Starknet"

#: src/SUMMARY.md:4
msgid "Introduction"
msgstr "Introducción"

#: src/SUMMARY.md:8
msgid "Getting Started"
msgstr "Primeros pasos"

#: src/SUMMARY.md:10
msgid "Tooling"
msgstr "Herramientas"

#: src/SUMMARY.md:13
msgid "Basic Installation"
msgstr "Instalación básica"

#: src/SUMMARY.md:14
msgid "Compile, Deploy, Interact"
msgstr "Compilar, Desplegar, Interactuar"

#: src/SUMMARY.md:15
msgid "Scarb: The Package Manager"
msgstr "Scarb: El Gestor de Paquetes"

#: src/SUMMARY.md:16
msgid "Starkli: A CLI interface 🚧"
msgstr "Starkli: Una interfaz CLI 🚧"

#: src/SUMMARY.md:17
msgid "Katana: A Local Node"
msgstr "Katana: Un Nodo Local"

#: src/SUMMARY.md:18
msgid "Starknet Devnet 🚧"
msgstr "Starknet Devnet 🚧"

#: src/SUMMARY.md:19
msgid "Starknet-js: Javascript SDK"
msgstr "Starknet-js: Javascript SDK"

#: src/SUMMARY.md:20 src/SUMMARY.md:24 src/SUMMARY.md:51
msgid "Examples"
msgstr "Ejemplos"

#: src/SUMMARY.md:21
msgid "Beginner - Counter UI"
msgstr "Principiante - Counter UI"

#: src/SUMMARY.md:22 src/SUMMARY.md:25
msgid "Beginner - ERC-20 UI"
msgstr "Principiante - ERC-20 UI"

#: src/SUMMARY.md:23
msgid "Starknet-React: React Integration"
msgstr "Starknet-React: Integración de React"

#: src/SUMMARY.md:26
msgid "Intermediate - Million Dollar Homepage"
msgstr "Intermedio - Página de inicio de Million Dollar"

#: src/SUMMARY.md:27
msgid "Starknet-py: Python SDK 🚧"
msgstr "Starknet-py: Python SDK 🚧"

#: src/SUMMARY.md:28
msgid "Starknet-rs: Rust SDK 🚧"
msgstr "Starknet-py: Python SDK 🚧"

#: src/SUMMARY.md:29
msgid "Foundry Cast: Interacting with Starknet"
msgstr "Foundry Cast: Interactuando con Starknet"

#: src/SUMMARY.md:30
msgid "Example - Deployment Script"
msgstr "Ejemplo - Script de Implantación"

#: src/SUMMARY.md:31
msgid "Foundry Forge: Testing"
msgstr "Foundry Forge: Testing"

#: src/SUMMARY.md:33
msgid "Architecture"
msgstr "Arquitectura"

#: src/SUMMARY.md:36
msgid "Transactions"
msgstr "Transacciones"

#: src/SUMMARY.md:37
msgid "Fee Mechanism"
msgstr "Mecanismo de Fee"

#: src/SUMMARY.md:38
msgid "Sequencers"
msgstr "Secuenciadores"

#: src/SUMMARY.md:39
msgid "Provers 🚧"
msgstr "Provers🚧"

#: src/SUMMARY.md:40
msgid "Nodes 🚧"
msgstr "Nodos 🚧"

#: src/SUMMARY.md:41
msgid "Layer 3 and App Chains 🚧 "
msgstr "Layer 3 y App Chains 🚧 "

#: src/SUMMARY.md:42
msgid "Solidity Verifier 🚧"
msgstr "Solidity Verifier 🚧"

#: src/SUMMARY.md:43
msgid "Decentralization 🚧"
msgstr "Descentralización 🚧"

#: src/SUMMARY.md:45
msgid "Account Abstraction"
msgstr "Abstracción de Cuenta"

#: src/SUMMARY.md:48
msgid "Accounts"
msgstr "Cuentas"

#: src/SUMMARY.md:49
msgid "Hello, Account! 🚧"
msgstr "¡Hola Cuenta! 🚧"

#: src/SUMMARY.md:50
msgid "Standard AccounT 🚧"
msgstr "Cuenta Estándar 🚧"

#: src/SUMMARY.md:52
msgid "Multicaller 🚧"
msgstr "Multicaller 🚧"

#: src/SUMMARY.md:53
msgid "Multisig 🚧"
msgstr "Multisig 🚧"

#: src/SUMMARY.md:54
msgid "Auto-Payments 🚧"
msgstr "Auto-Payments 🚧"

#: src/SUMMARY.md:55
msgid "Alternative Signature Schemes 🚧"
msgstr "Esquemas de Firma Alternativos 🚧"

#: src/SUMMARY.md:59
msgid "STARKs 🚧"
msgstr "STARKs 🚧"

#: src/SUMMARY.md:60
msgid "Basics 🚧"
msgstr "Básicos 🚧"

#: src/SUMMARY.md:61
msgid "Math Primer 🚧"
msgstr "Manual de Matemáticas 🚧"

#: src/SUMMARY.md:62
msgid "Number Theory 🚧"
msgstr "Teoría de Números 🚧"

#: src/SUMMARY.md:63
msgid "Geometry 🚧"
msgstr "Geometría 🚧"

#: src/SUMMARY.md:64
msgid "Cryptographic Primitives 🚧"
msgstr "Primitivas Criptográficas 🚧"

#: src/SUMMARY.md:65
msgid "Arithimization 🚧"
msgstr "Aritimización 🚧"

#: src/SUMMARY.md:66
msgid "Low Degree Testing 🚧"
msgstr "Pruebas de Bajo Grado 🚧"

#: src/SUMMARY.md:67
msgid "FRI Protocol 🚧"
msgstr "FRI  🚧"

#: src/SUMMARY.md:68
msgid "Efficient STARKs"
msgstr "STARK Eficientes"

#: src/SUMMARY.md:69
msgid "STARKs Protocol (Python) 🚧"
msgstr "Protocolo STARK (Python) 🚧"

#: src/SUMMARY.md:70 src/SUMMARY.md:75
msgid "Trace/Low Degree Extension 🚧"
msgstr "Traza/Extensión de Bajo Grado 🚧"

#: src/SUMMARY.md:71 src/SUMMARY.md:76
msgid "Constraints 🚧"
msgstr "Restricciones 🚧"

#: src/SUMMARY.md:72 src/SUMMARY.md:77
msgid "FRI Commitments 🚧"
msgstr "Compromisos de FRI 🚧"

#: src/SUMMARY.md:73 src/SUMMARY.md:78
msgid "Query Phase 🚧"
msgstr "Fase de Consulta 🚧"

#: src/SUMMARY.md:74
msgid "STARKs Protocol (Rust) 🚧"
msgstr "Protocolo STARK (Rust) 🚧"

#: src/title-page.md:1
msgid "# The Starknet Book"
msgstr "# El Libro de Starknet"

#: src/title-page.md:3
msgid ""
"The Starknet Book is a work in progress, shaped by ongoing community\n"
"input. Some sections may be incomplete or still under review and are\n"
"marked under a 🚧 emoji. We welcome your suggestions, feedback, and\n"
"content contributions to make this book a reliable guide for everyone."
msgstr ""
"El Libro de Starknet es un trabajo en progreso, moldeado por los aportes\n"
"continuos de la comunidad. Algunas secciones pueden estar incompletas o aún bajo revisión y son\n"
"marcado debajo de un emoji 🚧. Agradecemos sus sugerencias, comentarios y\n"
"contribuciones de contenido para hacer de este libro una guía confiable para todos."

#: src/title-page.md:8
msgid ""
"The Starknet Book is a step-by-step guide aimed at teaching you the\n"
"essentials of Starknet development. It’s a community effort, with each\n"
"chapter guiding you through the Starknet ecosystem."
msgstr ""
"El Libro de Starknet es una guía paso a paso destinada a enseñarle los\n"
"Conceptos básicos del desarrollo de Starknet. Es un esfuerzo comunitario, en el que cada\n"
"capítulo lo guiará a través del ecosistema Starknet."

#: src/title-page.md:12
msgid ""
"Understanding Cairo, the key programming language for Starknet smart\n"
"contracts, is crucial. That’s why this book works hand-in-hand with the\n"
"Cairo Book, another community resource. You can access the Cairo Book\n"
"[**here**](https://book.cairo-lang.org/)."
msgstr ""
"Entendiendo Cairo, el lenguaje de programación clave para Smart Contract en\n"
"Starknet, es crucial. Es por eso que este libro trabaja de la mano con el\n"
"Libro de Cairo, otro recurso comunitario. Puedes acceder al Libro Cairo\n"
"[**aquí**](https://book.cairo-lang.org/)."

#: src/title-page.md:17
msgid ""
"In short, the Cairo Book helps you master Cairo, while The Starknet Book\n"
"focuses on Starknet’s specific features. For a well-rounded\n"
"understanding, we recommend exploring both. This book will introduce you\n"
"to tools, architecture, account setups, STARKs, and Starknet-specific\n"
"apps."
msgstr ""
"En resumen, el Libro de Cairo te ayuda a dominar Cairo, mientras que El Libro de Starknet\n"
"se centra en las características específicas de Starknet. Para una completa\n"
"comprensión, recomendamos explorar ambos. Este libro te presentará\n"
"herramientas, arquitectura, configuraciones de cuentas, STARK y aplicaciones específicas\n"
"de Starknet."

#: src/title-page.md:23
msgid "## Table of Contents"
msgstr "## Tabla de Contenido"

#: src/title-page.md:25
msgid "**Chapter Titles**"
msgstr "**Títulos de los Capítulos**"

#: src/title-page.md:27
msgid ""
"| Chapter                  | "
"Description                                                                                                                                                                   "
"|\n"
"| ------------------------ | "
"----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- "
"|\n"
"| 1: Starknet Introduction | Delve into the fundamental concepts of Starknet and acquaint yourself with the deployment of smart "
"contracts.                                                                 |\n"
"| 2: Starknet Tooling      | Familiarize yourself with vital tools, such as Protostar and Hardhat, and explore how languages like Javascript, Python, and Rust can be "
"leveraged for Starknet interactions. |\n"
"| 3: Starknet Architecture | Uncover Starknet’s core structure, gaining insights into the transaction lifecycle and the interplay between the Sequencer, Prover, and "
"Nodes.                                |\n"
"| 4: Account Abstraction   | Delve deep into Starknet’s unique approach to user accounts, and master the art of crafting custom "
"accounts.                                                                  |\n"
"| 5: STARKs                | Dive into the intricacies of STARKs and their pivotal role in shaping Starknet’s "
"landscape.                                                                                   |"
msgstr ""
"| Capítulo | Descripción |\n"
"| ------------------------ | -------------------------------------------------- -------------------------------------------------- "
"-------------------------------------------------- ----------------------- |\n"
"| 1: Introducción a Starknet | Profundice en los conceptos fundamentales de Starknet y familiarícese con el despliegue de contratos inteligentes. |\n"
"| 2: Herramientas Starknet | Familiarícese con herramientas vitales, como Protostar y Hardhat, y explore cómo se pueden aprovechar lenguajes como Javascript, Python y Rust "
"para las interacciones con Starknet. |\n"
"| 3: Arquitectura Starknet | Descubra la estructura central de Starknet y obtenga información sobre el ciclo de vida de las transacciones y la interacción entre el "
"Secuenciador, el Prover y los nodos. |\n"
"| 4: Abstracción de cuenta | Profundice en el enfoque único de Starknet para las cuentas de usuario y domine el arte de crear cuentas personalizadas. |\n"
"| 5: STARK | Sumérgete en las complejidades de los STARK y su papel fundamental en la configuración del panorama de Starknet. |"

#: src/title-page.md:35
msgid "# Where to Start?"
msgstr "# ¿Donde Empezar?"

#: src/title-page.md:37
msgid ""
"Depending on your goals and interests, you can choose different paths\n"
"through the Starknet Book. Here are some recommendations based on\n"
"various objectives:"
msgstr ""
"Dependiendo de tus objetivos e intereses, puedes elegir diferentes caminos\n"
"a través del Libro de Starknet. A continuación se presentan algunas recomendaciones basadas en\n"
"varios objetivos:"

#: src/title-page.md:41
msgid ""
"- If you’re a **complete beginner** and want to start learning about\n"
"  Cairo and Starknet from scratch, follow the book in its entirety,\n"
"  starting with **Introduction to Starknet**.\n"
"\n"
"- If you’re an **experienced developer** looking to quickly dive into\n"
"  writing scalable and decentralized smart contracts, focus on the\n"
"  Cairo Book, particularly **chapter 12: Starknet Smart Contracts**\n"
"  ([link](https://book.cairo-lang.org/ch99-00-starknet-smart-contracts.html)).\n"
"\n"
"- If you’re a **frontend developer** wanting to integrate Starknet\n"
"  with a React frontend using Javascript, prioritize the\n"
"  **starknet-js** and **starknet-react** subchapters in **Starknet\n"
"  Tooling**\n"
"\n"
"- If you’re a **DevOps engineer** or **node operator** interested in\n"
"  running a Starknet node and indexer, head straight to **Starknet\n"
"  Architecture**.\n"
"\n"
"- If you’re a **security researcher** or **smart contract auditor**\n"
"  wanting to learn about the Account Abstraction feature and its\n"
"  implications, go for **Account Abstraction**.\n"
"\n"
"- If you’re a **blockchain enthusiast** curious about the underlying\n"
"  architecture and mechanics of Starknet and Cairo, explore **Starknet\n"
"  Architecture**.\n"
"\n"
"- If you’re a **cryptography expert** or **researcher** eager to\n"
"  understand the fundamentals of STARKs and their connection to the\n"
"  Starknet ecosystem, delve into **STARKs**."
msgstr ""
"- Si eres un **completo principiante** y quieres comenzar a aprender sobre\n"
"   Cairo y Starknet desde cero, sigue el libro en su totalidad,\n"
"   comenzando con **Introducción a Starknet**.\n"
"\n"
"- Si eres un **desarrollador experimentado** y buscas sumergirte rápidamente en\n"
"   escribir contratos inteligentes escalables y descentralizados, centrarse en el\n"
"   Libro de Cairo, en particular **capítulo 12: Contratos inteligentes de Starknet**\n"
"   ([enlace](https://book.cairo-lang.org/ch99-00-starknet-smart-contracts.html)).\n"
"\n"
"- Si eres un **desarrollador frontend** que desea integrar Starknet\n"
"   con una interfaz React usando Javascript, priorice la\n"
"   **starknet-js** y **starknet-react** subcapítulos en **Starknet\n"
"   Tooling**\n"
"\n"
"- Si es un **ingeniero de DevOps** o un **operador de nodo** interesado en\n"
"   ejecutando un nodo Starknet y un indexador, diríjase directamente a **Starknet\n"
"   Arquitectura**.\n"
"\n"
"- Si es un **investigador de seguridad** o un **auditor de contratos inteligentes**\n"
"   querer aprender sobre la función de Abstracción de Cuenta y sus\n"
"   implicaciones, opte por **Abstracción de cuenta**.\n"
"\n"
"- Si eres un **entusiasta de blockchain** y tienes curiosidad sobre lo subyacente\n"
"   arquitectura y mecánica de Starknet y Cairo, explora **Starknet\n"
"   Arquitectura**.\n"
"\n"
"- Si eres un **experto en criptografía** o un **investigador** deseoso de\n"
"   comprender los fundamentos de STARK y su conexión con el\n"
"   Ecosistema Starknet, profundiza en **STARKs**."

#: src/title-page.md:71
msgid ""
"Feel free to mix and match these paths based on your unique interests\n"
"and requirements."
msgstr ""
"Siéntete libre de mezclar y combinar estos caminos según tus intereses únicos\n"
"y requisitos."

#: src/title-page.md:74
msgid "# Your Contributions Matter"
msgstr "# Tus Contribuciones Importan"

#: src/title-page.md:76
msgid ""
"Welcome aboard! By contributing to the Starknet Book, you’re doing more\n"
"than sharing expertise—you’re shaping the future of decentralized tech.\n"
"Let’s build a guide that helps developers unlock Starknet’s potential."
msgstr ""
"¡Bienvenido a bordo! Al contribuir al Libro de Starknet, estás haciendo más\n"
"que compartir experiencia, estás dando forma al futuro de la tecnología descentralizada.\n"
"Creemos una guía que ayude a los desarrolladores a desbloquear el potencial de Starknet."

#: src/title-page.md:80
msgid ""
"For detailed contribution guidelines, visit the [Contributors\n"
"Guide](https://github.com/starknet-edu/starknetbook/blob/main/CONTRIBUTING.adoc).\n"
"Every contribution counts. Your skills and passion will help make this\n"
"book an invaluable tool."
msgstr ""
"Para obtener pautas de contribución detalladas, visite [Contributors\n"
"Guía](https://github.com/starknet-edu/starknetbook/blob/main/CONTRIBUTING.adoc).\n"
"Cada contribución cuenta. Tus habilidades y pasión te ayudarán a lograrlo.\n"
"Reserve una herramienta invaluable."

#: src/title-page.md:85
msgid "## How You Can Help"
msgstr "## Cómo Puedes Ayudar"

#: src/title-page.md:87
msgid ""
"- Found an empty section? Fill it in!\n"
"\n"
"- Think we need a new section? Suggest one.\n"
"\n"
"- See room for improvement? Go ahead and tweak it.\n"
"\n"
"- Want to add code in a new programming language? Go for it.\n"
"\n"
"- Found a bug? Fix it.\n"
"\n"
"- Exercises unclear? Add explanations.\n"
"\n"
"- Show off your favorite Cairo features through new exercises."
msgstr ""
"- ¿Encontraste una sección vacía? ¡Rellenalo!\n"
"\n"
"- ¿Crees que necesitamos una nueva sección? Sugiere uno.\n"
"\n"
"- ¿Ves margen de mejora? Continúe y modifíquelo.\n"
"\n"
"- ¿Quieres agregar código en un nuevo lenguaje de programación? A por ello.\n"
"\n"
"- ¿Encontraste un error? Arreglalo.\n"
"\n"
"- ¿Los ejercicios no están claros? Añade explicaciones.\n"
"\n"
"- Muestra tus características favoritas de Cairo a través de nuevos ejercicios."

#: src/title-page.md:101
msgid "# Additional Key Educational Resources"
msgstr "# Recursos Educativos Clave Adicionales"

#: src/title-page.md:103
msgid ""
"We’ve compiled a list of valuable educational resources that will help\n"
"deepen your understanding and enhance your skills in coding with Cairo\n"
"and staying abreast with Starknet developments:"
msgstr ""
"Hemos compilado una lista de valiosos recursos educativos que le ayudarán\n"
"profundice su comprensión y mejore sus habilidades en codificación con Cairo\n"
"y mantenerse al tanto de los desarrollos de Starknet:"

#: src/title-page.md:107
msgid ""
"1.  **Cairo Book**: A comprehensive guide to Cairo, the programming\n"
"    language for Starknet smart contracts. You can access it\n"
"    [here](https://book.cairo-lang.org/).\n"
"\n"
"2.  **Starklings**: A resource specifically designed to guide you\n"
"    through learning Cairo programming, ensuring that you reach a\n"
"    proficient level. You can access it\n"
"    [here](https://github.com/shramee/starklings-cairo1).\n"
"\n"
"3.  **Starknet Community Forum**: An online platform where you can\n"
"    engage in discussions about the latest developments in Starknet.\n"
"    Join the conversation [here](https://community.starknet.io/).\n"
"\n"
"4.  **Starknet Documentation**: You can browse through the documentation\n"
"    [here](https://docs.starknet.io/).\n"
"\n"
"5.  **Cairo Documentation**: Explore it\n"
"    [here](https://www.cairo-lang.org/docs).\n"
"\n"
"6.  **Starknet Developer Telegram (English)**: A community for\n"
"    English-speaking Starknet developers. This is a great platform for\n"
"    networking, sharing ideas, and troubleshooting together. Join us on\n"
"    Telegram [here](https://t.me/starknetna)."
msgstr ""
"1. **Libro de El Cairo**: Una guía completa de Cairo, la programación\n"
"     lenguaje para contratos inteligentes de Starknet. Puedes acceder a él\n"
"     [aquí](https://book.cairo-lang.org/).\n"
"\n"
"2. **Starklings**: un recurso diseñado específicamente para guiarte\n"
"     a través del aprendizaje de la programación de Cairo, asegurándose de que alcance un\n"
"     nivel competente. Puedes acceder a él\n"
"     [aquí](https://github.com/shramee/starklings-cairo1).\n"
"\n"
"3. **Foro de la comunidad Starknet**: una plataforma en línea donde puedes\n"
"     participar en debates sobre los últimos desarrollos en Starknet.\n"
"     Únase a la conversación [aquí](https://community.starknet.io/).\n"
"\n"
"4. **Documentación de Starknet**: Puedes navegar a través de la documentación\n"
"     [aquí](https://docs.starknet.io/).\n"
"\n"
"5. **Documentación de Cairo**: explórela\n"
"     [aquí](https://www.cairo-lang.org/docs).\n"
"\n"
"6. **Starknet Developer Telegram (inglés)**: Una comunidad para\n"
"     Desarrolladores Starknet de habla inglesa. Esta es una gran plataforma para\n"
"     establecer contactos, compartir ideas y solucionar problemas juntos. Únete a nosotros\n"
"     Telegram [aquí](https://t.me/starknetna)."

#: src/ch00-00-introduction.md:1
msgid "# The Starknet Network"
msgstr "# La Red de Starknet"

#: src/ch00-00-introduction.md:3
msgid "## Preamble"
msgstr "## Preámbulo"

#: src/ch00-00-introduction.md:5
msgid ""
"Historically, societal roles like currency, property rights, and social status titles have been governed by _protocols_ and _registries_. Their value stems from a widely "
"accepted understanding of their integrity. These functions have predominantly been overseen by centralized entities prone to challenges such as corruption, agency conflicts, "
"and exclusion ([Eli Ben-Sasson, Bareli, Brandt, Volokh, 2023](https://hackmd.io/@Elibensasson/ryMelVulp))."
msgstr ""
"Históricamente, los roles sociales como la moneda, los derechos de propiedad y los títulos de estatus social han estado gobernados por protocolos y registros. Su valor surge "
"de una comprensión ampliamente aceptada de su integridad. Estas funciones han sido supervisadas predominantemente por entidades centralizadas propensas a desafíos como la "
"corrupción, los conflictos de agencia y la exclusión ([Eli Ben-Sasson, Bareli, Brandt, Volokh, 2023](https://hackmd.io/@Elibensasson/ryMelVulp) )."

#: src/ch00-00-introduction.md:7
msgid "Satoshi's creation, Bitcoin, introduced a novel approach for these functions, termed an _integrity web_. This is an infrastructure for societal roles that:"
msgstr ""
"La creación de Satoshi, Bitcoin, introdujo un enfoque novedoso para estas funciones, denominado _red de integridad_. Se trata de una infraestructura para roles sociales que:"

#: src/ch00-00-introduction.md:9
msgid ""
"1. Is openly described by a public protocol.\n"
"2. Operates over a wide, inclusive, peer-to-peer network.\n"
"3. Distributes value fairly and extensively to maintain societal consensus on its integrity."
msgstr ""
"1. Está descrito abiertamente por un protocolo público.\n"
"2. Opera a través de una red peer-to-peer amplia e inclusiva.\n"
"3. Distribuye valor de manera justa y amplia para mantener el consenso social sobre su integridad."

#: src/ch00-00-introduction.md:13
msgid ""
"While Bitcoin addressed monetary functions, Ethereum expanded this to include any function that can be defined by computer programming. Both faced the challenge of balancing "
"scalability with decentralization. These integrity webs have often favored inclusivity over capacity, ensuring even those with limited resources can authenticate the "
"system's integrity. Yet, this means they struggle to meet global demand."
msgstr ""
"Mientras que Bitcoin abordó las funciones monetarias, Ethereum amplió esto para incluir cualquier función que pueda definirse mediante programación informática. Ambos "
"enfrentaron el desafío de equilibrar la escalabilidad con la descentralización. Estas redes de integridad a menudo han favorecido la inclusión sobre la capacidad, asegurando "
"que incluso aquellos con recursos limitados puedan autenticar la integridad del sistema. Sin embargo, esto significa que tienen dificultades para satisfacer la demanda "
"global."

#: src/ch00-00-introduction.md:15
msgid "## Defining \"Blockchain\""
msgstr "## Definición de \"Blockchain"

#: src/ch00-00-introduction.md:17
msgid ""
"In the ever-evolving realm of technology, defining a term as multifaceted as \"Blockchain\" can be challenging. Based on current understandings and applications, a "
"Blockchain can be characterized by the following three properties ([Eli Ben-Sasson, 2023](https://twitter.com/EliBenSasson/status/1709272086504485265)):"
msgstr ""
"En el siempre cambiante ámbito de la tecnología, definir un término tan polifacético como \"Blockchain\" puede resultar complicado. Según los conocimientos y aplicaciones "
"actuales, una Blockchain puede caracterizarse por las tres propiedades siguientes ([Eli Ben-Sasson, 2023](https://twitter.com/EliBenSasson/status/1709272086504485265)):"

#: src/ch00-00-introduction.md:19
msgid ""
"1. **Public Protocol:** The foundation of a Blockchain rests upon a protocol that is openly available. This transparency ensures that any interested party can understand its "
"workings, fostering trust and enabling wider adoption.\n"
"2. **Open P2P Network:** Instead of relying on a centralized entity, a Blockchain operates over a peer-to-peer (P2P) network. This decentralized approach ensures that "
"operations are distributed across various participants or nodes, making the system more resilient to failures and censorship.\n"
"3. **Value Distribution:** Central to the Blockchain's operation is the way it rewards its operators. The system autonomously distributes value in a manner that is wide-"
"ranging and equitable. This incentivization not only motivates participants to maintain the system's integrity but also ensures a broader societal consensus."
msgstr ""
"1. **Protocolo público:** La base de una Blockchain es un protocolo que está disponible abiertamente. Esta transparencia garantiza que cualquier parte interesada pueda "
"entender su funcionamiento, fomentando la confianza y permitiendo una adopción más amplia.\n"
"2. **Red abierta P2P:** En lugar de depender de una entidad centralizada, una Blockchain funciona a través de una red entre pares (P2P). Este enfoque descentralizado "
"garantiza que las operaciones se distribuyan entre varios participantes o nodos, lo que hace que el sistema sea más resistente a los fallos y la censura.\n"
"3. **Distribución de valor:** Un aspecto central del funcionamiento de la Blockchain es la forma en que recompensa a sus operadores. El sistema distribuye valor de forma "
"autónoma, amplia y equitativa. Esta incentivación no sólo motiva a los participantes a mantener la integridad del sistema, sino que también garantiza un consenso social más "
"amplio."

#: src/ch00-00-introduction.md:23
msgid ""
"While these properties capture the essence of many Blockchains, the term's definition might need refinement as the technology matures and finds new applications. Engaging in "
"continuous dialogue and revisiting definitions will be crucial in this dynamic landscape."
msgstr ""
"Aunque estas propiedades captan la esencia de muchas Blockchains, la definición del término podría necesitar refinamiento a medida que la tecnología madura y encuentra "
"nuevas aplicaciones. En este panorama dinámico, será crucial entablar un diálogo continuo y revisar las definiciones."

#: src/ch00-00-introduction.md:25
msgid "## Starknet Definition"
msgstr "## Definición de Starknet"

#: src/ch00-00-introduction.md:27
msgid ""
"Starknet is a Layer-2 network that makes Ethereum transactions faster, cheaper, and more secure using zk-STARKs technology. Think of it as a boosted layer on top of "
"Ethereum, optimized for speed and cost."
msgstr ""
"Starknet es una red de capa 2 que hace que las transacciones de Ethereum sean más rápidas, baratas y seguras utilizando la tecnología de zk-STARK. Piense en ella como una "
"capa reforzada sobre Ethereum, optimizada para la velocidad y el coste."

#: src/ch00-00-introduction.md:29
msgid ""
"Starknet bridges the gap between scalability and broad consensus. It integrates a mathematical framework to navigate the balance between capacity and inclusivity. Its "
"integrity hinges on the robustness of succinct, transparent proofs of computational integrity. This method lets powerful operators enhance Starknet's capacity, ensuring "
"everyone can authenticate Starknet's integrity using universally accessible tools ([Eli Ben-Sasson, Bareli, Brandt, Volokh, 2023](https://hackmd.io/@Elibensasson/ryMelVulp))."
msgstr ""
"Starknet tiende un puente entre la escalabilidad y el amplio consenso. Integra un marco matemático para navegar por el equilibrio entre capacidad e inclusividad. Su "
"integridad depende de la solidez de las pruebas sucintas y transparentes de integridad computacional. Este método permite a los operadores potentes mejorar la capacidad de "
"Starknet, garantizando que todo el mundo pueda autenticar la integridad de Starknet utilizando herramientas universalmente accesibles ([Eli Ben-Sasson, Bareli, Brandt, "
"Volokh, 2023](https://hackmd.io/@Elibensasson/ryMelVulp))."

#: src/ch00-00-introduction.md:31
msgid "## Starknet’s Mission"
msgstr "## Misión de Starknet"

#: src/ch00-00-introduction.md:33
msgid "_Starknet’s mission is to allow individuals to freely implement and use any social function they desire._"
msgstr "_La misión de Starknet es permitir a los individuos implantar y utilizar libremente cualquier función social que deseen._"

#: src/ch00-00-introduction.md:35
msgid "## Starknet’s Values"
msgstr "## Valores de Starknet"

#: src/ch00-00-introduction.md:37
msgid "Starknet's ethos is anchored in core principles ([Eli Ben-Sasson, Bareli, Brandt, Volokh, 2023](https://hackmd.io/@Elibensasson/ryMelVulp)):"
msgstr "La ética de Starknet se basa en principios fundamentales ([Eli Ben-Sasson, Bareli, Brandt, Volokh, 2023](https://hackmd.io/@Elibensasson/ryMelVulp)):"

#: src/ch00-00-introduction.md:39
msgid ""
"- **Lasting Broadness.** Starknet continuously resists power consolidation. Key points include:\n"
"\n"
"  - Broad power distribution underpins Starknet's legitimacy and must persist across operations and decision-making. While centralized operation may be necessary at times, "
"it should be short-lived.\n"
"  - Starknet's protocol and governance should always be open and transparent.\n"
"  - Governance should bolster inclusivity, with a flexible structure that can evolve to ensure enduring inclusivity.\n"
"\n"
"- **Neutrality.** Starknet remains impartial to the societal functions it supports.\n"
"\n"
"  - The objectives and ethos of functions on Starknet lie with their creators.\n"
"  - **Censorship resistance:** Starknet remains agnostic to the nature and meaning of user transactions.\n"
"\n"
"- **Individual Empowerment.** At its core, Starknet thrives on a well-informed and autonomous user base. This is achieved by fostering a culture rooted in its core mission "
"and values, with a strong emphasis on education."
msgstr ""
"- **Amplitud duradera.** Starknet se resiste continuamente a la consolidación de poder. Los puntos clave incluyen:\n"
"\n"
"   - La amplia distribución del poder sustenta la legitimidad de Starknet y debe persistir en todas las operaciones y toma de decisiones. Si bien en ocasiones puede ser "
"necesario el funcionamiento centralizado, debería ser de corta duración.\n"
"   - El protocolo y la gobernanza de Starknet siempre deben ser abiertos y transparentes.\n"
"   - La gobernanza debería reforzar la inclusión, con una estructura flexible que pueda evolucionar para garantizar una inclusión duradera.\n"
"\n"
"- **Neutralidad.** Starknet se mantiene imparcial con respecto a las funciones sociales que apoya.\n"
"\n"
"   - Los objetivos y el espíritu de las funciones de Starknet recaen en sus creadores.\n"
"   - **Resistencia a la censura:** Starknet permanece agnóstico respecto de la naturaleza y el significado de las transacciones de los usuarios.\n"
"\n"
"- **Empoderamiento individual.** En esencia, Starknet prospera con una base de usuarios autónomos y bien informados. Esto se logra fomentando una cultura arraigada en su "
"misión y valores fundamentales, con un fuerte énfasis en la educación."

#: src/ch00-00-introduction.md:52
msgid "## Key Features"
msgstr "## Características Clave"

#: src/ch00-00-introduction.md:54
msgid "These are some key features of Starknet:"
msgstr "Estas son algunas de las características clave de Starknet:"

#: src/ch00-00-introduction.md:56
msgid ""
"- Low Costs: Transactions on Starknet cost less than on Ethereum.\n"
"  Future updates like Volition and EIP 4844 will make it even cheaper.\n"
"\n"
"- Developer-Friendly: Starknet lets developers easily build\n"
"  decentralized apps using its native language, Cairo.\n"
"\n"
"- Speed and Efficiency: Upcoming releases aim to make transactions\n"
"  even faster and cheaper.\n"
"\n"
"- CVM: Thanks to Cairo, Starknet runs on it´s own VM, called Cairo VM\n"
"  (CVM), that allow us to innovate beyond the Ethereum Virtual Machine\n"
"  (EVM) and create a new paradigm for decentralized applications."
msgstr ""
"- **Bajos costos:** Las transacciones en Starknet cuestan menos que en Ethereum.\n"
"   Actualizaciones futuras como Volition y EIP 4844 lo harán aún más económico.\n"
"\n"
"- **Fácil de usar para desarrolladores:** Starknet permite a los desarrolladores crear fácilmente\n"
"   aplicaciones descentralizadas que utilizan su idioma nativo, El Cairo.\n"
"\n"
"- **Velocidad y eficiencia:** Los próximos lanzamientos tienen como objetivo realizar transacciones\n"
"   incluso más rápido y más barato.\n"
"\n"
"- **CVM:** Gracias a Cairo, Starknet se ejecuta en su propia VM, llamada Cairo VM\n"
"   (CVM), que nos permiten innovar más allá de la Máquina Virtual Ethereum\n"
"   (EVM) y crear un nuevo paradigma para aplicaciones descentralizadas."

#: src/ch00-00-introduction.md:69
msgid "Here some of them:"
msgstr "Aquí algunas de ellas:"

#: src/ch00-00-introduction.md:71
msgid ""
"- Account Abstraction: Implemented at the protocol level, this\n"
"  facilitates diverse signing schemes while ensuring user security and\n"
"  self-custody of assets.\n"
"\n"
"- Volition: Will be implemented on testnet during Q4 2023 will allow\n"
"  developers to regulate data availability on Ethereum (L1) or on\n"
"  Starknet (L2). Reducing L1 onchain data can radically reduce costs.\n"
"\n"
"- Paymaster: StarkNet will allow users to choose how to pay for\n"
"  transaction fee, follows the guidelines laid out in EIP 4337 and\n"
"  allows the transaction to specify a specific contract, a\n"
"  **Paymaster**, to pay for their transaction. Supports gasless\n"
"  transactions, enhancing user accessibility."
msgstr ""
"- **Abstracción de Cuenta:** Implementado a nivel de protocolo, esto\n"
"   facilita diversos esquemas de firma al tiempo que garantiza la seguridad del usuario y\n"
"   autocustodia de bienes.\n"
"\n"
"- **Volition:** Se implementará en testnet durante el cuarto trimestre de 2023 y permitirá\n"
"   desarrolladores para regular la disponibilidad de datos en Ethereum (L1) o en\n"
"   Starknet (L2). Reducir los datos en cadena L1 puede reducir radicalmente los costos.\n"
"\n"
"- **Paymaster:** Starknet permitirá a los usuarios elegir cómo pagar\n"
"   tarifa de transacción, sigue las pautas establecidas en EIP 4337 y\n"
"   permite que la transacción especifique un contrato específico, un\n"
"   **Paymaster**, para pagar su transacción. Soporta sin gas\n"
"   transacciones, mejorando la accesibilidad del usuario."

#: src/ch00-00-introduction.md:85
msgid "## Cairo: The Language of Starknet"
msgstr "## Cairo: El Lenguaje de Starknet"

#: src/ch00-00-introduction.md:87
msgid ""
"Cairo is tailor-made for creating STARK-based smart contracts. As\n"
"Starknet’s native language, it’s central to building scalable and secure\n"
"decentralized apps. To start learning now, check out the [Cairo\n"
"Book](https://cairo-book.github.io/) and\n"
"[Starklings](https://github.com/shramee/starklings-cairo1)."
msgstr ""
"Cairo está hecho a medida para crear contratos inteligentes basados en STARK. Como\n"
"El idioma nativo de Starknet es fundamental para construir plataformas escalables y seguras.\n"
"Aplicaciones descentralizadas. Para comenzar a aprender ahora, consulte el [Cairo\n"
"Libro](https://cairo-book.github.io/) y\n"
"[Starklings](https://github.com/shramee/starklings-cairo1)."

#: src/ch00-00-introduction.md:93
msgid ""
"Inspired by Rust, Cairo lets you write contracts safely and\n"
"conveniently."
msgstr ""
"Inspirado en Rust, Cairo le permite redactar contratos de forma segura y\n"
"convenientemente."

#: src/ch00-00-introduction.md:96
msgid "### Why Choose Cairo?"
msgstr "### ¿Por qué elegir Cairo?"

#: src/ch00-00-introduction.md:98
msgid ""
"Cairo is designed for _Provable Computation,_ a new paradigm that lets\n"
"programs prove their correctness without re-running them. Here’s why it\n"
"stands out:"
msgstr ""
"Cairo está diseñado para _Computación Demostrable_, un nuevo paradigma que permite\n"
"que los programas demuestran su corrección sin volver a ejecutarlos. He aquí por qué\n"
"destaca:"

#: src/ch00-00-introduction.md:102
msgid ""
"- Purpose-Built: Designed specifically for smart contracts.\n"
"\n"
"- No EVM Limits: Goes beyond what the Ethereum Virtual Machine can do.\n"
"\n"
"- Flexibility: Uses traits for more flexibility than inheritance."
msgstr ""
"- **Purpose-Built: :** Diseñado específicamente para smart contracts.\n"
"\n"
"- **Sin límites de EVM:** Va más allá de lo que puede hacer la máquina virtual Ethereum.\n"
"\n"
"- **Flexibilidad:** Utiliza rasgos para mayor flexibilidad que la herencia."

#: src/ch00-00-introduction.md:108
msgid "## Governance"
msgstr "## Gobernanza"

#: src/ch00-00-introduction.md:110
msgid ""
"The Starknet Foundation oversees Starknet’s governance. Its duties\n"
"include:"
msgstr ""
"La Fundación Starknet supervisa la gobernanza de Starknet. Sus deberes\n"
"incluyen:"

#: src/ch00-00-introduction.md:113
msgid ""
"- Managing Starknet’s development and operations\n"
"\n"
"- Overseeing the Starknet DAO, which enables community involvement\n"
"\n"
"- Setting rules to maintain network integrity"
msgstr ""
"- Gestionar el desarrollo y las operaciones de Starknet\n"
"\n"
"- Supervisar Starknet DAO, que permite la participación de la comunidad\n"
"\n"
"- Establecer reglas para mantener la integridad de la red"

#: src/ch00-00-introduction.md:119
msgid ""
"Our focus is on technical input and debate for improving the protocol.\n"
"While we value all perspectives, it’s often the technical insights that\n"
"steer us forward."
msgstr ""
"Nos centramos en los aportes técnicos y el debate para mejorar el protocolo.\n"
"Si bien valoramos todas las perspectivas, a menudo son los conocimientos técnicos los que\n"
"guíanos hacia adelante."

#: src/ch00-00-introduction.md:123
msgid ""
"Members can influence Starknet by voting on changes. Here’s the process:\n"
"A new version is tested on the Goerli Testnet. Members then have six\n"
"days to review it. A Snapshot proposal is made, and the community votes.\n"
"A majority of _YES_ votes means an upgrade to the Mainnet."
msgstr ""
"Los miembros pueden influir en Starknet votando sobre los cambios. Aquí está el proceso:\n"
"Se prueba una nueva versión en Goerli Testnet. Los miembros tienen entonces seis\n"
"días para revisarlo. Se hace una propuesta de instantánea y la comunidad vota.\n"
"Una mayoría de votos _SÍ_ significa una actualización a Mainnet."

#: src/ch00-00-introduction.md:128
msgid "In short, governance is key to Starknet’s evolution."
msgstr "En resumen, la gobernanza es clave para la evolución de Starknet."

#: src/ch00-00-introduction.md:130
msgid "To propose an improvement, create a SNIP."
msgstr "Para proponer una mejora, cree un SNIP."

#: src/ch00-00-introduction.md:132
msgid "### SNIP: StarkNet Improvement Proposals"
msgstr "### SNIP: Starknet Improvement Proposals"

#: src/ch00-00-introduction.md:134
msgid ""
"SNIP is short for StarkNet Improvement Proposal. It’s essentially a\n"
"blueprint that details proposed enhancements or changes to the StarkNet\n"
"ecosystem. A well-crafted SNIP includes both the technical\n"
"specifications of the change and the reasons behind it. If you’re\n"
"proposing a SNIP, it’s your job to rally community support and document\n"
"any objections (more details\n"
"[here](https://community.starknet.io/t/draft-simp-1-simp-purpose-and-guidelines/1197#what-is-a-snip-2)).\n"
"Once a SNIP is approved, it becomes a part of the Starknet protocol. All\n"
"the SNIPs can be found in [this\n"
"repository](https://github.com/starknet-io/SNIPs)."
msgstr ""
"SNIP es la abreviatura de Starknet Improvement Proposal. Es esencialmente un\n"
"plano que detalla las mejoras o cambios propuestos en el ecosistema de\n"
"Starknet. Un SNIP bien elaborado incluye tanto los aspectos técnicos\n"
"especificaciones del cambio y las razones detrás del mismo. Si estás\n"
"proponiendo un SNIP, es su trabajo conseguir el apoyo de la comunidad y documentar\n"
"cualquier objeción (más detalles\n"
"[aquí](https://community.starknet.io/t/draft-simp-1-simp-Purpose-and-guidelines/1197#what-is-a-snip-2)).\n"
"Una vez que se aprueba un SNIP, pasa a formar parte del protocolo Starknet. Todos\n"
"los SNIP se pueden encontrar en [este\n"
"repositorio](https://github.com/starknet-io/SNIPs)."

#: src/ch00-00-introduction.md:145
msgid "SNIPs serve three crucial roles:"
msgstr "Los SNIP cumplen tres funciones cruciales:"

#: src/ch00-00-introduction.md:147
msgid ""
"1.  They are the main avenue for proposing new features or changes.\n"
"\n"
"2.  They act as a platform for technical discussions within the\n"
"    community.\n"
"\n"
"3.  They document the decision-making process, offering a historical\n"
"    view of how StarkNet has evolved."
msgstr ""
"1. Son la vía principal para proponer nuevas características o cambios.\n"
"\n"
"2. Actúan como plataforma para discusiones técnicas dentro de la\n"
"    comunidad.\n"
"\n"
"3. Documentan el proceso de toma de decisiones y ofrecen una visión\n"
"    histórica de cómo ha evolucionado Starknet."

#: src/ch00-00-introduction.md:155
msgid ""
"Because SNIPs are stored as text files in a [version-controlled\n"
"repository](https://github.com/starknet-io/SNIPs), you can easily track\n"
"changes and understand the history of proposals."
msgstr ""
"Debido a que los SNIP se almacenan como archivos de texto en un  [version-controlled\n"
"repository](https://github.com/starknet-io/SNIPs), puede rastrear fácilmente los\n"
"cambios y comprender la historia de las propuestas."

#: src/ch00-00-introduction.md:159
msgid ""
"For those who are building on Starknet, SNIPs aren’t just\n"
"suggestions—they’re a roadmap. It’s beneficial for implementers to keep\n"
"a list of the SNIPs they’ve executed. This transparency helps users\n"
"gauge the state of a particular implementation or software library."
msgstr ""
"Para aquellos que están construyendo sobre Starknet, los SNIP no son solo\n"
"sugerencias: son una hoja de ruta. Es beneficioso para los implementadores mantener\n"
"una lista de los SNIP que han ejecutado. Esta transparencia ayuda a los usuarios\n"
"medir el estado de una implementación o biblioteca de software en particular."

#: src/ch00-00-introduction.md:164
msgid "## Learning Resources"
msgstr "## Recursos de aprendizaje"

#: src/ch00-00-introduction.md:166
msgid "For deeper insights into Starknet and Cairo:"
msgstr "Para obtener información más detallada sobre Starknet y Cairo:"

#: src/ch00-00-introduction.md:168
msgid ""
"- [The Starknet Book](https://book.starknet.io): For mastering\n"
"  Starknet\n"
"\n"
"- [The Cairo Book](https://cairo-book.github.io/): For mastering Cairo\n"
"\n"
"- [Starklings](https://github.com/shramee/starklings-cairo1):\n"
"  Practical tutorials and examples"
msgstr ""
"- [El libro de Starknet](https://book.starknet.io): Para masterizar\n"
"   Starknet\n"
"\n"
"- [El libro de Cairo](https://cairo-book.github.io/): Para dominar Cairo\n"
"\n"
"- [Starklings](https://github.com/shramee/starklings-cairo1):\n"
"   Tutoriales prácticos y ejemplos"

#: src/ch00-00-introduction.md:176 src/ch02-08-starknet-react.md:361 src/ch02-11-foundry-cast.md:502 src/ch03-00-architecture.md:251 src/ch03-01-transactions.md:102
#: src/ch03-02-sequencers.md:216 src/ch03-03-provers.md:243 src/ch04-00-account-abstraction.md:242
msgid "## Conclusion"
msgstr "## Conclusión"

#: src/ch00-00-introduction.md:178
msgid ""
"In decentralized technology, Starknet offers a solution to challenges that previous systems encountered. It's based on established _protocols_ and _registries_, following "
"the initial concepts introduced by figures such as Satoshi. Through a specific mathematical method, Starknet seeks a balance between scalability and consensus. As this "
"technology progresses, Starknet adheres to principles of inclusivity, neutrality, and user empowerment. It's poised for continuous adaptation and improvement in the field."
msgstr ""
"En tecnología descentralizada, Starknet ofrece una solución a los desafíos que encontraron los sistemas anteriores. Se basa en _protocolos_ y _registros_ establecidos, "
"siguiendo los conceptos iniciales introducidos por figuras como Satoshi. A través de un método matemático específico, Starknet busca el equilibrio entre escalabilidad y "
"consenso. A medida que avanza esta tecnología, Starknet se adhiere a principios de inclusión, neutralidad y empoderamiento del usuario. Está preparado para una adaptación y "
"mejora continuas en el campo."

#: src/ch01-00-getting-started.md:1
msgid "# Getting Started"
msgstr "# Primeros Pasos"

#: src/ch01-00-getting-started.md:3
msgid ""
"Starknet is a scalable Layer-2 solution on Ethereum. This guide will walk you through the process of deploying and interacting with your first Starknet smart contract using "
"the Cairo programming language, a language tailored for creating validity proofs and that Starknet uses. For seasoned developers looking to understand the core concepts and "
"get hands-on experience, this guide offers step-by-step instructions and essential details."
msgstr ""
"Starknet es una solución escalable de Capa 2 en Ethereum. Esta guía lo guiará a través del proceso de implementación e interacción con su primer smart contract de Starknet "
"utilizando el lenguaje de programación Cairo, un lenguaje diseñado para crear pruebas de validez y que utiliza Starknet. Para desarrolladores experimentados que buscan "
"comprender los conceptos básicos y adquirir experiencia práctica, esta guía ofrece instrucciones paso a paso y detalles esenciales."

#: src/ch01-00-getting-started.md:5
msgid "We will use the Starknet Remix Plugin to compile, deploy and interact with our smart contract. It is a great tool to get started with Starknet development."
msgstr ""
"Usaremos el complemento Starknet Remix para compilar, implementar e interactuar con nuestro contrato inteligente. Es una gran herramienta para comenzar con el desarrollo de "
"Starknet."

#: src/ch01-00-getting-started.md:7
msgid ""
"1. Visit [The Remix Project](https://remix.ethereum.org/).\n"
"2. Navigate to the ‘Plugins’ section in the bottom left corner.\n"
"3. Enable the “Starknet” plugin."
msgstr ""
"1. Visite [El Proyecto Remix](https://remix.ethereum.org/).\n"
"2. Navegue hasta la sección 'Plugin' en la esquina inferior izquierda.\n"
"3. Habilite el complemento 'Starknet'."

#: src/ch01-00-getting-started.md:11
msgid "<img alt=\"Activate the Starknet Plugin\" src=\"img/ch01-starknet-plugin.png\" class=\"center\" style=\"width: 100%;\" />"
msgstr "<img alt=\"Activate the Starknet Plugin\" src=\"img/ch01-starknet-plugin.png\" class=\"center\" style=\"width: 100%;\" />"

#: src/ch01-00-getting-started.md:13
msgid "<span class=\"caption\">Activate the Starknet Plugin</span>"
msgstr "<span class=\"caption\">Activar el Plugin de Starknet</span>"

#: src/ch01-00-getting-started.md:15
msgid "4. After enabling, the Starknet logo appears on the left sidebar. Click it to interact with opened Cairo files."
msgstr "4. Después de habilitarlo, el logotipo de Starknet aparece en la barra lateral izquierda. Haga clic en él para interactuar con los archivos Cairo abiertos."

#: src/ch01-00-getting-started.md:17
msgid "## Introduction to Starknet Smart Contracts"
msgstr "## Introducción a los Smart Contracts de Starknet"

#: src/ch01-00-getting-started.md:19
msgid "The script below is a simple `Ownable` contract pattern written in Cairo for Starknet. It features:"
msgstr "El siguiente script es un patrón de contrato simple `Ownable` escrito en Cairo para Starknet. Cuenta con:"

#: src/ch01-00-getting-started.md:21
msgid ""
"- An ownership system.\n"
"- A method to transfer ownership.\n"
"- A method to check the current owner.\n"
"- An event notification for ownership changes."
msgstr ""
"- Un sistema de propiedad.\n"
"- Un método para transferir la propiedad (ownership).\n"
"- Un método para comprobar el propietario (owner) actual.\n"
"- Una notificación de evento para cambios de propiedad."

#: src/ch01-00-getting-started.md:26
msgid ""
"```rust\n"
"use starknet::ContractAddress;\n"
"\n"
"#[starknet::interface]\n"
"trait OwnableTrait<T> {\n"
"    fn transfer_ownership(ref self: T, new_owner: ContractAddress);\n"
"    fn get_owner(self: @T) -> ContractAddress;\n"
"}\n"
"\n"
"#[starknet::contract]\n"
"mod Ownable {\n"
"    use super::ContractAddress;\n"
"    use starknet::get_caller_address;\n"
"\n"
"    #[event]\n"
"    #[derive(Drop, starknet::Event)]\n"
"    enum Event {\n"
"      OwnershipTransferred1: OwnershipTransferred1,\n"
"    }\n"
"\n"
"    #[derive(Drop, starknet::Event)]\n"
"    struct OwnershipTransferred1 {\n"
"        #[key]\n"
"        prev_owner: ContractAddress,\n"
"        #[key]\n"
"        new_owner: ContractAddress,\n"
"    }\n"
"\n"
"    #[storage]\n"
"    struct Storage {\n"
"        owner: ContractAddress,\n"
"    }\n"
"\n"
"    #[constructor]\n"
"    fn constructor(ref self: ContractState, init_owner: ContractAddress) {\n"
"        self.owner.write(init_owner);\n"
"    }\n"
"\n"
"    #[external(v0)]\n"
"    impl OwnableImpl of super::OwnableTrait<ContractState> {\n"
"        fn transfer_ownership(ref self: ContractState, new_owner: ContractAddress) {\n"
"            self.only_owner();\n"
"            let prev_owner = self.owner.read();\n"
"            self.owner.write(new_owner);\n"
"            self.emit(Event::OwnershipTransferred1(OwnershipTransferred1 {\n"
"                prev_owner: prev_owner,\n"
"                new_owner: new_owner,\n"
"            }));\n"
"        }\n"
"\n"
"        fn get_owner(self: @ContractState) -> ContractAddress {\n"
"            self.owner.read()\n"
"        }\n"
"    }\n"
"\n"
"    #[generate_trait]\n"
"    impl PrivateMethods of PrivateMethodsTrait {\n"
"        fn only_owner(self: @ContractState) {\n"
"            let caller = get_caller_address();\n"
"            assert(caller == self.owner.read(), 'Caller is not the owner');\n"
"        }\n"
"    }\n"
"}\n"
"```"
msgstr ""
"```rust\n"
"use starknet::ContractAddress;\n"
"\n"
"#[starknet::interface]\n"
"trait OwnableTrait<T> {\n"
"    fn transfer_ownership(ref self: T, new_owner: ContractAddress);\n"
"    fn get_owner(self: @T) -> ContractAddress;\n"
"}\n"
"\n"
"#[starknet::contract]\n"
"mod Ownable {\n"
"    use super::ContractAddress;\n"
"    use starknet::get_caller_address;\n"
"\n"
"    #[event]\n"
"    #[derive(Drop, starknet::Event)]\n"
"    enum Event {\n"
"      OwnershipTransferred1: OwnershipTransferred1,\n"
"    }\n"
"\n"
"    #[derive(Drop, starknet::Event)]\n"
"    struct OwnershipTransferred1 {\n"
"        #[key]\n"
"        prev_owner: ContractAddress,\n"
"        #[key]\n"
"        new_owner: ContractAddress,\n"
"    }\n"
"\n"
"    #[storage]\n"
"    struct Storage {\n"
"        owner: ContractAddress,\n"
"    }\n"
"\n"
"    #[constructor]\n"
"    fn constructor(ref self: ContractState, init_owner: ContractAddress) {\n"
"        self.owner.write(init_owner);\n"
"    }\n"
"\n"
"    #[external(v0)]\n"
"    impl OwnableImpl of super::OwnableTrait<ContractState> {\n"
"        fn transfer_ownership(ref self: ContractState, new_owner: ContractAddress) {\n"
"            self.only_owner();\n"
"            let prev_owner = self.owner.read();\n"
"            self.owner.write(new_owner);\n"
"            self.emit(Event::OwnershipTransferred1(OwnershipTransferred1 {\n"
"                prev_owner: prev_owner,\n"
"                new_owner: new_owner,\n"
"            }));\n"
"        }\n"
"\n"
"        fn get_owner(self: @ContractState) -> ContractAddress {\n"
"            self.owner.read()\n"
"        }\n"
"    }\n"
"\n"
"    #[generate_trait]\n"
"    impl PrivateMethods of PrivateMethodsTrait {\n"
"        fn only_owner(self: @ContractState) {\n"
"            let caller = get_caller_address();\n"
"            assert(caller == self.owner.read(), 'Caller is not the owner');\n"
"        }\n"
"    }\n"
"}\n"
"```"

#: src/ch01-00-getting-started.md:91
msgid "### Components Breakdown"
msgstr "### Desglose de Componentes"

#: src/ch01-00-getting-started.md:93
msgid ""
"The following is a brief description of the components in the contract. We will get into more details when we get deeper into Cairo so feel free to skip this section for now "
"if you are not familiar with smart contract development."
msgstr ""
"La siguiente es una breve descripción de los componentes del contrato. Entraremos en más detalles cuando profundicemos en El Cairo, así que no dude en omitir esta sección "
"por ahora si no está familiarizado con el desarrollo de contratos inteligentes."

#: src/ch01-00-getting-started.md:95
msgid ""
"1. **Dependencies and Interface**:\n"
"   - **`starknet::ContractAddress`**: Represents a Starknet contract address.\n"
"   - **`OwnableTrait`**: Specifies functions for transferring and getting ownership.\n"
"2. **Events**:\n"
"   - **`OwnershipTransferred1`**: Indicates ownership change with previous and new owner details.\n"
"3. **Storage**:\n"
"   - **`Storage`**: Holds the contract's state with the current owner's address.\n"
"4. **Constructor**:\n"
"   - Initializes the contract with a starting owner.\n"
"5. **External Functions**:\n"
"   - Functions for transferring ownership and retrieving the current owner's details.\n"
"6. **Private Methods**:\n"
"   - **`only_owner`**: Validates if the caller is the current owner."
msgstr ""
"1. **Dependencias e Interfaz**:\n"
"    - **`starknet::ContractAddress`**: Representa una dirección de contrato de Starknet.\n"
"    - **`OwnableTrait`**: Especifica funciones para transferir y obtener propiedad.\n"
"2. **Eventos**:\n"
"    - **`OwnershipTransferred1`**: Indica cambio de propiedad con detalles del propietario anterior y nuevo.\n"
"3. **Storage**:\n"
"    - **`Storage`**: Mantiene el estado del contrato con la dirección del propietario actual.\n"
"4. **Constructor**:\n"
"    - Inicializa el contrato con un owner inicial.\n"
"5. **Funciones Externas**:\n"
"    - Funciones para transferir la propiedad y recuperar los datos del owner actual.\n"
"6. **Métodos privados**:\n"
"    - **`only_owner`**: Valida si la persona que llama es el owner actual."

#: src/ch01-00-getting-started.md:109
msgid "## Compilation Process"
msgstr "## Proceso de Compilación"

#: src/ch01-00-getting-started.md:111
msgid "To compile using Remix:"
msgstr "Para compilar usando Remix:"

#: src/ch01-00-getting-started.md:113
msgid ""
"1. **File Creation**\n"
"\n"
"   - Navigate to the \"File Explorer\" tab in Remix.\n"
"   - Create a new file named `Ownable.cairo` and input the previous code.\n"
"\n"
"2. **Compilation**\n"
"\n"
"   - Choose the `Ownable.cairo` file.\n"
"   - In the \"Starknet\" tab, select \"Compile Ownable.cairo\".\n"
"   - Post-compilation, an \"artifacts\" folder emerges containing the compiled contract in two distinct formats: Sierra (JSON file) and CASM. For Starknet deployment, Remix "
"will use the Sierra file. Do not worry about this process for now; we will cover it in detail in a later chapter. For now, Remix will handle the compilation and deployment "
"for us."
msgstr ""
"1. **Creación de archivos**\n"
"\n"
"    - Navega a la pestaña \"Explorador de archivos\" en Remix.\n"
"    - Cree un nuevo archivo llamado `Ownable.cairo` e ingrese el código anterior.\n"
"\n"
"2. **Copilación**\n"
"\n"
"    - Elija el archivo `Ownable.cairo`.\n"
"    - En la pestaña \"Starknet\", seleccione \"Compilar Ownable.cairo\".\n"
"    - Después de la compilación, aparece una carpeta de \"artifacts\" que contiene el contrato compilado en dos formatos distintos: Sierra (archivo JSON) y CASM. Para la "
"implementación de Starknet, Remix utilizará el archivo Sierra. No te preocupes por este proceso por ahora; Lo cubriremos en detalle en un capítulo posterior. Por ahora, "
"Remix se encargará de la compilación y la implementación por nosotros."

#: src/ch01-00-getting-started.md:124
msgid "<img alt=\"Artifacts folder after compilation\" src=\"img/ch01-remix-file.png\" class=\"center\" style=\"width: 100%;\" />"
msgstr "<img alt=\"Artifacts folder after compilation\" src=\"img/ch01-remix-file.png\" class=\"center\" style=\"width: 100%;\" />"

#: src/ch01-00-getting-started.md:126
msgid "<span class=\"caption\">Artifacts folder after compilation</span>"
msgstr "<span class=\"caption\">Carpeta de artefactos después de la compilación.</span>"

#: src/ch01-00-getting-started.md:128
msgid "## Deployment on the Development Network"
msgstr "## Despliegue en la Red de Desarrollo"

#: src/ch01-00-getting-started.md:130
msgid "To set your smart contract in motion, an initial owner must be defined. The Constructor function needs this information."
msgstr "Para poner en marcha su contrato inteligente, se debe definir un propietario inicial. La función Constructor necesita esta información."

#: src/ch01-00-getting-started.md:132
msgid "Here's a step-by-step guide to deploying your smart contract on the development network:"
msgstr "Aquí hay una guía paso a paso para implementar su smart contract en la red de desarrollo:"

#: src/ch01-00-getting-started.md:134
msgid ""
"1. **Select the Appropriate Network**\n"
"\n"
"   - Go to the Environment selection tab.\n"
"   - Choose \"Remote Devnet\" for deploying your inaugural contract on a development network.\n"
"\n"
"2. **Choose a Devnet Account**\n"
"\n"
"   - Under \"Devnet account selection\", a list of accounts specific to the chosen devnet is presented.\n"
"   - Pick any account and copy its address.\n"
"\n"
"3. **Initiating Deployment**\n"
"\n"
"   - Navigate to the \"Starknet\" tab.\n"
"   - Input the copied address into the `init_owner` variable.\n"
"   - Click on \"Deploy ownable.cairo\"."
msgstr ""
"1. **Seleccione la Red Adecuada**\n"
"\n"
"    - Vaya a la pestaña de selección de Environment.\n"
"    - Elija \"Remote Devnet\" para implementar su contrato inaugural en una red de desarrollo.\n"
"\n"
"2. **Elija una Cuenta Devnet**\n"
"\n"
"    - En \"Selección de cuenta de Devnet\", se presenta una lista de cuentas específicas del devnet elegido.\n"
"    - Elija cualquier cuenta y copie su dirección.\n"
"\n"
"3. **Iniciando Implementación**\n"
"\n"
"    - Navega a la pestaña \"Starknet\".\n"
"    - Ingrese la dirección copiada en la variable `init_owner`.\n"
"    - Haga clic en \"Deploy ownable.cairo\"."

#: src/ch01-00-getting-started.md:150
msgid "Post-deployment, Remix's terminal will send various logs. These logs provide crucial details, including:"
msgstr "Después de la implementación, la terminal de Remix enviará varios registros. Estos registros proporcionan detalles cruciales, que incluyen:"

#: src/ch01-00-getting-started.md:152
msgid ""
"- `transaction_hash`: The unique hash of the transaction. This hash can be used to track the transaction's status.\n"
"- `contract_address`: The address of the deployed contract. Use this address to interact with your contract.\n"
"- `calldata`: Contains the `init_owner` address fed to the constructor."
msgstr ""
"- `transaction_hash`: El hash único de la transacción. Este hash se puede utilizar para rastrear el estado de la transacción.\n"
"- `contract_address`: La dirección del contrato implementado. Utilice esta dirección para interactuar con su contrato.\n"
"- `calldata`: Contiene la dirección `init_owner` enviada al constructor."

#: src/ch01-00-getting-started.md:156
msgid ""
"```bash\n"
"{\n"
"  \"transaction_hash\": \"0x275e6d2caf9bc98b47ba09fa9034668c6697160a74de89c4655e2a70be84247\",\n"
"  \"contract_address\": \"0x5eb239955ad4c4333b8ab83406a3cf5970554b60a0d8e78a531df18c59a0db9\",\n"
"    ...\n"
"  \"calldata\": [\n"
"    \"0x4d9c8282b5633eeb1aab56393690d76f71e32f1b7be1bea03eb03e059245a28\"\n"
"  ],\n"
"    ...\n"
"}\n"
"```"
msgstr ""
"```bash\n"
"{\n"
"  \"transaction_hash\": \"0x275e6d2caf9bc98b47ba09fa9034668c6697160a74de89c4655e2a70be84247\",\n"
"  \"contract_address\": \"0x5eb239955ad4c4333b8ab83406a3cf5970554b60a0d8e78a531df18c59a0db9\",\n"
"    ...\n"
"  \"calldata\": [\n"
"    \"0x4d9c8282b5633eeb1aab56393690d76f71e32f1b7be1bea03eb03e059245a28\"\n"
"  ],\n"
"    ...\n"
"}\n"
"```"

#: src/ch01-00-getting-started.md:168
msgid "By following the above process, you successfully deploy your smart contract on the development network."
msgstr "Si sigue el proceso anterior, implementará con éxito su contrato inteligente en la red de desarrollo."

#: src/ch01-00-getting-started.md:170
msgid "## Interaction with the Contract"
msgstr "## Interacción con el Contrato"

#: src/ch01-00-getting-started.md:172
msgid "With the contract now active on the development network, interaction becomes possible. Here's a guide to effectively interact with your contract on Starknet:"
msgstr "Con el contrato ahora activo en la red de desarrollo, la interacción se hace posible. Aquí hay una guía para interactuar efectivamente con su contrato en Starknet:"

#: src/ch01-00-getting-started.md:174
msgid ""
"1. **Initiating Interaction**\n"
"\n"
"   - Navigate to the \"Starknet\" tab.\n"
"   - Select the \"Interact\" option.\n"
"\n"
"2. **Calling the `get_owner` Function**\n"
"\n"
"   - Choose the `get_owner` function. Since this function doesn't require arguments, the calldata field remains blank. (This is a read function, hence calling it is termed "
"as a \"call\".)\n"
"   - Press the \"get_owner\" button. Your terminal will display the result, revealing the owner's address provided during the contract's deployment as calldata for the "
"constructor:"
msgstr ""
"1. **Iniciando interacción**\n"
"\n"
"    - Navega a la pestaña \"Starknet\".\n"
"    - Selecciona la opción \"Interactuar\".\n"
"\n"
"2. **Llamar a la función `get_owner`**\n"
"\n"
"    - Elija la función `get_owner`. Como esta función no requiere argumentos, el campo calldata permanece en blanco. (Esta es una función de lectura, por lo que llamarla se "
"denomina \"call\").\n"
"    - Presione el botón \"get_owner\". Su terminal mostrará el resultado, revelando la dirección del propietario proporcionada durante la implementación del contrato como "
"datos de llamada para el constructor:"

#: src/ch01-00-getting-started.md:184
msgid ""
"```bash\n"
"{\n"
"  \"response\": {\n"
"    \"result\": [\n"
"      \"0x4d9c8282b5633eeb1aab56393690d76f71e32f1b7be1bea03eb03e059245a28\"\n"
"    ]\n"
"  },\n"
"  \"contract\": \"ownable.cairo\",\n"
"  \"function\": \"get_owner\"\n"
"}\n"
"```"
msgstr ""
"```bash\n"
"{\n"
"  \"response\": {\n"
"    \"result\": [\n"
"      \"0x4d9c8282b5633eeb1aab56393690d76f71e32f1b7be1bea03eb03e059245a28\"\n"
"    ]\n"
"  },\n"
"  \"contract\": \"ownable.cairo\",\n"
"  \"function\": \"get_owner\"\n"
"}\n"
"```"

#: src/ch01-00-getting-started.md:196
msgid "This call currently doesn't spend gas because the function does not change the state of the contract."
msgstr "Esta llamada actualmente no gasta gasolina porque la función no cambia el estado del contrato."

#: src/ch01-00-getting-started.md:198
msgid "3. **Invoking the `transfer_ownership` Function**"
msgstr "3. **Invocando la función `transfer_ownership`**"

#: src/ch01-00-getting-started.md:200
msgid ""
"- Now, for the **`transfer_ownership`** function, which requires the new owner's address as input.\n"
"- Enter this address into the calldata field. (For this, use any address from the \"Devnet account selection\" listed in the Environment tab.)\n"
"- Click the \"transfer_ownership\" button. The terminal then showcases the transaction hash indicating the contract's state alteration. Since we are altering the contract's "
"state this typo of interaction is called an \"invoke\" and needs to be signed by the account that is calling the function."
msgstr ""
"- Ahora, para la función **`transfer_ownership`**, que requiere la dirección del nuevo propietario como entrada.\n"
"- Ingrese esta dirección en el campo de datos de llamada. (Para esto, use cualquier dirección de la \"Selección de cuenta Devnet\" que aparece en la pestaña Entorno).\n"
"- Haga clic en el botón \"transfer_ownership\". Luego, la terminal muestra el hash de la transacción que indica la alteración del estado del contrato. Dado que estamos "
"alterando el estado del contrato, este tipo de interacción se denomina \"invoke\" y debe ser firmado por la cuenta que llama a la función."

#: src/ch01-00-getting-started.md:204
msgid ""
"For these transactions, the terminal logs will exhibit a \"status\" variable, indicating the transaction's fate. If the status reads \"ACCEPTED_ON_L2\", the Sequencer has "
"accepted the transaction, pending block inclusion. However, a \"REJECTED\" status signifies the Sequencer's disapproval, and the transaction won't feature in the upcoming "
"block. More often than not, this transaction gains acceptance, leading to a contract state modification. On calling the **`get_owner`** function again we get this:"
msgstr ""
"Para estas transacciones, los registros de la terminal mostrarán una variable de \"status\", que indica el destino de la transacción. Si el estado es \"ACCEPTED_ON_L2\", el "
"secuenciador ha aceptado la transacción, pendiente de inclusión del bloque. Sin embargo, un estado \"REJECTED\" significa la desaprobación del secuenciador y la transacción "
"no aparecerá en el siguiente bloque. La mayoría de las veces, esta transacción obtiene aceptación, lo que lleva a una modificación del estado del contrato. Al llamar "
"nuevamente a la función **`get_owner`** obtenemos esto:"

#: src/ch01-00-getting-started.md:206
msgid ""
"```bash\n"
"{\n"
"  \"response\": {\n"
"    \"result\": [\n"
"      \"0x20884fd341e11a00b9d31600c332f126f5c3f9ffd2aa93cb43dee9f90176d4f\"\n"
"    ]\n"
"  },\n"
"  \"contract\": \"ownable.cairo\",\n"
"  \"function\": \"get_owner\"\n"
"}\n"
"```"
msgstr ""
"```bash\n"
"{\n"
"  \"response\": {\n"
"    \"result\": [\n"
"      \"0x20884fd341e11a00b9d31600c332f126f5c3f9ffd2aa93cb43dee9f90176d4f\"\n"
"    ]\n"
"  },\n"
"  \"contract\": \"ownable.cairo\",\n"
"  \"function\": \"get_owner\"\n"
"}\n"
"```"

#: src/ch01-00-getting-started.md:218
msgid "You've now adeptly compiled, deployed, and interacted with your inaugural Starknet smart contract. Well done!"
msgstr "Ahora ha compilado, implementado e interactuado hábilmente con su contrato inteligente inaugural de Starknet. ¡Bien hecho!"

#: src/ch01-00-getting-started.md:220
msgid "## Deploying on Starknet Testnet"
msgstr "## Implementación en Starknet Testnet"

#: src/ch01-00-getting-started.md:222
msgid ""
"After testing your smart contract on a development network, it's time to deploy it to the Starknet Testnet. Starknet Testnet is a public platform available for everyone, "
"ideal for testing smart contracts and collaborating with fellow developers."
msgstr ""
"Después de probar su contrato inteligente en una red de desarrollo, es hora de implementarlo en Starknet Testnet. Starknet Testnet es una plataforma pública disponible para "
"todos, ideal para probar contratos inteligentes y colaborar con otros desarrolladores."

#: src/ch01-00-getting-started.md:224
msgid "First you need to create a Starknet account."
msgstr "Primero necesitas crear una cuenta Starknet."

#: src/ch01-00-getting-started.md:226
msgid "### Smart Wallet Setup"
msgstr "### Configuración de Smart Wallet"

#: src/ch01-00-getting-started.md:228
msgid ""
"Before deploying your smart contract to Starknet, you must handle the transaction cost. While deploying to the Starknet Goerli Testnet is free, a smart wallet account is "
"essential. You can set up a smart wallet using either:"
msgstr ""
"Antes de implementar su smart contract en Starknet, debe manejar el costo de la transacción. Si bien la implementación en Starknet Goerli Testnet es gratuita, una cuenta de "
"billetera inteligente es esencial. Puede configurar una billetera inteligente usando:"

#: src/ch01-00-getting-started.md:230
msgid ""
"- [Braavos](https://braavos.app/)\n"
"- [Argent](https://www.argent.xyz/argent-x/)"
msgstr ""
"- [Braavos](https://braavos.app/)\n"
"- [Argent](https://www.argent.xyz/argent-x/)"

#: src/ch01-00-getting-started.md:233
msgid ""
"Both are reliable Starknet wallets offering enhanced security and accessibility features thanks to the possibilities that the Cairo VM brings, such as Account Abstraction "
"(keep reading the Book for more on this)."
msgstr ""
"Ambas son billeteras Starknet confiables que ofrecen características mejoradas de seguridad y accesibilidad gracias a las posibilidades que ofrece Cairo VM, como Account "
"Abstraction (siga leyendo el libro para obtener más información sobre esto)."

#: src/ch01-00-getting-started.md:235
msgid ""
"1. Install the recommended chrome/brave extension for your chosen wallet.\n"
"2. Follow your wallet provider's instructions to deploy your account.\n"
"   1. Use the [Starknet Faucet](https://faucet.goerli.starknet.io/) to fund your account.\n"
"3. Deploy the account to the network. This usually takes around 10 seconds."
msgstr ""
"1. Instale la extensión Chrome/brave recomendada para su billetera elegida.\n"
"2. Siga las instrucciones de su proveedor de billetera para implementar su cuenta.\n"
"    1. Utilice [Starknet Faucet](https://faucet.goerli.starknet.io/) para depositar fondos en su cuenta.\n"
"3. Implemente la cuenta en la red. Esto suele tardar unos 10 segundos."

#: src/ch01-00-getting-started.md:240
msgid "Once set up, you're ready to deploy your smart contracts to the Starknet Testnet."
msgstr "Una vez configurado, estará listo para implementar sus contratos inteligentes en Starknet Testnet."

#: src/ch01-00-getting-started.md:242
msgid "### Deployment and Interaction"
msgstr "### Despliegue e Interacción"

#: src/ch01-00-getting-started.md:244
msgid ""
"1. Follow the previous deployment steps.\n"
"2. In the 'Environment selection' tab, choose 'Wallet Selection'.\n"
"3. Select your Starknet account and continue with deploying and interacting with your contract."
msgstr ""
"1. Siga los pasos de implementación anteriores.\n"
"2. En la pestaña 'Environment selection', elija 'Selección de Wallet'.\n"
"3. Seleccione su cuenta Starknet y continúe con la implementación e interactuando con su contrato."

#: src/ch01-00-getting-started.md:248
msgid "You can monitor transaction hashes and addresses using any Starknet block explorers like:"
msgstr "Puede monitorear los hashes y las direcciones de las transacciones utilizando cualquier explorador de bloques de Starknet como:"

#: src/ch01-00-getting-started.md:250
msgid ""
"- [Starkscan](https://testnet.starkscan.co/)\n"
"- [Voyager](https://goerli.voyager.online/)"
msgstr ""
"- [Starkscan](https://testnet.starkscan.co/)\n"
"- [Voyager](https://goerli.voyager.online/)"

#: src/ch01-00-getting-started.md:253
msgid ""
"These tools provide a visual representation of transactions and contract state alterations. Notably, when you alter the contract ownership using the `transfer_ownership` "
"function, the event emitted by the contract appears in the block explorer. It's an effective method to track contract events."
msgstr ""
"Estas herramientas proporcionan una representación visual de las transacciones y las alteraciones del estado del contrato. En particular, cuando modifica la propiedad del "
"contrato utilizando la función `transfer_ownership`, el evento emitido por el contrato aparece en el explorador de bloques. Es un método eficaz para realizar un seguimiento "
"de los eventos del contrato."

#: src/ch01-00-getting-started.md:255
msgid "## Your Next Steps"
msgstr "## Tus Próximos Pasos"

#: src/ch01-00-getting-started.md:257
msgid "Decide your direction from the following choices:"
msgstr "Decide tu dirección entre las siguientes opciones:"

#: src/ch01-00-getting-started.md:259
msgid ""
"1. **Deepen Your Starknet Knowledge**: For an extensive grasp of Starknet's inner workings and potential use cases, delve into Chapter 3 of the Starknet Book. This chapter "
"details Starknet’s architectural nuances. Then go ahead from there.\n"
"\n"
"2. **Dive into Cairo**: If you're more attuned to coding and wish to craft Starknet contracts, then Cairo is essential. It stands as Starknet's core contract language. Begin "
"with Chapters 1-6 of the [Cairo Book](https://book.cairo-lang.org/title-page.html), ranging from basics in _Getting Started_ to more advanced aspects such as _Enums and "
"Pattern Matching_. Conclude by navigating to the [Starknet Smart Contracts chapter](https://book.cairo-lang.org/ch99-00-starknet-smart-contracts.html), ensuring you have a "
"well-rounded understanding."
msgstr ""
"1. **Profundice su conocimiento de Starknet**: para obtener una comprensión amplia del funcionamiento interno de Starknet y los posibles casos de uso, profundice en el "
"Capítulo 3 del Libro de Starknet. Este capítulo detalla los matices arquitectónicos de Starknet. Entonces continúa desde allí.\n"
"\n"
"2. **Sumérgete en Cairo**: si estás más familiarizado con la codificación y deseas crear contratos de Starknet, entonces Cairo es esencial. Es el lenguaje contractual "
"central de Starknet. Comience con los capítulos 1 a 6 del [Libro de El Cairo] (https://book.cairo-lang.org/title-page.html), que van desde conceptos básicos de "
"_Introducción_ hasta aspectos más avanzados como _Enums y Pattern Matching_. Concluya navegando al [capítulo Smart Contracts de Starknet] (https://book.cairo-lang.org/"
"ch99-00-starknet-smart-contracts.html), asegurándose de tener una comprensión completa."

#: src/ch02-00-starknet-tooling.md:1
msgid "# Starknet Tooling"
msgstr "# Herramientas en Starknet"

#: src/ch02-00-starknet-tooling.md:3 src/ch02-03-scarb.md:3
msgid ""
"To make the most of this chapter, a basic grasp of the Cairo programming\n"
"language is advised. We suggest reading chapters 1-6 of the [Cairo\n"
"Book](https://book.cairo-lang.org/title-page.html), covering topics from\n"
"_Getting Started_ to _Enums and Pattern Matching._ Follow this by\n"
"studying the [Starknet Smart Contracts\n"
"chapter](https://book.cairo-lang.org/ch99-00-starknet-smart-contracts.html)\n"
"in the same book. With this background, you’ll be well-equipped to\n"
"understand the examples presented here."
msgstr ""
"Para aprovechar al máximo este capítulo, se necesita una comprensión básica de la programación de Cairo.\n"
"Sugerimos leer los capítulos 1-6 del [El Libro de Cairo\n"
"](https://book.cairo-lang.org/title-page.html), que cubre temas de\n"
"_Comenzando_ a _Enums y Pattern Matching._ Siga esto\n"
"estudiando los [Smart Contract de Starknet\n"
"capítulo](https://book.cairo-lang.org/ch99-00-starknet-smart-contracts.html)\n"
"en el mismo libro. Con estos antecedentes, estará bien equipado para\n"
"entender los ejemplos presentados aquí."

#: src/ch02-00-starknet-tooling.md:12
msgid ""
"Today, Starknet provides all essential tools for building decentralized\n"
"applications (dApps), compatible with multiple languages like\n"
"JavaScript, Rust, and Python. You can use the Starknet SDK for\n"
"development. Front-end developers can use Starknet.js with React, while\n"
"Rust and Python work well for back-end tasks."
msgstr ""
"Hoy, Starknet proporciona todas las herramientas esenciales para construir aplicaciones descentralizadas\n"
" (dApps), compatibles con múltiples idiomas como\n"
"JavaScript, Rust y Python. Puede utilizar el SDK de Starknet para\n"
"desarrollar. Los desarrolladores front-end pueden usar Starknet.js con React, mientras\n"
"Rust y Python funcionan bien para tareas de back-end."

#: src/ch02-00-starknet-tooling.md:18
msgid ""
"We welcome contributors to enhance existing tools or develop new\n"
"solutions."
msgstr ""
"Damos la bienvenida a los contribuyentes para mejorar las herramientas existentes o desarrollar nuevas\n"
"soluciones."

#: src/ch02-00-starknet-tooling.md:21
msgid "In this chapter, you’ll explore:"
msgstr "En este capítulo, explorará:"

#: src/ch02-00-starknet-tooling.md:23
msgid ""
"- Frameworks: Build using Protostar or Hardhat\n"
"\n"
"- SDKs: Discover multi-language support through Starknet.js,\n"
"  Starknet-rs, Starknet_py, and Caigo\n"
"\n"
"- Front-end Development: Use Starknet.js and React\n"
"\n"
"- Testing: Understand testing methods with Protostar and the Devnet"
msgstr ""
"- **Frameworks:** Construir usando Protostar o Hardhat\n"
"\n"
"- **SDK:** descubra la compatibilidad con varios idiomas a través de Starknet.js,\n"
"   Starknet-rs, Starknet_py y Caigo\n"
"\n"
"- **Desarrollo front-end:** Utilice Starknet.js y React\n"
"\n"
"- **Testing:** Comprender los métodos de prueba con Protostar y Devnet"

#: src/ch02-00-starknet-tooling.md:32
msgid ""
"By chapter’s end, you’ll have a complete grasp of Starknet’s toolset,\n"
"enabling efficient dApp development."
msgstr ""
"Al final del capítulo, tendrá una comprensión completa del conjunto de herramientas de Starknet,\n"
"permitiendo el desarrollo eficiente de dApps."

#: src/ch02-00-starknet-tooling.md:35
msgid ""
"Here’s a quick rundown of the tools that could be used for Starknet\n"
"development and that we’ll cover in this chapter:"
msgstr ""
"Aquí hay un resumen rápido de las herramientas que podrían usarse para \n"
"el desarrollo de Starknet y que cubriremos en este capítulo:"

#: src/ch02-00-starknet-tooling.md:38
msgid ""
"1.  Scarb: A package manager that compiles your contracts.\n"
"\n"
"2.  Starkli: A CLI tool for interacting with the Starknet network.\n"
"\n"
"3.  Foundry: For contract testing.\n"
"\n"
"4.  Katana: Creates a local test node.\n"
"\n"
"5.  SDKs: starknet.js, Starknet.py, and starknet.rs interface with\n"
"    Starknet using common programming languages.\n"
"\n"
"6.  Starknet-react: Builds front-end apps using React."
msgstr ""
"1.  **Scarb:** Un administrador de paquetes que compila tus contratos.\n"
"\n"
"2.  **Starkli:** Una herramienta CLI para interactuar con la red Starknet.\n"
"\n"
"3.  **Foundry:** Para pruebas por contrato.\n"
"\n"
"4.  **Katana:** Crea un nodo de prueba local.\n"
"\n"
"5.  **SDK:** Interfaz starknet.js, Starknet.py y starknet.rs con\n"
"     Starknet utilizando lenguajes de programación comunes.\n"
"\n"
"6.  **Starknet-react:** Crea aplicaciones front-end usando React."

#: src/ch02-01-basic-installation.md:1 src/ch02-03-scarb.md:34 src/ch02-07-starknet-js.md:13
msgid "# Installation"
msgstr "# Instalación"

#: src/ch02-01-basic-installation.md:3
msgid ""
"This chapter walks you through setting up your Starknet development\n"
"tools."
msgstr ""
"Este capítulo lo guiará a través de la configuración de sus herramientas\n"
"de desarrollo en Starknet."

#: src/ch02-01-basic-installation.md:6
msgid "Essential tools to install:"
msgstr "Herramientas esenciales para instalar:"

#: src/ch02-01-basic-installation.md:8
msgid ""
"1.  [Starkli](https://github.com/xJonathanLEI/starkli) - A CLI tool for\n"
"    interacting with Starknet. More tools are discussed in Chapter 2.\n"
"\n"
"2.  [Scarb](https://github.com/software-mansion/scarb) - Cairo’s package\n"
"    manager that compiles code to Sierra, a mid-level language between\n"
"    Cairo and CASM."
msgstr ""
"1. [Starkli](https://github.com/xJonathanLEI/starkli) - Una herramienta de línea de comandos (CLI) para interactuar con Starknet. Se discuten más herramientas en el Capítulo "
"2.\n"
"\n"
"2. [Scarb](https://github.com/software-mansion/scarb) - El gestor de paquetes de Cairo que compila código a Sierra, un lenguaje intermedio entre Cairo y CASM."

#: src/ch02-01-basic-installation.md:15
msgid ""
"For support or queries, visit our [GitHub\n"
"Issues](https://github.com/starknet-edu/starknetbook/issues) or contact\n"
"espejelomar on Telegram."
msgstr ""
"Para soporte o consultas, visite nuestro [GitHub\n"
"Issues](https://github.com/starknet-edu/starknetbook/issues) o póngase en contacto\n"
"espejelomar en Telegram."

#: src/ch02-01-basic-installation.md:19
msgid "## Starkli Installation"
msgstr "## Instalación de Starkli"

#: src/ch02-01-basic-installation.md:21
msgid ""
"Easily install Starkli using Starkliup, an installer invoked through the\n"
"command line."
msgstr ""
"Instale Starkli fácilmente usando Starkliup, un instalador que se invoca\n"
"a través de la línea de comando."

#: src/ch02-01-basic-installation.md:24
msgid ""
"```bash\n"
"curl https://get.starkli.sh | sh\n"
"starkliup\n"
"```"
msgstr ""
"```bash\n"
"curl https://get.starkli.sh | sh\n"
"starkliup\n"
"```"

#: src/ch02-01-basic-installation.md:29
msgid "Restart your terminal and confirm installation:"
msgstr "Reinicia tu terminal y confirma la instalación:"

#: src/ch02-01-basic-installation.md:31
msgid ""
"```bash\n"
"starkli --version\n"
"```"
msgstr ""
"```bash\n"
"starkli --version\n"
"```"

#: src/ch02-01-basic-installation.md:35
msgid "To upgrade Starkli, simply repeat the steps."
msgstr "Para actualizar Starkli, simplemente repita los pasos."

#: src/ch02-01-basic-installation.md:37
msgid "## Scarb Package Manager Installation"
msgstr "## Instalación del Administrador de Paquetes Scarb"

#: src/ch02-01-basic-installation.md:39
msgid "We will get deeper into Scarb later in this chapter. For now, we will go over the installation process."
msgstr "Profundizaremos en Scarb más adelante en este capítulo. Por ahora, repasaremos el proceso de instalación."

#: src/ch02-01-basic-installation.md:41
msgid "For macOS and Linux:"
msgstr "Para macOS y Linux:"

#: src/ch02-01-basic-installation.md:43
msgid ""
"```bash\n"
"    curl --proto '=https' --tlsv1.2 -sSf https://docs.swmansion.com/scarb/install.sh | sh\n"
"```"
msgstr ""
"```bash\n"
"    curl --proto '=https' --tlsv1.2 -sSf https://docs.swmansion.com/scarb/install.sh | sh\n"
"```"

#: src/ch02-01-basic-installation.md:47
msgid ""
"For Windows, follow manual setup in the [Scarb\n"
"documentation](https://docs.swmansion.com/scarb/download.html#windows)."
msgstr ""
"Para Windows, siga la configuración manual en [Scarb\n"
"Documentation](https://docs.swmansion.com/scarb/download.html#windows)."

#: src/ch02-01-basic-installation.md:50
msgid "Restart the terminal and run:"
msgstr "Reinicie la terminal y ejecute:"

#: src/ch02-01-basic-installation.md:52 src/ch02-02-compile-deploy-interact.md:38
msgid ""
"```bash\n"
"    scarb --version\n"
"```"
msgstr ""
"```bash\n"
"    scarb --version\n"
"```"

#: src/ch02-01-basic-installation.md:56
msgid "To upgrade Scarb, rerun the installation command."
msgstr "Para actualizar Scarb, vuelva a ejecutar el comando de instalación."

#: src/ch02-01-basic-installation.md:58
msgid "You are now set to code in Cairo and deploy to Starknet."
msgstr "Ahora está configurado para codificar en Cairo y realizar la implementación en Starknet."

#: src/ch02-02-compile-deploy-interact.md:1
msgid "# Compile, Deploy and Interact with a Contract"
msgstr "# Compilar, Desplegar e Interactuar con un Contrato"

#: src/ch02-02-compile-deploy-interact.md:3
msgid ""
"In this chapter, you’ll learn how to compile, deploy, and interact with\n"
"a Starknet smart contract written in Cairo."
msgstr ""
"En este capítulo, aprenderá cómo compilar, implementar e interactuar con\n"
"un smart contract de Starknet escrito en Cairo."

#: src/ch02-02-compile-deploy-interact.md:6
msgid ""
"First, confirm that the following commands work on your system. If they\n"
"don’t, refer to Basic Installation in this chapter."
msgstr ""
"Primero, confirme que los siguientes comandos funcionan en su sistema. Si no es\n"
"así, consulte Instalación básica en este capítulo."

#: src/ch02-02-compile-deploy-interact.md:9
msgid ""
"```bash\n"
"    scarb --version  # For Cairo code compilation\n"
"    starkli --version  # To interact with Starknet\n"
"```"
msgstr ""
"```bash\n"
"    scarb --version  # For Cairo code compilation\n"
"    starkli --version  # To interact with Starknet\n"
"```"

#: src/ch02-02-compile-deploy-interact.md:14
msgid "## Find the compiler versions supported"
msgstr "## Encuentre las versiones del compilador compatibles"

#: src/ch02-02-compile-deploy-interact.md:16
msgid ""
"We have to make sure that our Starkli compiler version match Scarb\n"
"compiler version"
msgstr ""
"Tenemos que asegurarnos de que nuestra versión del compilador Starkli\n"
"coincida con la versión del compilador Scarb"

#: src/ch02-02-compile-deploy-interact.md:19
msgid "To find the compiler versions supported by Starkli, execute:"
msgstr "Para encontrar las versiones del compilador compatibles con Starkli, ejecute:"

#: src/ch02-02-compile-deploy-interact.md:21
msgid ""
"```bash\n"
"    starkli declare --help\n"
"```"
msgstr ""
"```bash\n"
"    starkli declare --help\n"
"```"

#: src/ch02-02-compile-deploy-interact.md:25
msgid ""
"You’ll see a list of possible compiler versions under the\n"
"`--compiler-version` flag."
msgstr ""
"Verá una lista de posibles versiones del compilador bajo el\n"
"indicador `--compiler-version`."

#: src/ch02-02-compile-deploy-interact.md:28
msgid ""
"```bash\n"
"    ...\n"
"    --compiler-version <COMPILER_VERSION>\n"
"              Statically-linked Sierra compiler version [possible values: [COMPILER VERSIONS]]]\n"
"    ...\n"
"```"
msgstr ""
"```bash\n"
"    ...\n"
"    --compiler-version <COMPILER_VERSION>\n"
"              Statically-linked Sierra compiler version [possible values: [COMPILER VERSIONS]]]\n"
"    ...\n"
"```"

#: src/ch02-02-compile-deploy-interact.md:35
msgid ""
"Note that the Scarb compiler version might not align with Starkli’s\n"
"supported versions. To check Scarb’s version:"
msgstr ""
"Tenga en cuenta que es posible que la versión del compilador Scarb no se alinee con las\n"
"versiones compatibles de Starkli. Para comprobar la versión de Scarb:"

#: src/ch02-02-compile-deploy-interact.md:42
msgid "You’ll see a list that contains scarb, cairo and sierra version."
msgstr "Verás una lista que contiene las versiones scarb, cairo y sierra."

#: src/ch02-02-compile-deploy-interact.md:44
msgid ""
"```bash\n"
"    scarb <SCARB VERSION>\n"
"    cairo: <COMPILER VERSION>\n"
"    sierra: <SIERRA VERSION>\n"
"```"
msgstr ""
"```bash\n"
"    scarb <SCARB VERSION>\n"
"    cairo: <COMPILER VERSION>\n"
"    sierra: <SIERRA VERSION>\n"
"```"

#: src/ch02-02-compile-deploy-interact.md:50
msgid ""
"If there’s a mismatch, it is suggested that you install the version of\n"
"Scarb that uses the compiler version that Starkli supports. You can find\n"
"previous releases on\n"
"[Scarb](https://github.com/software-mansion/scarb/releases)'s GitHub\n"
"repo."
msgstr ""
"Si hay una discrepancia, se sugiere instalar la versión de Scarb que utiliza la versión del\n"
"compilador compatible con Starkli. Puede encontrar versiones anteriores en el repositorio\n"
"de GitHub de [Scarb](https://github.com/software-mansion/scarb/releases)."

#: src/ch02-02-compile-deploy-interact.md:56
msgid "To install a specific version, such as `0.6.1`, run:"
msgstr "Para instalar una versión específica, como `0.6.1`, ejecute:"

#: src/ch02-02-compile-deploy-interact.md:58
msgid ""
"```bash\n"
"    curl --proto '=https' --tlsv1.2 -sSf https://docs.swmansion.com/scarb/install.sh | sh -s -- -v 0.6.1\n"
"```"
msgstr ""
"```bash\n"
"    curl --proto '=https' --tlsv1.2 -sSf https://docs.swmansion.com/scarb/install.sh | sh -s -- -v 0.6.1\n"
"```"

#: src/ch02-02-compile-deploy-interact.md:62
msgid "## Smart Wallet Setup"
msgstr "## Configuración de Smart Wallet"

#: src/ch02-02-compile-deploy-interact.md:64
msgid ""
"A smart wallet comprises a Signer and an Account Descriptor. The Signer\n"
"is a smart contract with a private key for signing transactions, while\n"
"the Account Descriptor is a JSON file detailing the wallet’s address and\n"
"public key."
msgstr ""
"Una billetera inteligente comprende un firmante (Signer) y un descriptor de cuenta. El Signer\n"
"es un smart contract con una clave privada para firmar transacciones, mientras que el\n"
"descriptor de cuenta es un archivo JSON que detalla la dirección y la clave pública de\n"
"la billetera."

#: src/ch02-02-compile-deploy-interact.md:69
msgid ""
"1.  Use Braavos or Argent X browser extensions to create your smart\n"
"    wallet.\n"
"\n"
"2.  Follow the provided instructions for your chosen wallet (Argent or\n"
"    Braavos).\n"
"\n"
"3.  Fund your wallet with ETH. Use [Starknet Goerli\n"
"    Faucet](https://faucet.goerli.starknet.io/) as needed."
msgstr ""
"1. Utilice las extensiones de navegador Braavos o Argent X para crear\n"
"   su smart wallet.\n"
"\n"
"2.  Siga las instrucciones proporcionadas para la billetera elegida (Argent o Braavos).\n"
"\n"
"3. Financia tu billetera con ETH. Utilice [Starknet Goerli\n"
"Faucet](https://faucet.goerli.starknet.io/) según sea necesario."

#: src/ch02-02-compile-deploy-interact.md:78
msgid "Now you’re ready to interact with Starknet smart contracts."
msgstr "Ahora está listo para interactuar con los smart contracts de Starknet."

#: src/ch02-02-compile-deploy-interact.md:80
msgid "### Creating a Signer"
msgstr "### Creando un Signer"

#: src/ch02-02-compile-deploy-interact.md:82
msgid ""
"The Signer is an essential smart contract capable of signing\n"
"transactions in Starknet. You’ll need the private key from your smart\n"
"wallet to create one, from which the public key can be derived."
msgstr ""
"El Signer es un contrato inteligente esencial capaz de firmar\n"
"transacciones en Starknet. Necesitará la clave privada de su smart\n"
"wallet para crear una, de la cual se puede derivar la clave pública."

#: src/ch02-02-compile-deploy-interact.md:86
msgid ""
"Starkli enables secure storage of your private key through a keystore\n"
"file. This encrypted file can be accessed using a password and is\n"
"generally stored in the default Starkli directory."
msgstr ""
"Starkli permite el almacenamiento seguro de su clave privada a través de un archivo\n"
"de almacén de claves (keystore). Se puede acceder a este archivo cifrado mediante una\n"
"contraseña y generalmente se almacena en el directorio predeterminado de Starkli."

#: src/ch02-02-compile-deploy-interact.md:90
msgid "First, create the default directory:"
msgstr "Primero, cree el directorio predeterminado:"

#: src/ch02-02-compile-deploy-interact.md:92
msgid ""
"```bash\n"
"    mkdir ~/.starkli-wallets/deployer -p\n"
"```"
msgstr ""
"```bash\n"
"    mkdir ~/.starkli-wallets/deployer -p\n"
"```"

#: src/ch02-02-compile-deploy-interact.md:96
msgid ""
"Then generate the keystore file. The signer command contains subcommands\n"
"for creating a keystore file from a private key or completely create a\n"
"new one. In this tutorial, we’ll use the private key option which is the\n"
"most common use case. You need to provide the path to the keystore file\n"
"you want to create. You can give any name to the keystore file, you will\n"
"likely have several wallets. In this tutorial, we will use the name\n"
"`my_keystore_ 1.json`."
msgstr ""
"Luego genere el archivo del keystore. El comando del signer contiene subcomandos para crear un archivo de keystore a partir de una clave privada o crear uno completamente "
"nuevo. En este tutorial, usaremos la opción de clave privada, que es el caso de uso más común. Debe proporcionar la ruta al archivo del almacén de claves que desea crear. "
"Puede darle cualquier nombre al archivo del almacén de claves; probablemente tendrá varias billeteras. En este tutorial, usaremos el nombre `my_keystore_ 1.json`."

#: src/ch02-02-compile-deploy-interact.md:104
msgid ""
"```bash\n"
"    starkli signer keystore from-key ~/.starkli-wallets/deployer/my_keystore_1.json\n"
"    Enter private key:\n"
"    Enter password:\n"
"```"
msgstr ""
"```bash\n"
"    starkli signer keystore from-key ~/.starkli-wallets/deployer/my_keystore_1.json\n"
"    Enter private key:\n"
"    Enter password:\n"
"```"

#: src/ch02-02-compile-deploy-interact.md:110
msgid ""
"In the private key prompt, paste the private key of your smart wallet.\n"
"In the password prompt, enter a password of your choice. You will need\n"
"this password to sign transactions using Starkli."
msgstr ""
"En el mensaje de clave privada, pegue la clave privada de su billetera inteligente. En la solicitud de contraseña, ingrese la contraseña de su elección. Necesitará esta "
"contraseña para firmar transacciones utilizando Starkli."

#: src/ch02-02-compile-deploy-interact.md:114
msgid ""
"Export the private key from your Braavos or Argent wallet. For Argent X,\n"
"you can find it in the \"Settings\" section → Select your Account →\n"
"\"Export Private Key\". For Braavos, you can find it in the \"Settings\"\n"
"section → \"Privacy and Security\" → \"Export Private Key\"."
msgstr ""
"Exporte la clave privada desde su billetera Braavos o Argent. Para Argent X, puede encontrarlo en la sección\"Settings\" section → Select your Account → \"Export Private Key"
"\". Para Braavos, puede encontrarlo en la sección \"Settings\" section → \"Privacy and Security\" → \"Export Private Key\"."

#: src/ch02-02-compile-deploy-interact.md:119
msgid ""
"While knowing the private key of a smart wallet is necessary to sign\n"
"transactions, it’s not sufficient. We also need to inform Starkli about\n"
"the signing mechanism employed by our smart wallet created by Braavos or\n"
"Argent X. Does it use an elliptic curve? If yes, which one? This is the\n"
"reason why we need an account descriptor file."
msgstr ""
"Si bien es necesario conocer la clave privada de una billetera inteligente para firmar transacciones, no es suficiente. También debemos informar a Starkli sobre el mecanismo "
"de firma empleado por nuestra billetera inteligente creada por Braavos o Argent X. ¿Utiliza una curva elíptica? ¿Si sí, cual? Ésta es la razón por la que necesitamos un "
"archivo descriptor de cuenta."

#: src/ch02-02-compile-deploy-interact.md:125
msgid "#### [OPTIONAL] The Architecture of the Starknet Signer"
msgstr "#### [OPCIONAL] La arquitectura del Signer en Starknet"

#: src/ch02-02-compile-deploy-interact.md:127
msgid ""
"The Starknet Signer plays an instrumental role in securing your\n"
"transactions. Let’s demystify what goes on under the hood."
msgstr "Starknet Signer desempeña un papel fundamental a la hora de proteger sus transacciones. Desmitifiquemos lo que sucede bajo el capó."

#: src/ch02-02-compile-deploy-interact.md:130
msgid "Key Components:"
msgstr "Componentes Clave:"

#: src/ch02-02-compile-deploy-interact.md:132
msgid ""
"1.  **Private Key**: A 256-bit/32-byte/64-character (ignoring the _0x_\n"
"    prefix) hexadecimal key that is the cornerstone of your wallet’s\n"
"    security.\n"
"\n"
"2.  **Public Key**: Derived from the private key, it’s also a\n"
"    256-bit/32-byte/64-character hexadecimal key.\n"
"\n"
"3.  **Smart Wallet Address**: Unlike Ethereum, the address here is\n"
"    influenced by the public key, class hash, and a salt. **[Learn more\n"
"    in Starknet\n"
"    Documentation](https://docs.starknet.io/documentation/architecture_and_concepts/Smart_Contracts/contract-address/)**."
msgstr ""
"1. **Private Key**: una clave hexadecimal de 256 bits/32 bytes/64 caracteres (ignorando el prefijo _0x_) que es la piedra angular de la seguridad de su wallet.\n"
"\n"
"2. **Public Key**: Derivada de la clave privada, también es una clave hexadecimal de 256 bits/32 bytes/64 caracteres.\n"
"\n"
"3. **Dirección de la Smart Wallet**: A diferencia de Ethereum, la dirección aquí está influenciada por la publick key, el class hash y una salt. **[Obtenga más información "
"en la documentación de Starknet](https://docs.starknet.io/documentation/architecture_and_concepts/Smart_Contracts/contract-address/)**."

#: src/ch02-02-compile-deploy-interact.md:144
msgid "To view the details of the previously created keystore file:"
msgstr "Para ver los detalles del archivo de keystore creado anteriormente:"

#: src/ch02-02-compile-deploy-interact.md:146
msgid ""
"```bash\n"
"    cat ~/.starkli-wallets/deployer/my_keystore_1.json\n"
"```"
msgstr ""
"```bash\n"
"    cat ~/.starkli-wallets/deployer/my_keystore_1.json\n"
"```"

#: src/ch02-02-compile-deploy-interact.md:150
msgid "Anatomy of the `keystore.json` File:"
msgstr "Anatomía del archivo `keystore.json`:"

#: src/ch02-02-compile-deploy-interact.md:152
msgid ""
"```json\n"
"{\n"
"  \"crypto\": {\n"
"    \"cipher\": \"aes-128-ctr\",\n"
"    \"cipherparams\": {\n"
"      \"iv\": \"dba5f9a67456b121f3f486aa18e24db7\"\n"
"    },\n"
"    \"ciphertext\": \"b3cda3df39563e3dd61064149d6ed8c9ab5f07fbcd6347625e081fb695ddf36c\",\n"
"    \"kdf\": \"scrypt\",\n"
"    \"kdfparams\": {\n"
"      \"dklen\": 32,\n"
"      \"n\": 8192,\n"
"      \"p\": 1,\n"
"      \"r\": 8,\n"
"      \"salt\": \"6dd5b06b1077ba25a7bf511510ea0c608424c6657dd3ab51b93029244537dffb\"\n"
"    },\n"
"    \"mac\": \"55e1616d9ddd052864a1ae4207824baac58a6c88798bf28585167a5986585ce6\"\n"
"  },\n"
"  \"id\": \"afbb9007-8f61-4e62-bf14-e491c30fd09a\",\n"
"  \"version\": 3\n"
"}\n"
"```"
msgstr ""
"```json\n"
"{\n"
"  \"crypto\": {\n"
"    \"cipher\": \"aes-128-ctr\",\n"
"    \"cipherparams\": {\n"
"      \"iv\": \"dba5f9a67456b121f3f486aa18e24db7\"\n"
"    },\n"
"    \"ciphertext\": \"b3cda3df39563e3dd61064149d6ed8c9ab5f07fbcd6347625e081fb695ddf36c\",\n"
"    \"kdf\": \"scrypt\",\n"
"    \"kdfparams\": {\n"
"      \"dklen\": 32,\n"
"      \"n\": 8192,\n"
"      \"p\": 1,\n"
"      \"r\": 8,\n"
"      \"salt\": \"6dd5b06b1077ba25a7bf511510ea0c608424c6657dd3ab51b93029244537dffb\"\n"
"    },\n"
"    \"mac\": \"55e1616d9ddd052864a1ae4207824baac58a6c88798bf28585167a5986585ce6\"\n"
"  },\n"
"  \"id\": \"afbb9007-8f61-4e62-bf14-e491c30fd09a\",\n"
"  \"version\": 3\n"
"}\n"
"```"

#: src/ch02-02-compile-deploy-interact.md:175
msgid ""
"- **`version`**: The version of the smart wallet implementation.\n"
"\n"
"- **`id`**: A randomly generated identification string.\n"
"\n"
"- **`crypto`**: Houses all encryption details."
msgstr ""
"- **`version`**: La versión de la implementación de la billetera inteligente.\n"
"\n"
"- **`id`**: Una cadena de identificación generada aleatoriamente.\n"
"\n"
"- **`crypto`**: Alberga todos los detalles de cifrado."

#: src/ch02-02-compile-deploy-interact.md:181
msgid "Inside **`crypto`**:"
msgstr "Dentro de **`crypto`**:"

#: src/ch02-02-compile-deploy-interact.md:183
msgid ""
"- **`cipher`**: Specifies the encryption algorithm used, which in this\n"
"  case is AES-128-CTR.\n"
"\n"
"  - **AES (Advanced Encryption Standard)**: A globally accepted\n"
"    encryption standard.\n"
"\n"
"  - **128**: Refers to the key size in bits, making it a 128-bit\n"
"    key.\n"
"\n"
"  - **CTR (Counter Mode)**: A specific mode of operation for the AES\n"
"    cipher.\n"
"\n"
"- **`cipherparams`**: Contains an Initialization Vector (IV), which\n"
"  ensures that encrypting the same plaintext with the same key will\n"
"  produce different ciphertexts.\n"
"\n"
"  - **`iv` (Initialization Vector)**: A 16-byte hex string that\n"
"    serves as a random and unique starting point for each encryption\n"
"    operation.\n"
"\n"
"- **`ciphertext`**: This is the private key after encryption, securely\n"
"  stored so that only the correct password can reveal it.\n"
"\n"
"- **`kdf` and `kdfparams`**: KDF stands for Key Derivation Function.\n"
"  This adds a layer of security by requiring computational work,\n"
"  making brute-force attacks harder.\n"
"\n"
"  - **`dklen`**: The length (in bytes) of the derived key. Typically\n"
"    32 bytes.\n"
"\n"
"  - **`n`**: A cost factor representing CPU/memory usage. A higher\n"
"    value means more computational work is needed, thus increasing\n"
"    security.\n"
"\n"
"  - **`p`**: Parallelization factor, affecting the computational\n"
"    complexity.\n"
"\n"
"  - **`r`**: Block size for the hash function, again affecting\n"
"    computational requirements.\n"
"\n"
"  - **`salt`**: A random value that is combined with the password to\n"
"    deter dictionary attacks.\n"
"\n"
"- **`mac` (Message Authentication Code)**: This is a cryptographic\n"
"  code that ensures the integrity of the message (the encrypted\n"
"  private key in this case). It is generated using a hash of both the\n"
"  ciphertext and a portion of the derived key."
msgstr ""
"- **`cipher`**: Especifica el algoritmo de cifrado utilizado, que en este caso es AES-128-CTR.\n"
"\n"
"   - **AES (Estándar de cifrado avanzado)**: Un estándar de cifrado aceptado globalmente.\n"
"\n"
"   - **128**: Hace referencia al tamaño de la clave en bits, por lo que es una clave de 128 bits.\n"
"\n"
"   - **CTR (Modo Contador)**: Un modo de operación específico para el cifrado AES.\n"
"\n"
"- **`cipherparams`**: Contiene un vector de inicialización (IV), que garantiza que cifrar el mismo texto sin formato con la misma clave producirá textos cifrados "
"diferentes.\n"
"\n"
"   - **`iv` (Vector de inicialización)**: Una cadena hexadecimal de 16 bytes que sirve como punto de partida aleatorio y único para cada operación de cifrado.\n"
"\n"
"- **`ciphertext`**: Esta es la clave privada después del cifrado, almacenada de forma segura para que solo la contraseña correcta pueda revelarla.\n"
"\n"
"- **`kdf` y `kdfparams`**: KDF significa Función de derivación de claves. Esto añade una capa de seguridad al requerir trabajo computacional,\n"
"   haciendo que los ataques de fuerza bruta sean más difíciles.\n"
"\n"
"   - **`dklen`**: La longitud (en bytes) de la clave derivada. Normalmente 32 bytes.\n"
"\n"
"   - **`n`**: un factor de costo que representa el uso de CPU/memoria. Un valor más alto significa que se necesita más trabajo computacional, lo que aumenta la seguridad.\n"
"\n"
"   - **`p`**: Factor de paralelización, que afecta la complejidad computacional.\n"
"\n"
"   - **`r`**: Tamaño de bloque para la función hash, lo que nuevamente afecta los requisitos computacionales.\n"
"\n"
"   - **`salt`**: Un valor aleatorio que se combina con la contraseña para disuadir ataques de diccionario.\n"
"\n"
"- **`mac` (Código de autenticación de mensaje)**: Este es un código criptográfico que asegura la integridad del mensaje (el mensaje cifrado\n"
"   clave privada en este caso). Se genera utilizando un hash tanto del texto cifrado como de una parte de la clave derivada."

#: src/ch02-02-compile-deploy-interact.md:231
msgid "### Creating an Account Descriptor"
msgstr "### Creación de un Descriptor de Cuenta"

#: src/ch02-02-compile-deploy-interact.md:233
msgid ""
"An Account Descriptor informs Starkli about your smart wallet’s unique\n"
"features, such as its signing mechanism. You can generate this\n"
"descriptor using Starkli’s `fetch` subcommand under the `account`\n"
"command. The `fetch` subcommand takes your on-chain wallet address as\n"
"input and generates the account descriptor file. The account descriptor\n"
"file is a JSON file that contains the details of your smart wallet."
msgstr ""
"Un Descriptor de cuenta informa a Starkli sobre las características únicas de su billetera inteligente, como su mecanismo de firma. Puede generar este descriptor utilizando "
"el subcomando`fetch`  de Starkli bajo el comando `account`. El subcomando `fetch` toma la dirección de su billetera en cadena como entrada y genera el archivo descriptor de "
"la cuenta. El archivo descriptor de cuenta es un archivo JSON que contiene los detalles de su billetera inteligente."

#: src/ch02-02-compile-deploy-interact.md:240
msgid ""
"```bash\n"
"    starkli account fetch <SMART_WALLET_ADDRESS> --output ~/.starkli-wallets/deployer/my_account_1.json\n"
"```"
msgstr ""
"```bash\n"
"    starkli account fetch <SMART_WALLET_ADDRESS> --output ~/.starkli-wallets/deployer/my_account_1.json\n"
"```"

#: src/ch02-02-compile-deploy-interact.md:244
msgid ""
"After running the command, you’ll see a message like the one below.\n"
"We’re using a Braavos wallet as an example, but the steps are the same\n"
"for an Argent wallet."
msgstr ""
"Después de ejecutar el comando, verá un mensaje como el siguiente. Estamos usando una billetera Braavos como ejemplo, pero los pasos son los mismos para una billetera Argent."

#: src/ch02-02-compile-deploy-interact.md:248
msgid ""
"```bash\n"
"    Account contract type identified as: Braavos\n"
"    Description: Braavos official proxy account\n"
"    Downloaded new account config file: ~/.starkli-wallets/deployer/my_account_1.json\n"
"```"
msgstr ""
"```bash\n"
"    Account contract type identified as: Braavos\n"
"    Description: Braavos official proxy account\n"
"    Downloaded new account config file: ~/.starkli-wallets/deployer/my_account_1.json\n"
"```"

#: src/ch02-02-compile-deploy-interact.md:254
msgid "To see the details of your Account Descriptor, run:"
msgstr "Para ver los detalles de su Descriptor de Cuenta, ejecute:"

#: src/ch02-02-compile-deploy-interact.md:256
msgid ""
"```bash\n"
"    cat ~/.starkli-wallets/deployer/my_account_1.json\n"
"```"
msgstr ""
"```bash\n"
"    cat ~/.starkli-wallets/deployer/my_account_1.json\n"
"```"

#: src/ch02-02-compile-deploy-interact.md:260
msgid "Here’s what a typical descriptor might look like:"
msgstr "Así es como podría verse un descriptor típico:"

#: src/ch02-02-compile-deploy-interact.md:262
msgid ""
"```json\n"
"{\n"
"  \"version\": 1,\n"
"  \"variant\": {\n"
"    \"type\": \"braavos\",\n"
"    \"version\": 1,\n"
"    \"implementation\": \"0x5dec330eebf36c8672b60db4a718d44762d3ae6d1333e553197acb47ee5a062\",\n"
"    \"multisig\": {\n"
"      \"status\": \"off\"\n"
"    },\n"
"    \"signers\": [\n"
"      {\n"
"        \"type\": \"stark\",\n"
"        \"public_key\": \"0x49759ed6197d0d385a96f9d8e7af350848b07777e901f5570b3dc2d9744a25e\"\n"
"      }\n"
"    ]\n"
"  },\n"
"  \"deployment\": {\n"
"    \"status\": \"deployed\",\n"
"    \"class_hash\": \"0x3131fa018d520a037686ce3efddeab8f28895662f019ca3ca18a626650f7d1e\",\n"
"    \"address\": \"0x6dcb489c1a93069f469746ef35312d6a3b9e56ccad7f21f0b69eb799d6d2821\"\n"
"  }\n"
"}\n"
"```"
msgstr ""
"```json\n"
"{\n"
"  \"version\": 1,\n"
"  \"variant\": {\n"
"    \"type\": \"braavos\",\n"
"    \"version\": 1,\n"
"    \"implementation\": \"0x5dec330eebf36c8672b60db4a718d44762d3ae6d1333e553197acb47ee5a062\",\n"
"    \"multisig\": {\n"
"      \"status\": \"off\"\n"
"    },\n"
"    \"signers\": [\n"
"      {\n"
"        \"type\": \"stark\",\n"
"        \"public_key\": \"0x49759ed6197d0d385a96f9d8e7af350848b07777e901f5570b3dc2d9744a25e\"\n"
"      }\n"
"    ]\n"
"  },\n"
"  \"deployment\": {\n"
"    \"status\": \"deployed\",\n"
"    \"class_hash\": \"0x3131fa018d520a037686ce3efddeab8f28895662f019ca3ca18a626650f7d1e\",\n"
"    \"address\": \"0x6dcb489c1a93069f469746ef35312d6a3b9e56ccad7f21f0b69eb799d6d2821\"\n"
"  }\n"
"}\n"
"```"

#: src/ch02-02-compile-deploy-interact.md:287
msgid "Note: The structure will differ if you use an Argent wallet."
msgstr "Note: The structure will differ if you use an Argent wallet."

#: src/ch02-02-compile-deploy-interact.md:289
msgid "## Setting up Environment Variables"
msgstr "## Configuración de Variables de Entorno"

#: src/ch02-02-compile-deploy-interact.md:291
msgid ""
"To simplify Starkli commands, you can set environment variables. Two key\n"
"variables are crucial: one for the Signer’s keystore file location and\n"
"another for the Account Descriptor file."
msgstr ""
"Para simplificar los comandos de Starkli, puede configurar variables de entorno. Dos variables clave son cruciales: una para la ubicación del archivo del keystore del "
"firmante y otra para el archivo del descriptor de cuenta."

#: src/ch02-02-compile-deploy-interact.md:295
msgid ""
"```bash\n"
"    export STARKNET_ACCOUNT=~/.starkli-wallets/deployer/my_account_1.json\n"
"    export STARKNET_KEYSTORE=~/.starkli-wallets/deployer/my_keystore_1.json\n"
"```"
msgstr ""
"```bash\n"
"    export STARKNET_ACCOUNT=~/.starkli-wallets/deployer/my_account_1.json\n"
"    export STARKNET_KEYSTORE=~/.starkli-wallets/deployer/my_keystore_1.json\n"
"```"

#: src/ch02-02-compile-deploy-interact.md:300
msgid ""
"Setting these variables makes running Starkli commands easier and more\n"
"efficient."
msgstr "Configurar estas variables hace que la ejecución de comandos Starkli sea más fácil y eficiente."

#: src/ch02-02-compile-deploy-interact.md:303
msgid "## Declaring Smart Contracts in Starknet"
msgstr "## Declarando Smart Contracts en Starknet"

#: src/ch02-02-compile-deploy-interact.md:305
msgid "Deploying a smart contract on Starknet involves two steps:"
msgstr "Implementar un contrato inteligente en Starknet implica dos pasos:"

#: src/ch02-02-compile-deploy-interact.md:307
msgid ""
"- Declare your contract’s code.\n"
"\n"
"- Deploy an instance of the declared code."
msgstr ""
"- Declara el código de tu contrato.\n"
"\n"
"- Implementar una instancia del código declarado."

#: src/ch02-02-compile-deploy-interact.md:311
msgid ""
"To get started, navigate to the `contracts/` directory in the [first\n"
"chapter](https://github.com/starknet-edu/starknetbook/tree/main/chapters/book/modules/chapter_1/pages/contracts)\n"
"of the Starknet Book repo. The `src/lib.cairo` file contains a basic\n"
"contract to practice with."
msgstr ""
"Para comenzar, navegue hasta el directorio `contracts/` en el [primer capítulo](https://github.com/starknet-edu/starknetbook/tree/main/chapters/book/modules/chapter_1/pages/"
"contracts)\n"
"del repositorio de Starknet Book. El archivo `src/lib.cairo` contiene un contrato básico para practicar."

#: src/ch02-02-compile-deploy-interact.md:316
msgid ""
"First, compile the contract using the Scarb compiler. If you haven’t\n"
"installed Scarb, follow the installation guide in the [Setting up your\n"
"Environment](https://book.starknet.io/chapter_1/environment_setup.html)\n"
"section."
msgstr ""
"Primero, compila el contrato usando el compilador Scarb. Si no ha instalado Scarb, siga la guía de instalación en la sección [Configuración de su entorno] (https://book."
"starknet.io/chapter_1/environment_setup.html)."

#: src/ch02-02-compile-deploy-interact.md:321
msgid ""
"```bash\n"
"    scarb build\n"
"```"
msgstr ""
"```bash\n"
"    scarb build\n"
"```"

#: src/ch02-02-compile-deploy-interact.md:325
msgid ""
"This creates a compiled contract in `target/dev/` as\n"
"\"contracts_Ownable.sierra.json\" (in Chapter 2 of the book we will learn\n"
"more details about Scarb)."
msgstr "Esto crea un contrato compilado en `target/dev/` como \"contracts_Ownable.sierra.json\" (en el Capítulo 2 del libro aprenderemos más detalles sobre Scarb)."

#: src/ch02-02-compile-deploy-interact.md:329
msgid ""
"With the smart contract compiled, we’re ready to declare it using\n"
"Starkli. Before declaring your contract, decide on an RPC provider."
msgstr "Con el contrato inteligente compilado, estamos listos para declararlo usando Starkli. Antes de declarar su contrato, decida cuál es un proveedor de RPC."

#: src/ch02-02-compile-deploy-interact.md:332
msgid "### Choosing an RPC Provider"
msgstr "### Elegir un Proveedor de RPC"

#: src/ch02-02-compile-deploy-interact.md:334
msgid "There are three main options for RPC providers, sorted by ease of use:"
msgstr "Hay tres opciones principales para los proveedores de RPC, ordenadas por facilidad de uso:"

#: src/ch02-02-compile-deploy-interact.md:336
msgid ""
"1.  **Starknet Sequencer’s Gateway**: The quickest option and it’s the\n"
"    default for Starkli for now. The sequencer gateway is deprecated and\n"
"    will be disabled by StarkWare soon. You’re strongly recommended to\n"
"    use a third-party JSON-RPC API provider like Infura, Alchemy, or\n"
"    Chainstack.\n"
"\n"
"2.  **Infura or Alchemy**: A step up in complexity. You’ll need to set\n"
"    up an API key and choose an endpoint. For Infura, it would look like\n"
"    `https://starknet-goerli.infura.io/v3/<API_KEY>`. Learn more in the\n"
"    [Infura\n"
"    documentation](https://docs.infura.io/networks/starknet/how-to/choose-a-network).\n"
"\n"
"3.  **Your Own Node**: For those who want full control. It’s the most\n"
"    complex but offers the most freedom. Check out [Chapter 4 of the\n"
"    Starknet Book](https://book.starknet.io/chapter_4/node.html) or\n"
"    [Kasar](https://www.kasar.io/) for setup guides."
msgstr ""
"1. **Starknet Sequencer's Gateway**: La opción más rápida y es la predeterminada para Starkli por ahora. La puerta de enlace del secuenciador está obsoleta y StarkWare la "
"desactivará pronto. Se recomienda encarecidamente utilizar un proveedor de API JSON-RPC de terceros como Infura, Alchemy o Chainstack.\n"
"\n"
"2. **Infura o Alchemy**: Un paso adelante en complejidad. Deberá configurar una clave API y elegir un punto final. Para Infura, se vería así `https://starknet-goerli.infura."
"io/v3/<API_KEY>`. Obtenga más información en la [documentación de Infura](https://docs.infura.io/networks/starknet/how-to/choose-a-network).\n"
"\n"
"3. **Tu propio nodo**: Para aquellos que quieren control total. Es el más complejo pero ofrece la mayor libertad. Consulte el [Capítulo 4 del libro Starknet](https://book."
"starknet.io/chapter_4/node.html) o [Kasar](https://www.kasar.io/) para obtener guías de configuración."

#: src/ch02-02-compile-deploy-interact.md:353
msgid ""
"In this tutorial, we will use Alchemy. We can set the STARKNET_RPC\n"
"environment variable to make command invocations easier:"
msgstr "En este tutorial, usaremos Alchemy. Podemos configurar la variable de entorno STARKNET_RPC para facilitar las invocaciones de comandos:"

#: src/ch02-02-compile-deploy-interact.md:356
msgid ""
"```bash\n"
"    export STARKNET_RPC=\"https://starknet-goerli.g.alchemy.com/v2/<API_KEY>\"\n"
"```"
msgstr ""
"```bash\n"
"    export STARKNET_RPC=\"https://starknet-goerli.g.alchemy.com/v2/<API_KEY>\"\n"
"```"

#: src/ch02-02-compile-deploy-interact.md:360
msgid "### Declaring Your Contract"
msgstr "### Declarando su Contrato"

#: src/ch02-02-compile-deploy-interact.md:362
msgid ""
"Run this command to declare your contract using the default Starknet\n"
"Sequencer’s Gateway:"
msgstr "Ejecute este comando para declarar su contrato utilizando la puerta de enlace predeterminada del secuenciador Starknet:"

#: src/ch02-02-compile-deploy-interact.md:365
msgid ""
"```bash\n"
"    starkli declare target/dev/contracts_Ownable.sierra.json\n"
"```"
msgstr ""
"```bash\n"
"    starkli declare target/dev/contracts_Ownable.sierra.json\n"
"```"

#: src/ch02-02-compile-deploy-interact.md:369
msgid ""
"According to the `STARKNET_RPC` url, starkli can recognize the target\n"
"blockchain network, in this case \"goerli\", so it is not necessary\n"
"explicitly specify it."
msgstr "Según la URL `STARKNET_RPC`, starkli puede reconocer la red blockchain de destino, en este caso \"goerli\", por lo que no es necesario especificarla explícitamente."

#: src/ch02-02-compile-deploy-interact.md:373
msgid ""
"Unless you’re working with custom networks where it’s infeasible for\n"
"Starkli to detect the right compiler version, you shouldn’t need to\n"
"manually choose a version with `--network` and `--compiler-version`."
msgstr ""
"A menos que esté trabajando con redes personalizadas donde a Starkli no le resulta factible detectar la versión correcta del compilador, no debería necesitar elegir "
"manualmente una versión con `--network` y `--compiler-version`."

#: src/ch02-02-compile-deploy-interact.md:377
msgid ""
"If you encounter an \"Error: Invalid contract class,\" it likely means\n"
"your Scarb’s compiler version is incompatible with Starkli. Follow the\n"
"steps above to align the versions. Starkli usually supports compiler\n"
"versions accepted by mainnet, even if Scarb’s latest version is not yet\n"
"compatible."
msgstr ""
"Si encuentra un \"Error: Invalid contract class\", probablemente significa que la versión del compilador de Scarb no es compatible con Starkli. Siga los pasos anteriores "
"para alinear las versiones. Starkli generalmente admite versiones de compiladores aceptadas por la red principal, incluso si la última versión de Scarb aún no es compatible."

#: src/ch02-02-compile-deploy-interact.md:383
msgid ""
"After running the command, you’ll receive a contract class hash. This\n"
"unique hash serves as the identifier for your contract class within\n"
"Starknet. For example:"
msgstr ""
"Después de ejecutar el comando, recibirá un hash de clase de contrato. Este hash único sirve como identificador de su clase de contrato (contract class) dentro de Starknet. "
"Por ejemplo:"

#: src/ch02-02-compile-deploy-interact.md:387
msgid ""
"```bash\n"
"    Class hash declared: 0x04c70a75f0246e572aa2e1e1ec4fffbe95fa196c60db8d5677a5c3a3b5b6a1a8\n"
"```"
msgstr ""
"```bash\n"
"    Class hash declared: 0x04c70a75f0246e572aa2e1e1ec4fffbe95fa196c60db8d5677a5c3a3b5b6a1a8\n"
"```"

#: src/ch02-02-compile-deploy-interact.md:391
msgid ""
"You can think of this hash as the contract class’s _address._ Use a\n"
"block explorer like\n"
"[StarkScan](https://testnet.starkscan.co/class/0x04c70a75f0246e572aa2e1e1ec4fffbe95fa196c60db8d5677a5c3a3b5b6a1a8)\n"
"to verify this hash on the blockchain."
msgstr ""
"Puede considerar este hash como la dirección de la clase de contrato. Utilice un explorador de bloques como [StarkScan](https://testnet.starkscan.co/"
"class/0x04c70a75f0246e572aa2e1e1ec4fffbe95fa196c60db8d5677a5c3a3b5b6a1a8) para verificar este hash en la cadena de bloques."

#: src/ch02-02-compile-deploy-interact.md:396
msgid ""
"If the contract class you’re attempting to declare already exists, it is\n"
"ok we can continue. You’ll receive a message like:"
msgstr "Si la contract class que intenta declarar ya existe, está bien, podemos continuar. Recibirás un mensaje como:"

#: src/ch02-02-compile-deploy-interact.md:399
msgid ""
"```bash\n"
"    Not declaring class as its already declared. Class hash:\n"
"    0x04c70a75f0246e572aa2e1e1ec4fffbe95fa196c60db8d5677a5c3a3b5b6a1a8\n"
"```"
msgstr ""
"```bash\n"
"    Not declaring class as its already declared. Class hash:\n"
"    0x04c70a75f0246e572aa2e1e1ec4fffbe95fa196c60db8d5677a5c3a3b5b6a1a8\n"
"```"

#: src/ch02-02-compile-deploy-interact.md:404
msgid "## Deploying Smart Contracts on Starknet"
msgstr "## Implementación de Smart Contracts en Starknet"

#: src/ch02-02-compile-deploy-interact.md:406
msgid ""
"To deploy a smart contract, you’ll need to instantiate it on Starknet’s\n"
"testnet. This process involves executing a command that requires two\n"
"main components:"
msgstr ""
"Para implementar un contrato inteligente, deberá crear una instancia del mismo en la red de prueba de Starknet. Este proceso implica ejecutar un comando que requiere dos "
"componentes principales:"

#: src/ch02-02-compile-deploy-interact.md:410
msgid ""
"1.  The class hash of your smart contract.\n"
"\n"
"2.  Any constructor arguments that the contract expects."
msgstr ""
"1. El class hash de tu contrato inteligente.\n"
"\n"
"2. Cualquier argumento del constructor que el contrato espera."

#: src/ch02-02-compile-deploy-interact.md:414
msgid ""
"In our example, the constructor expects an _owner_ address. You can\n"
"learn more about constructors in \\[Chapter 12 of The Cairo\n"
"Book\\](<https://book.cairo-lang.org/ch99-01-03-02-contract-functions.html?highlight=constructor#1-constructors>)."
msgstr ""
"En nuestro ejemplo, el constructor espera una dirección de _owner_. Puede obtener más información sobre los constructores en el \\[Capítulo 12 del Libro de Cairo\\](<https://"
"book.cairo-lang.org/ch99-01-03-02-contract-functions.html?highlight=constructor#1 -constructores>)."

#: src/ch02-02-compile-deploy-interact.md:418
msgid "The command would look like this:"
msgstr "El comando se vería así:"

#: src/ch02-02-compile-deploy-interact.md:420
msgid ""
"```bash\n"
"    starkli deploy \\\n"
"        <CLASS_HASH> \\\n"
"        <CONSTRUCTOR_INPUTS>\n"
"```"
msgstr ""
"```bash\n"
"    starkli deploy \\\n"
"        <CLASS_HASH> \\\n"
"        <CONSTRUCTOR_INPUTS>\n"
"```"

#: src/ch02-02-compile-deploy-interact.md:426
msgid ""
"Here’s a specific example with an actual class hash and constructor\n"
"inputs (as the owner address use the address of your smart wallet so you\n"
"can invoke the transfer_ownership function later):"
msgstr ""
"Aquí hay un ejemplo específico con un class hash real y entradas de constructor (como dirección del owner, use la dirección de su billetera inteligente para poder invocar la "
"función transfer_ownership más adelante):"

#: src/ch02-02-compile-deploy-interact.md:430
msgid ""
"```bash\n"
"    starkli deploy \\\n"
"        0x04c70a75f0246e572aa2e1e1ec4fffbe95fa196c60db8d5677a5c3a3b5b6a1a8 \\\n"
"        0x02cdAb749380950e7a7c0deFf5ea8eDD716fEb3a2952aDd4E5659655077B8510\n"
"```"
msgstr ""
"```bash\n"
"    starkli deploy \\\n"
"        0x04c70a75f0246e572aa2e1e1ec4fffbe95fa196c60db8d5677a5c3a3b5b6a1a8 \\\n"
"        0x02cdAb749380950e7a7c0deFf5ea8eDD716fEb3a2952aDd4E5659655077B8510\n"
"```"

#: src/ch02-02-compile-deploy-interact.md:436
msgid ""
"After executing the command and entering your password, you should see\n"
"output like the following:"
msgstr "Después de ejecutar el comando e ingresar su contraseña, debería ver un resultado como el siguiente:"

#: src/ch02-02-compile-deploy-interact.md:439
msgid ""
"```bash\n"
"    Deploying class 0x04c70a75f0246e572aa2e1e1ec4fffbe95fa196c60db8d5677a5c3a3b5b6a1a8 with salt 0x065034b27a199cbb2a5b97b78a8a6a6c6edd027c7e398b18e5c0e5c0c65246b7...\n"
"    The contract will be deployed at address 0x02a83c32d4b417d3c22f665acbc10e9a1062033b9ab5b2c3358952541bc6c012\n"
"    Contract deployment transaction: 0x0743de1e233d38c4f3e9fb13f1794276f7d4bf44af9eac66e22944ad1fa85f14\n"
"    Contract deployed:\n"
"    0x02a83c32d4b417d3c22f665acbc10e9a1062033b9ab5b2c3358952541bc6c012\n"
"```"
msgstr ""
"```bash\n"
"    Deploying class 0x04c70a75f0246e572aa2e1e1ec4fffbe95fa196c60db8d5677a5c3a3b5b6a1a8 with salt 0x065034b27a199cbb2a5b97b78a8a6a6c6edd027c7e398b18e5c0e5c0c65246b7...\n"
"    The contract will be deployed at address 0x02a83c32d4b417d3c22f665acbc10e9a1062033b9ab5b2c3358952541bc6c012\n"
"    Contract deployment transaction: 0x0743de1e233d38c4f3e9fb13f1794276f7d4bf44af9eac66e22944ad1fa85f14\n"
"    Contract deployed:\n"
"    0x02a83c32d4b417d3c22f665acbc10e9a1062033b9ab5b2c3358952541bc6c012\n"
"```"

#: src/ch02-02-compile-deploy-interact.md:447
msgid ""
"The contract is now live on the Starknet testnet. You can verify its\n"
"status using a block explorer like\n"
"[StarkScan](https://testnet.starkscan.co/contract/0x02a83c32d4b417d3c22f665acbc10e9a1062033b9ab5b2c3358952541bc6c012).\n"
"On the \"Read/Write Contract\" tab, you’ll see the contract’s external\n"
"functions."
msgstr ""
"El contrato ya está activo en la red de prueba de Starknet. Puede verificar su estado utilizando un explorador de bloques como [StarkScan](https://testnet.starkscan.co/"
"contract/0x02a83c32d4b417d3c22f665acbc10e9a1062033b9ab5b2c3358952541bc6c012). En la pestaña \"Read/Write Contract\", verá las funciones externas del contrato."

#: src/ch02-02-compile-deploy-interact.md:453
msgid "## Interacting with the Starknet Contract"
msgstr "## Interactuando con el Contrato Starknet"

#: src/ch02-02-compile-deploy-interact.md:455
msgid ""
"Starkli enables interaction with smart contracts via two primary\n"
"methods: `call` for read-only functions and `invoke` for write functions\n"
"that modify the state."
msgstr ""
"Starkli permite la interacción con contratos inteligentes a través de dos métodos principales:  `call` para funciones de solo lectura e invoke`para funciones de escritura "
"que modifican el estado."

#: src/ch02-02-compile-deploy-interact.md:459
msgid "### Calling a Read Function"
msgstr "### Llamar a una Función de Lectura"

#: src/ch02-02-compile-deploy-interact.md:461
msgid ""
"The `call` command enables you to query a smart contract function\n"
"without sending a transaction. For instance, to find out who the current\n"
"owner of the contract is, you can use the `get_owner` function, which\n"
"requires no arguments."
msgstr ""
"El comando `call` le permite consultar una función de contrato inteligente sin enviar una transacción. Por ejemplo, para saber quién es el propietario actual del contrato, "
"puede utilizar la función `get_owner`, que no requiere argumentos."

#: src/ch02-02-compile-deploy-interact.md:466 src/ch02-02-compile-deploy-interact.md:523
msgid ""
"```bash\n"
"    starkli call \\\n"
"        <CONTRACT_ADDRESS> \\\n"
"        get_owner\n"
"```"
msgstr ""
"```bash\n"
"    starkli call \\\n"
"        <CONTRACT_ADDRESS> \\\n"
"        get_owner\n"
"```"

#: src/ch02-02-compile-deploy-interact.md:472
msgid ""
"Replace `<CONTRACT_ADDRESS>` with the address of your contract. The\n"
"command will return the owner’s address, which was initially set during\n"
"the contract’s deployment:"
msgstr ""
"Reemplace `<CONTRACT_ADDRESS>` con la dirección de su contrato. El comando devolverá la dirección del owner, que se estableció inicialmente durante la implementación del "
"contrato:"

#: src/ch02-02-compile-deploy-interact.md:476
msgid ""
"```bash\n"
"    [\n"
"        \"0x02cdab749380950e7a7c0deff5ea8edd716feb3a2952add4e5659655077b8510\"\n"
"    ]\n"
"```"
msgstr ""
"```bash\n"
"    [\n"
"        \"0x02cdab749380950e7a7c0deff5ea8edd716feb3a2952add4e5659655077b8510\"\n"
"    ]\n"
"```"

#: src/ch02-02-compile-deploy-interact.md:482
msgid "## Invoking a Write Function"
msgstr "## Invocar una Función de Escritura"

#: src/ch02-02-compile-deploy-interact.md:484
msgid ""
"You can modify the contract’s state using the `invoke` command. For\n"
"example, let’s transfer the contract’s ownership with the\n"
"`transfer_ownership` function."
msgstr "Puede modificar el estado del contrato utilizando el comando`invoke`. Por ejemplo, transfiramos la propiedad del contrato con la función `transfer_ownership`."

#: src/ch02-02-compile-deploy-interact.md:488
msgid ""
"```bash\n"
"    starkli invoke \\\n"
"        <CONTRACT_ADDRESS> \\\n"
"        transfer_ownership \\\n"
"        <NEW_OWNER_ADDRESS>\n"
"```"
msgstr ""
"```bash\n"
"    starkli invoke \\\n"
"        <CONTRACT_ADDRESS> \\\n"
"        transfer_ownership \\\n"
"        <NEW_OWNER_ADDRESS>\n"
"```"

#: src/ch02-02-compile-deploy-interact.md:495
msgid ""
"Replace `<CONTRACT_ADDRESS>` with the address of the contract and\n"
"`<NEW_OWNER_ADDRESS>` with the address you want to transfer ownership\n"
"to. If the smart wallet you’re using isn’t the contract’s owner, an\n"
"error will appear. Note that the initial owner was set when deploying\n"
"the contract:"
msgstr ""
"Reemplace `<CONTRACT_ADDRESS>` con la dirección del contrato y `<NEW_OWNER_ADDRESS>` con la dirección a la que desea transferir la propiedad. Si la billetera inteligente que "
"está utilizando no es la propietaria del contrato, aparecerá un error. Tenga en cuenta que el propietario inicial se estableció al implementar el contrato:"

#: src/ch02-02-compile-deploy-interact.md:501
msgid ""
"```bash\n"
"    Execution was reverted; failure reason: [0x43616c6c6572206973206e6f7420746865206f776e6572].\n"
"```"
msgstr ""
"```bash\n"
"    Execution was reverted; failure reason: [0x43616c6c6572206973206e6f7420746865206f776e6572].\n"
"```"

#: src/ch02-02-compile-deploy-interact.md:505
msgid ""
"The failure reason is encoded as a felt. o decode it, use the starkli’s\n"
"`parse-cairo-string` command."
msgstr "El motivo del fracaso está codificado como un sentimiento. Para decodificarlo, use el comando `parse-cairo-string` de starkli."

#: src/ch02-02-compile-deploy-interact.md:508
msgid ""
"```bash\n"
"    starkli parse-cairo-string <ENCODED_ERROR>\n"
"```"
msgstr ""
"```bash\n"
"    starkli parse-cairo-string <ENCODED_ERROR>\n"
"```"

#: src/ch02-02-compile-deploy-interact.md:512
msgid ""
"For example, if you see\n"
"`0x43616c6c6572206973206e6f7420746865206f776e6572`, decoding it will\n"
"yield \"Caller is not the owner.\""
msgstr "Por ejemplo, si ve `0x43616c6c6572206973206e6f7420746865206f776e6572`, al decodificarlo se obtendrá \"Caller is not the owner.\""

#: src/ch02-02-compile-deploy-interact.md:516
msgid ""
"After a successful transaction on L2, use a block explorer like\n"
"StarkScan or Voyager to confirm the transaction status using the hash\n"
"provided by the `invoke` command."
msgstr ""
"Después de una transacción exitosa en L2, use un explorador de bloques como StarkScan o Voyager para confirmar el estado de la transacción usando el hash proporcionado por "
"el comando`invoke`."

#: src/ch02-02-compile-deploy-interact.md:520
msgid ""
"To verify that the ownership has successfully transferred, you can call\n"
"the `get_owner` function again:"
msgstr "Para verificar que la propiedad se haya transferido exitosamente, puedes volver a llamar a la función `get_owner`:"

#: src/ch02-02-compile-deploy-interact.md:529
msgid ""
"If the function returns the new owner’s address, the transfer was\n"
"successful."
msgstr "Si la función devuelve la dirección del nuevo propietario, la transferencia fue exitosa."

#: src/ch02-02-compile-deploy-interact.md:532
msgid ""
"Congratulations! You’ve successfully deployed and interacted with a\n"
"Starknet contract."
msgstr "¡Felicidades! Ha implementado e interactuado con éxito con un contrato Starknet."

#: src/ch02-03-scarb.md:1
msgid "# Scarb: The Package Manager"
msgstr "# Scarb: El Administrador de Paquetes"

#: src/ch02-03-scarb.md:12
msgid ""
"Scarb is Cairo’s package manager designed for both Cairo and Starknet\n"
"projects. It handles dependencies, compiles projects, and integrates\n"
"with tools like Foundry. It is built by the same team that created\n"
"Foundry for Starknet."
msgstr ""
"Scarb es el administrador de paquetes de Cairo diseñado para proyectos de Cairo y Starknet. Maneja dependencias, compila proyectos y se integra con herramientas como "
"Foundry. Está construido por el mismo equipo que creó Foundry para Starknet."

#: src/ch02-03-scarb.md:17
msgid "# Scarb Workflow"
msgstr "# Scarb Workflow"

#: src/ch02-03-scarb.md:19
msgid "Follow these steps to develop a Starknet contract using Scarb:"
msgstr "Siga estos pasos para desarrollar un contrato Starknet usando Scarb:"

#: src/ch02-03-scarb.md:21
msgid ""
"1.  **Initialize:** Use `scarb new` to set up a new project, generating\n"
"    a `Scarb.toml` file and initial `src/lib.cairo`.\n"
"\n"
"2.  **Code:** Add your Cairo code in the `src` directory.\n"
"\n"
"3.  **Dependencies:** Add external libraries using `scarb add`.\n"
"\n"
"4.  **Compile:** Execute `scarb build` to convert your contract into\n"
"    Sierra code."
msgstr ""
"1. **Inicializar:** Utilice `scarb new` para configurar un nuevo proyecto, generando un archivo `Scarb.toml` y un `src/lib.cairo` inicial.\n"
"\n"
"2. **Código:** Agregue su código de Cairo en el directorio `src`.\n"
"\n"
"3. **Dependencias:** Agregue bibliotecas externas usando `scarb add`.\n"
"\n"
"4. **Compilar:** Ejecute `scarb build` para convertir su contrato en código Sierra."

#: src/ch02-03-scarb.md:31
msgid ""
"Scarb simplifies your development workflow, making it efficient and\n"
"streamlined."
msgstr "Scarb simplifica su flujo de trabajo de desarrollo, haciéndolo eficiente y optimizado."

#: src/ch02-03-scarb.md:36
msgid ""
"Scarb is cross-platform, supporting macOS, Linux, and Windows. For\n"
"installation, refer to the [Chapter 1 setup\n"
"guide](https://book.starknet.io/chapter_1/environment_setup.html#the_scarb_package_manager_installation)."
msgstr ""
"Scarb es multiplataforma y admite macOS, Linux y Windows. Para la instalación, consulte la [guía de configuración del Capítulo 1] (https://book.starknet.io/chapter_1/"
"environment_setup.html#the_scarb_package_manager_installation)."

#: src/ch02-03-scarb.md:40
msgid "# Cairo Project Structure"
msgstr "# Estructura del Proyecto de Cairo"

#: src/ch02-03-scarb.md:42
msgid "Next, we’ll dive into the key components that make up a Cairo project."
msgstr "A continuación, profundizaremos en los componentes clave que conforman un proyecto de Cairo."

#: src/ch02-03-scarb.md:44
msgid "## Cairo Packages"
msgstr "## Paquetes en Cairo"

#: src/ch02-03-scarb.md:46
msgid ""
"Cairo packages, also referred to as \"crates\" in some contexts, are the\n"
"building blocks of a Cairo project. Each package must follow several\n"
"rules:"
msgstr ""
"Los paquetes de Cairo, también denominados \"crates\" en algunos contextos, son los componentes básicos de un proyecto de Cairo. Cada paquete debe seguir varias reglas:"

#: src/ch02-03-scarb.md:50
msgid ""
"- A package must include a `Scarb.toml` file, which is Scarb’s\n"
"  manifest file. It contains the dependencies for your package.\n"
"\n"
"- A package must include a `src/lib.cairo` file, which is the root of\n"
"  the package tree. It allows you to define functions and declare used\n"
"  modules."
msgstr ""
"- Un paquete debe incluir un archivo `Scarb.toml`, que es el archivo de manifiesto de Scarb. Contiene las dependencias de su paquete.\n"
"\n"
"- Un paquete debe incluir un archivo `src/lib.cairo`, que es la raíz del árbol de paquetes. Le permite definir funciones y declarar módulos usados."

#: src/ch02-03-scarb.md:57
msgid ""
"Package structures might look like the following case where we have a\n"
"package named `my_package`, which includes a `src` directory with the\n"
"`lib.cairo` file inside, a `snips` directory which in itself a package\n"
"we can use, and a `Scarb.toml` file in the top-level directory."
msgstr ""
"Las estructuras de los paquetes podrían parecerse al siguiente caso donde tenemos un paquete llamado `my_package`, que incluye un directorio `src` con el archivo `lib.cairo` "
"dentro, un directorio `snips` que en sí mismo es un paquete que podemos usar, y un archivo `Scarb.toml` en el directorio de nivel superior."

#: src/ch02-03-scarb.md:62
msgid ""
"my_package/\n"
"    ├── src/\n"
"    │   ├── module1.cairo\n"
"    │   ├── module2.cairo\n"
"    │   └── lib.cairo\n"
"    ├── snips/\n"
"    │   ├── src/\n"
"    │   │   ├── lib.cairo\n"
"    │   ├── Scarb.toml\n"
"    └── Scarb.toml"
msgstr ""
"my_package/\n"
"    ├── src/\n"
"    │   ├── module1.cairo\n"
"    │   ├── module2.cairo\n"
"    │   └── lib.cairo\n"
"    ├── snips/\n"
"    │   ├── src/\n"
"    │   │   ├── lib.cairo\n"
"    │   ├── Scarb.toml\n"
"    └── Scarb.toml"

#: src/ch02-03-scarb.md:73
msgid "Within the `Scarb.toml` file, you might have:"
msgstr "Dentro del archivo `Scarb.toml`, es posible que tengas:"

#: src/ch02-03-scarb.md:75
msgid ""
"[package]\n"
"    name = \"my_package\"\n"
"    version = \"0.1.0\"\n"
"\n"
"    [dependencies]\n"
"    starknet = \">=2.0.1\"\n"
"    snips = { path = \"snips\" }"
msgstr ""
"[package]\n"
"    name = \"my_package\"\n"
"    version = \"0.1.0\"\n"
"\n"
"    [dependencies]\n"
"    starknet = \">=2.0.1\"\n"
"    snips = { path = \"snips\" }"

#: src/ch02-03-scarb.md:83
msgid ""
"Here starknet and snips are the dependencies of the package. The\n"
"`starknet` dependency is hosted on the Scarb registry (we do not need to\n"
"download it), while the `snips` dependency is located in the `snips`\n"
"directory."
msgstr ""
"Aquí starknet y snips son las dependencias del paquete. La dependencia `starknet` está alojada en el registro Scarb (no necesitamos descárgarlo), mientras que la dependencia "
"`snips` se encuentra en el directorio `snips`."

#: src/ch02-03-scarb.md:88
msgid "# Setting Up a Project with Scarb"
msgstr "# Configurar un Proyecto con Scarb"

#: src/ch02-03-scarb.md:90
msgid ""
"To create a new project using Scarb, navigate to your desired project\n"
"directory and execute the following command:"
msgstr "Para crear un nuevo proyecto usando Scarb, navegue hasta el directorio del proyecto que desee y ejecute el siguiente comando:"

#: src/ch02-03-scarb.md:93
msgid "$ scarb new hello_scarb"
msgstr "$ scarb new hello_scarb"

#: src/ch02-03-scarb.md:95
msgid ""
"This command will create a new project directory named `hello_scarb`,\n"
"including a `Scarb.toml` file, a `src` directory with a `lib.cairo` file\n"
"inside, and initialize a new Git repository with a `.gitignore` file."
msgstr ""
"Este comando creará un nuevo directorio de proyecto llamado `hello_scarb`, que incluye un archivo `Scarb.toml`, un directorio `src` con un archivo `lib.cairo` dentro e "
"inicializará un nuevo repositorio Git con un archivo `.gitignore` ."

#: src/ch02-03-scarb.md:99
msgid ""
"hello_scarb/\n"
"    ├── src/\n"
"    │   └── lib.cairo\n"
"    └── Scarb.toml"
msgstr ""
"hello_scarb/\n"
"    ├── src/\n"
"    │   └── lib.cairo\n"
"    └── Scarb.toml"

#: src/ch02-03-scarb.md:104
msgid ""
"Upon opening `Scarb.toml` in a text editor, you should see something\n"
"similar to the code snippet below:"
msgstr "Al abrir `Scarb.toml` en un editor de texto, debería ver algo similar al fragmento de código a continuación:"

#: src/ch02-03-scarb.md:107
msgid ""
"[package]\n"
"    name = \"hello_scarb\"\n"
"    version = \"0.1.0\"\n"
"\n"
"    # See more keys and their definitions at https://docs.swmansion.com/scarb/docs/reference/manifest.html\n"
"    [dependencies]\n"
"    # foo = { path = \"vendor/foo\" }"
msgstr ""
"[package]\n"
"    name = \"hello_scarb\"\n"
"    version = \"0.1.0\"\n"
"\n"
"    # See more keys and their definitions at https://docs.swmansion.com/scarb/docs/reference/manifest.html\n"
"    [dependencies]\n"
"    # foo = { path = \"vendor/foo\" }"

#: src/ch02-03-scarb.md:115
msgid "# Building a Scarb Project"
msgstr "# Construyendo un Proyecto Scarb"

#: src/ch02-03-scarb.md:117
msgid "Clear all content in `src/lib.cairo` and replace with the following:"
msgstr "Borre todo el contenido en `src/lib.cairo` y reemplácelo con lo siguiente:"

#: src/ch02-03-scarb.md:119
msgid ""
"// src/lib.cairo\n"
"    mod hello_scarb;"
msgstr ""
"// src/lib.cairo\n"
"    mod hello_scarb;"

#: src/ch02-03-scarb.md:122
msgid ""
"Next, create a new file titled `src/hello_scarb.cairo` and add the\n"
"following:"
msgstr "A continuación, cree un nuevo archivo titulado `src/hello_scarb.cairo` y agregue lo siguiente:"

#: src/ch02-03-scarb.md:125
msgid ""
"// src/hello_scarb.cairo\n"
"    use debug::PrintTrait;\n"
"    fn main() {\n"
"        'Hello, Scarb!'.print();\n"
"    }"
msgstr ""
"// src/hello_scarb.cairo\n"
"    use debug::PrintTrait;\n"
"    fn main() {\n"
"        'Hello, Scarb!'.print();\n"
"    }"

#: src/ch02-03-scarb.md:131
msgid ""
"In this instance, the `lib.cairo` file contains a module declaration\n"
"referencing _hello_scarb_, which includes the _hello_scarb.cairo_\n"
"file’s implementation. For more on modules, imports, and the `lib.cairo`\n"
"file, please refer to the subchapter on [imports in Chapter\n"
"2](https://book.starknet.io/chapter_2/imports.html)."
msgstr ""
"En este caso, el archivo `lib.cairo` contiene una declaración de módulo que hace referencia a _hello_scarb_, que incluye la implementación del archivo _hello_scarb.cairo_. "
"Para obtener más información sobre módulos, importaciones y el archivo `lib.cairo`, consulte el subcapítulo sobre [importaciones en el Capítulo 2] (https://book.starknet.io/"
"chapter_2/imports.html)."

#: src/ch02-03-scarb.md:137
msgid ""
"Scarb mandates that your source files be located within the `src`\n"
"directory."
msgstr "Scarb exige que sus archivos fuente estén ubicados dentro del directorio `src`."

#: src/ch02-03-scarb.md:140
msgid ""
"To build (compile) your project from your `hello_scarb` directory, use\n"
"the following command:"
msgstr "Para construir (compilar) su proyecto desde su directorio `hello_scarb`, use el siguiente comando:"

#: src/ch02-03-scarb.md:143
msgid "scarb build"
msgstr "scarb build"

#: src/ch02-03-scarb.md:145
msgid ""
"This command compiles your project and produces the Sierra code in the\n"
"`target/dev/hello_scarb.sierra` file. Sierra serves as an intermediate\n"
"layer between high-level Cairo and compilation targets such as Cairo\n"
"Assembly (CASM). To understand more about Sierra, check out this\n"
"[article](https://medium.com/nethermind-eth/under-the-hood-of-cairo-1-0-exploring-sierra-7f32808421f5/)."
msgstr ""
"Este comando compila su proyecto y produce el código Sierra en el archivo `target/dev/hello_scarb.sierra`. Sierra sirve como capa intermedia entre el Cairo de alto nivel y "
"los objetivos de compilación como Cairo Assembly (CASM). Para comprender más sobre Sierra, consulte este [artículo](https://medium.com/nethermind-eth/under-the-hood-of-"
"cairo-1-0-exploring-sierra-7f32808421f5/)."

#: src/ch02-03-scarb.md:151
msgid ""
"To remove the build artifacts and delete the target directory, use the\n"
"`scarb clean` command."
msgstr "Para eliminar los artefactos de compilación y eliminar el directorio de destino, use el comando `scarb clean`."

#: src/ch02-03-scarb.md:154
msgid "## Adding Dependencies"
msgstr "## Agregar Dependencias"

#: src/ch02-03-scarb.md:156
msgid ""
"Scarb facilitates the seamless management of dependencies for your Cairo\n"
"packages. Here are two methods to add dependencies to your project:"
msgstr "Scarb facilita la gestión perfecta de las dependencias de sus paquetes de Cairo. Aquí hay dos métodos para agregar dependencias a su proyecto:"

#: src/ch02-03-scarb.md:159
msgid "- Edit Scarb.toml File"
msgstr "- Editar Scarb.toml File"

#: src/ch02-03-scarb.md:161
msgid ""
"Open the Scarb.toml file in your project directory and locate the\n"
"`[dependencies]` section. If it doesn’t exist, add it. To include a\n"
"dependency hosted on a Git repository, use the following format:"
msgstr ""
"Abra el archivo Scarb.toml en el directorio de su proyecto y busque la sección `[dependencies]`. Si no existe, agréguelo. Para incluir una dependencia alojada en un "
"repositorio Git, utilice el siguiente formato:"

#: src/ch02-03-scarb.md:165
msgid ""
"[dependencies]\n"
"    alexandria_math = { git = \"https://github.com/keep-starknet-strange/alexandria.git\" }"
msgstr ""
"[dependencies]\n"
"    alexandria_math = { git = \"https://github.com/keep-starknet-strange/alexandria.git\" }"

#: src/ch02-03-scarb.md:168
msgid ""
"For consistency, it’s recommended to pin Git dependencies to specific\n"
"commits. This can be done by adding the `rev` field with the commit\n"
"hash:"
msgstr "Para mantener la coherencia, se recomienda fijar las dependencias de Git a confirmaciones específicas. Esto se puede hacer agregando el campo `rev` con el commit hash:"

#: src/ch02-03-scarb.md:172
msgid ""
"[dependencies]\n"
"    alexandria_math = { git = \"https://github.com/keep-starknet-strange/alexandria.git\", rev = \"81bb93c\" }"
msgstr ""
"[dependencies]\n"
"    alexandria_math = { git = \"https://github.com/keep-starknet-strange/alexandria.git\", rev = \"81bb93c\" }"

#: src/ch02-03-scarb.md:175
msgid "After adding the dependency, remember to save the file."
msgstr "Después de agregar la dependencia, recuerde guardar el archivo."

#: src/ch02-03-scarb.md:177
msgid "- Use the scarb add Command"
msgstr "- Utilice el comando scarb add"

#: src/ch02-03-scarb.md:179
msgid ""
"Alternatively, you can use the `scarb add` command to add dependencies\n"
"to your project. Open your terminal and execute the following command:"
msgstr "Alternativamente, puedes usar el comando `scarb add` para agregar dependencias a tu proyecto. Abre tu terminal y ejecuta el siguiente comando:"

#: src/ch02-03-scarb.md:182
msgid "$ scarb add alexandria_math --git https://github.com/keep-starknet-strange/alexandria.git"
msgstr "$ scarb add alexandria_math --git https://github.com/keep-starknet-strange/alexandria.git"

#: src/ch02-03-scarb.md:184
msgid ""
"This command will add the alexandria_math dependency from the specified\n"
"Git repository to your project."
msgstr "Este comando agregará la dependencia alexandria_math del repositorio Git especificado a su proyecto."

#: src/ch02-03-scarb.md:187
msgid "To remove a dependency, you can use the `scarb rm` command."
msgstr "Para eliminar una dependencia, puede utilizar el comando `scarb rm`."

#: src/ch02-03-scarb.md:189
msgid ""
"Once a dependency is added, the Scarb.toml file will be automatically\n"
"updated with the new dependency information."
msgstr "Una vez que se agrega una dependencia, el archivo Scarb.toml se actualizará automáticamente con la nueva información de dependencia."

#: src/ch02-03-scarb.md:192
msgid "## Using Dependencies in Your Code"
msgstr "## Usando Dependencias en su Código"

#: src/ch02-03-scarb.md:194
msgid ""
"After dependencies are added to your project, you can start utilizing\n"
"them in your Cairo code."
msgstr "Después de agregar dependencias a su proyecto, puede comenzar a utilizarlas en su código de Cairo."

#: src/ch02-03-scarb.md:197
msgid ""
"For example, let’s assume you have added the alexandria_math\n"
"dependency. Now, you can import and utilize functions from the\n"
"alexandria_math library in your `src/hello_scarb.cairo` file:"
msgstr ""
"Por ejemplo, supongamos que ha agregado la dependencia alexandria_math. Ahora, puedes importar y utilizar funciones de la biblioteca alexandria_math en tu archivo `src/"
"hello_scarb.cairo`:"

#: src/ch02-03-scarb.md:201
msgid ""
"// src/hello_scarb.cairo\n"
"    use alexandria_math::fibonacci;\n"
"\n"
"    fn main() -> felt252 {\n"
"        fibonacci::fib(0, 1, 10)\n"
"    }"
msgstr ""
"// src/hello_scarb.cairo\n"
"    use alexandria_math::fibonacci;\n"
"\n"
"    fn main() -> felt252 {\n"
"        fibonacci::fib(0, 1, 10)\n"
"    }"

#: src/ch02-03-scarb.md:208
msgid ""
"In the above example, we import the fibonacci function from the\n"
"alexandria_math library and utilize it in the main function."
msgstr "En el ejemplo anterior, importamos la función Fibonacci de la biblioteca alexandria_math y la utilizamos en la función principal."

#: src/ch02-03-scarb.md:211
msgid "# Scarb Cheat Sheet"
msgstr "# Scarb Cheat Sheet"

#: src/ch02-03-scarb.md:213
msgid ""
"Here’s a quick cheat sheet of some of the most commonly used Scarb\n"
"commands:"
msgstr "Aquí hay una hoja de referencia rápida de algunos de los comandos Scarb más utilizados:"

#: src/ch02-03-scarb.md:216
msgid ""
"- `scarb new <project_name>`: Initialize a new project with the given\n"
"  project name.\n"
"\n"
"- `scarb build`: Compile your Cairo code into Sierra code.\n"
"\n"
"- `scarb add <dependency> --git <repository>`: Add a dependency to\n"
"  your project from a specified Git repository.\n"
"\n"
"- `scarb rm <dependency>`: Remove a dependency from your project.\n"
"\n"
"- `scarb run <script>`: Run a custom script defined in your\n"
"  `Scarb.toml` file."
msgstr ""
"- `scarb new <project_name>`: Inicializa un nuevo proyecto con el nombre de proyecto proporcionado.\n"
"\n"
"- `scarb build`: Compila tu código Cairo en código Sierra.\n"
"\n"
"- `scarb add <dependencia> --git <repositorio>`: Agrega una dependencia a tu proyecto desde un repositorio Git específico.\n"
"\n"
"- `scarb rm <dependencia>`: Elimina una dependencia de tu proyecto.\n"
"\n"
"- `scarb run <script>`: Ejecuta un script personalizado definido en su archivo `Scarb.toml`."

#: src/ch02-03-scarb.md:229
msgid ""
"Scarb is a versatile tool, and this is just the beginning of what you\n"
"can achieve with it. As you gain more experience in the Cairo language\n"
"and the Starknet platform, you’ll discover how much more you can do with\n"
"Scarb."
msgstr ""
"Scarb es una herramienta versátil y esto es solo el comienzo de lo que puedes lograr con ella. A medida que adquieras más experiencia en el idioma de  Cairo y la plataforma "
"Starknet, descubrirás cuánto más puedes hacer con Scarb."

#: src/ch02-03-scarb.md:234
msgid ""
"To stay updated on Scarb and its features, be sure to check the\n"
"[official Scarb\n"
"documentation](https://docs.swmansion.com/scarb/docs.html) regularly.\n"
"Happy coding!"
msgstr ""
"Para mantenerse actualizado sobre Scarb y sus funciones, asegúrese de consultar la [documentación oficial de Scarb] (https://docs.swmansion.com/scarb/docs.html) con "
"regularidad. ¡Feliz codificación!"

#: src/ch02-03-scarb.md:239 src/ch02-07-starknet-js.md:174 src/ch02-08-starknet-react.md:395 src/ch03-00-architecture.md:264 src/ch03-02-sequencers.md:254
#: src/ch03-03-provers.md:233 src/ch03-04-nodes.md:439 src/ch04-00-account-abstraction.md:297 src/ch04-02-hello-account.md:199 src/ch04-03-standard-account.md:370
#: src/ch04-04-01-multicaller.md:91 src/ch04-04-02-multisig.md:412
msgid "The Book is a community-driven effort created for the community."
msgstr "El Libro es un esfuerzo impulsado por la comunidad y creado para la comunidad."

#: src/ch02-03-scarb.md:241 src/ch02-07-starknet-js.md:176 src/ch02-08-starknet-react.md:397 src/ch03-00-architecture.md:266 src/ch03-02-sequencers.md:256
#: src/ch03-03-provers.md:235 src/ch03-04-nodes.md:441 src/ch04-00-account-abstraction.md:299 src/ch04-02-hello-account.md:201 src/ch04-03-standard-account.md:372
#: src/ch04-04-01-multicaller.md:93 src/ch04-04-02-multisig.md:414
msgid ""
"- If you’ve learned something, or not, please take a moment to provide\n"
"  feedback through [this 3-question\n"
"  survey](https://a.sprig.com/WTRtdlh2VUlja09lfnNpZDo4MTQyYTlmMy03NzdkLTQ0NDEtOTBiZC01ZjAyNDU0ZDgxMzU=).\n"
"\n"
"- If you discover any errors or have additional suggestions, don’t\n"
"  hesitate to open an [issue on our GitHub\n"
"  repository](https://github.com/starknet-edu/starknetbook/issues)."
msgstr ""
"- Si ha aprendido algo, o no, tómese un momento para brindar comentarios a través de [esta encuesta de 3 preguntas](https://a.sprig.com/"
"WTRtdlh2VUlja09lfnNpZDo4MTQyYTlmMy03NzdkLTQ0NDEtOTBiZC01ZjAyNDU0ZDgxMzU=).\n"
"\n"
"- Si descubre algún error o tiene sugerencias adicionales, no dude en abrir un [problema en nuestro repositorio de GitHub](https://github.com/starknet-edu/starknetbook/"
"issues)."

#: src/ch02-04-starkli.md:1
msgid "# Starkli: A CLI interface 🚧"
msgstr "# Starkli: Una CLI interface 🚧"

#: src/ch02-05-katana.md:1
msgid "# Katana: A Local Node"
msgstr "# Katana: A Local Node"

#: src/ch02-05-katana.md:3
msgid ""
"`Katana` is an indispensable tool designed to aid in local development.\n"
"This creation by the [Dojo\n"
"team](https://github.com/dojoengine/dojo/blob/main/crates/katana/README.md)\n"
"enables you to perform all Starknet-related activities in a local\n"
"environment, thus serving as an efficient platform for development and\n"
"testing."
msgstr ""
"`Katana` es una herramienta indispensable diseñada para ayudar al desarrollo local. Esta creación del [equipo Dojo](https://github.com/dojoengine/dojo/blob/main/crates/"
"katana/README.md) le permite realizar todas las actividades relacionadas con Starknet en un entorno local, sirviendo así como una plataforma eficiente para el desarrollo y "
"las pruebas."

#: src/ch02-05-katana.md:10
msgid ""
"We suggest employing either `katana` or `starknet-devnet` for testing\n"
"your contracts, with the latter discussed in detail in the following\n"
"subchapter. The `starknet-devnet` is a public testnet, maintained by the\n"
"[Shard Labs team](https://github.com/Shard-Labs/starknet-devnet). Both\n"
"these tools offer an effective environment for development and testing."
msgstr ""
"Sugerimos emplear `katana` o `starknet-devnet` para probar sus contratos; este último se analiza en detalle en el siguiente subcapítulo. `starknet-devnet` es una red de "
"prueba pública, mantenida por el [equipo de Shard Labs] (https://github.com/Shard-Labs/starknet-devnet). Ambas herramientas ofrecen un entorno eficaz para el desarrollo y "
"las pruebas."

#: src/ch02-05-katana.md:16
msgid ""
"For an example of how to use `katana` to deploy and interact with a\n"
"contract, see [Chapter 2’s Voting contract\n"
"example](https://book.starknet.io/chapter_2/deploy_call_invoke.html)."
msgstr ""
"Para ver un ejemplo de cómo usar `katana` para implementar e interactuar con un contrato, consulte [Contrato de Votación del Capítulo 2\n"
"ejemplo](https://book.starknet.io/chapter_2/deploy_call_invoke.html)."

#: src/ch02-05-katana.md:20
msgid "## Understanding RPC in Starknet"
msgstr "## Entendiendo RPC en Starknet"

#: src/ch02-05-katana.md:22
msgid ""
"Remote Procedure Call (RPC) establishes the communication between nodes\n"
"in the Starknet network. Essentially, it allows us to interact with a\n"
"node in the Starknet network. The RPC server is responsible for\n"
"receiving these calls."
msgstr ""
"La llamada a procedimiento remoto (RPC) establece la comunicación entre nodos en la red Starknet. Básicamente, nos permite interactuar con un nodo de la red Starknet. El "
"servidor RPC es responsable de recibir estas llamadas."

#: src/ch02-05-katana.md:27
msgid ""
"RPC can be obtained from various sources: . To support the\n"
"decentralization of the Network, you can use your own local Starknet\n"
"node. Consult [Chapter 4](https://book.starknet.io/chapter_4/node.html)\n"
"for guidelines on setting up your node. . For ease of access, consider\n"
"using a provider such as\n"
"[Infura](https://docs.infura.io/networks/starknet/how-to) or\n"
"[Alchemy](https://www.alchemy.com/starknet) to get an RPC client. . For\n"
"development and testing, a temporary local node such as `katana` can be\n"
"used."
msgstr ""
"RPC se puede obtener de varias fuentes: . Para respaldar la descentralización de la Red, puede utilizar su propio nodo Starknet local. Consultar [Capítulo 4](https://book."
"starknet.io/chapter_4/node.html) para obtener pautas sobre cómo configurar su nodo. Para facilitar el acceso, considere utilizar un proveedor como [Infura](https://docs."
"infura.io/networks/starknet/how-to) o [Alchemy](https://www.alchemy.com/starknet) para obtener un cliente RPC. Para el desarrollo y las pruebas, se puede utilizar un nodo "
"local temporal como `katana`."

#: src/ch02-05-katana.md:37
msgid "## Getting Started with Katana"
msgstr "## Primeros Pasos con Katana"

#: src/ch02-05-katana.md:39
msgid "To install `katana` from its source code, run the following commands:"
msgstr "Para instalar `katana` desde su código fuente, ejecute los siguientes comandos:"

#: src/ch02-05-katana.md:41
msgid ""
"mkdir ~/.dojo && cd ~/.dojo\n"
"    git clone https://github.com/dojoengine/dojo\n"
"    cd dojo\n"
"    cargo install --path ./crates/katana --locked --force"
msgstr ""
"mkdir ~/.dojo && cd ~/.dojo\n"
"    git clone https://github.com/dojoengine/dojo\n"
"    cd dojo\n"
"    cargo install --path ./crates/katana --locked --force"

#: src/ch02-05-katana.md:46
msgid "Once installed, confirm it with the version command:"
msgstr "Una vez instalado, confírmalo con el comando de versión:"

#: src/ch02-05-katana.md:48
msgid "katana --version"
msgstr "katana --version"

#: src/ch02-05-katana.md:50
msgid ""
"Updating `katana` to its latest version involves going back to the\n"
"`dojo` directory and running the following commands:"
msgstr "Actualizar `katana` a su última versión implica volver al directorio `dojo` y ejecutar los siguientes comandos:"

#: src/ch02-05-katana.md:53
msgid ""
"cd ~/.dojo/dojo\n"
"    git pull\n"
"\n"
"    # If you are using a local Starknet node, ensure to stop it first.\n"
"    cargo install --path ./crates/katana --locked --force"
msgstr ""
"cd ~/.dojo/dojo\n"
"    git pull\n"
"\n"
"    # If you are using a local Starknet node, ensure to stop it first.\n"
"    cargo install --path ./crates/katana --locked --force"

#: src/ch02-05-katana.md:59
msgid "To initialize a local Starknet node, execute the following command:"
msgstr "Para inicializar un nodo Starknet local, ejecute el siguiente comando:"

#: src/ch02-05-katana.md:61
msgid "katana --accounts 3 --seed 0 --gas-price 250"
msgstr "katana --accounts 3 --seed 0 --gas-price 250"

#: src/ch02-05-katana.md:63
msgid ""
"The `--accounts` flag determines the number of accounts to be created,\n"
"while the `--seed` flag sets the seed for the private keys of these\n"
"accounts. This ensures that initializing the node with the same seed\n"
"will always yield the same accounts. Lastly, the `--gas-price` flag\n"
"specifies the transaction gas price."
msgstr ""
"El indicador `--accounts` determina el número de cuentas que se crearán, mientras que el indicador `--seed` establece la semilla para las claves privadas de estas cuentas. "
"Esto garantiza que inicializar el nodo con la misma semilla siempre generará las mismas cuentas. Por último, el indicador `--gas-price` especifica el precio del gas de "
"transacción."

#: src/ch02-05-katana.md:69
msgid "Running the command produces output similar to this:"
msgstr "La ejecución del comando produce un resultado similar a este:"

#: src/ch02-05-katana.md:71
msgid ""
"██╗  ██╗ █████╗ ████████╗ █████╗ ███╗   ██╗ █████╗\n"
"    ██║ ██╔╝██╔══██╗╚══██╔══╝██╔══██╗████╗  ██║██╔══██╗\n"
"    █████╔╝ ███████║   ██║   ███████║██╔██╗ ██║███████║\n"
"    ██╔═██╗ ██╔══██║   ██║   ██╔══██║██║╚██╗██║██╔══██║\n"
"    ██║  ██╗██║  ██║   ██║   ██║  ██║██║ ╚████║██║  ██║\n"
"    ╚═╝  ╚═╝╚═╝  ╚═╝   ╚═╝   ╚═╝  ╚═╝╚═╝  ╚═══╝╚═╝  ╚═╝\n"
"\n"
"\n"
"    PREFUNDED ACCOUNTS\n"
"    ==================\n"
"\n"
"    | Account address |  0x03ee9e18edc71a6df30ac3aca2e0b02a198fbce19b7480a63a0d71cbd76652e0\n"
"    | Private key     |  0x0300001800000000300000180000000000030000000000003006001800006600\n"
"    | Public key      |  0x01b7b37a580d91bc3ad4f9933ed61f3a395e0e51c9dd5553323b8ca3942bb44e\n"
"\n"
"    | Account address |  0x033c627a3e5213790e246a917770ce23d7e562baa5b4d2917c23b1be6d91961c\n"
"    | Private key     |  0x0333803103001800039980190300d206608b0070db0012135bd1fb5f6282170b\n"
"    | Public key      |  0x04486e2308ef3513531042acb8ead377b887af16bd4cdd8149812dfef1ba924d\n"
"\n"
"    | Account address |  0x01d98d835e43b032254ffbef0f150c5606fa9c5c9310b1fae370ab956a7919f5\n"
"    | Private key     |  0x07ca856005bee0329def368d34a6711b2d95b09ef9740ebf2c7c7e3b16c1ca9c\n"
"    | Public key      |  0x07006c42b1cfc8bd45710646a0bb3534b182e83c313c7bc88ecf33b53ba4bcbc\n"
"\n"
"\n"
"    ACCOUNTS SEED\n"
"    =============\n"
"    0\n"
"\n"
"\n"
"    🚀 JSON-RPC server started: http://0.0.0.0:5050"
msgstr ""
"██╗  ██╗ █████╗ ████████╗ █████╗ ███╗   ██╗ █████╗\n"
"    ██║ ██╔╝██╔══██╗╚══██╔══╝██╔══██╗████╗  ██║██╔══██╗\n"
"    █████╔╝ ███████║   ██║   ███████║██╔██╗ ██║███████║\n"
"    ██╔═██╗ ██╔══██║   ██║   ██╔══██║██║╚██╗██║██╔══██║\n"
"    ██║  ██╗██║  ██║   ██║   ██║  ██║██║ ╚████║██║  ██║\n"
"    ╚═╝  ╚═╝╚═╝  ╚═╝   ╚═╝   ╚═╝  ╚═╝╚═╝  ╚═══╝╚═╝  ╚═╝\n"
"\n"
"\n"
"    PREFUNDED ACCOUNTS\n"
"    ==================\n"
"\n"
"    | Account address |  0x03ee9e18edc71a6df30ac3aca2e0b02a198fbce19b7480a63a0d71cbd76652e0\n"
"    | Private key     |  0x0300001800000000300000180000000000030000000000003006001800006600\n"
"    | Public key      |  0x01b7b37a580d91bc3ad4f9933ed61f3a395e0e51c9dd5553323b8ca3942bb44e\n"
"\n"
"    | Account address |  0x033c627a3e5213790e246a917770ce23d7e562baa5b4d2917c23b1be6d91961c\n"
"    | Private key     |  0x0333803103001800039980190300d206608b0070db0012135bd1fb5f6282170b\n"
"    | Public key      |  0x04486e2308ef3513531042acb8ead377b887af16bd4cdd8149812dfef1ba924d\n"
"\n"
"    | Account address |  0x01d98d835e43b032254ffbef0f150c5606fa9c5c9310b1fae370ab956a7919f5\n"
"    | Private key     |  0x07ca856005bee0329def368d34a6711b2d95b09ef9740ebf2c7c7e3b16c1ca9c\n"
"    | Public key      |  0x07006c42b1cfc8bd45710646a0bb3534b182e83c313c7bc88ecf33b53ba4bcbc\n"
"\n"
"\n"
"    ACCOUNTS SEED\n"
"    =============\n"
"    0\n"
"\n"
"\n"
"    🚀 JSON-RPC server started: http://0.0.0.0:5050"

#: src/ch02-05-katana.md:102
msgid ""
"The output includes the addresses, private keys, and public keys of the\n"
"created accounts. It also contains the seed used to generate the\n"
"accounts. This seed can be reused to create identical accounts in future\n"
"runs. Additionally, the output provides the URL of the JSON-RPC server.\n"
"This URL can be used to establish a connection to the local Starknet\n"
"node."
msgstr ""
"El resultado incluye las direcciones, claves privadas y claves públicas de las cuentas creadas. También contiene la semilla utilizada para generar las cuentas. Esta semilla "
"se puede reutilizar para crear cuentas idénticas en ejecuciones futuras. Además, el resultado proporciona la URL del servidor JSON-RPC. Esta URL se puede utilizar para "
"establecer una conexión con el nodo Starknet local."

#: src/ch02-05-katana.md:109
msgid "To stop the local Starknet node, simply press `Ctrl+C`."
msgstr "Para detener el nodo Starknet local, simplemente presione `Ctrl+C`."

#: src/ch02-05-katana.md:111
msgid ""
"The local Starknet node does not persist data. Hence, once it’s stopped,\n"
"all data will be erased."
msgstr "El nodo Starknet local no conserva datos. Por lo tanto, una vez que se detenga, se borrarán todos los datos."

#: src/ch02-05-katana.md:114
msgid ""
"For a practical demonstration of `katana` to deploy and interact with a\n"
"contract, see [Chapter 2’s Voting contract\n"
"example](https://book.starknet.io/chapter_2/deploy_call_invoke.html)."
msgstr ""
"Para ver una demostración práctica de `katana` para implementar e interactuar con un contrato, consulte [Ejemplo de contrato de votación del Capítulo 2](https://book."
"starknet.io/chapter_2/deploy_call_invoke.html)."

#: src/ch02-06-starknet-devnet.md:1
msgid "# Starknet Devnet 🚧"
msgstr "# Starknet Devnet 🚧"

#: src/ch02-07-starknet-js.md:1
msgid "# Starknet-js: Javascript SDK"
msgstr "# Starknet-js: Javascript SDK"

#: src/ch02-07-starknet-js.md:3
msgid ""
"Starknet.js is a JavaScript/TypeScript library designed to connect your\n"
"website or decentralized application (D-App) to Starknet. It aims to\n"
"mimic the architecture of [ethers.js](https://docs.ethers.org/v5/), so\n"
"if you are familiar with ethers, you should find Starknet.js easy to\n"
"work with."
msgstr ""
"Starknet.js es una biblioteca JavaScript/TypeScript diseñada para conectar su sitio web o aplicación descentralizada (D-App) a Starknet. Su objetivo es imitar la "
"arquitectura de [ethers.js](https://docs.ethers.org/v5/), por lo que si está familiarizado con ethers, le resultará fácil trabajar con Starknet.js."

#: src/ch02-07-starknet-js.md:9
msgid "<img alt=\"Starknet-js in your dapp\" src=\"img/ch02-starknet-js.png\" class=\"center\" style=\"width: 50%;\" />"
msgstr "<img alt=\"Starknet-js in your dapp\" src=\"img/ch02-starknet-js.png\" class=\"center\" style=\"width: 50%;\" />"

#: src/ch02-07-starknet-js.md:11
msgid "<span class=\"caption\">Starknet-js in your dapp</span>"
msgstr "<span class=\"caption\">Starknet-js en tu dapp</span>"

#: src/ch02-07-starknet-js.md:15
msgid "To install Starknet.js, follow these steps:"
msgstr "Para instalar Starknet.js, siga estos pasos:"

#: src/ch02-07-starknet-js.md:17
msgid "- For the latest official release (main branch):"
msgstr "- Para la última versión oficial (main branch):"

#: src/ch02-07-starknet-js.md:19 src/ch02-07-starknet-js.md:25 src/ch04-02-hello-account.md:156 src/ch04-02-hello-account.md:165 src/ch04-02-hello-account.md:174
#: src/ch04-03-standard-account.md:305 src/ch04-03-standard-account.md:314
msgid "<!-- -->"
msgstr "<!-- -->"

#: src/ch02-07-starknet-js.md:21
msgid "npm install starknet"
msgstr "npm install starknet"

#: src/ch02-07-starknet-js.md:23
msgid "- To use the latest features (merges in develop branch):"
msgstr "- Para utilizar las últimas funciones (se fusiona en la rama de desarrollo):"

#: src/ch02-07-starknet-js.md:27
msgid "npm install starknet@next"
msgstr "npm install starknet@next"

#: src/ch02-07-starknet-js.md:29
msgid "## Getting Started"
msgstr "## Primeros Pasos"

#: src/ch02-07-starknet-js.md:31
msgid ""
"To build an app that users are able to connect to and interact with\n"
"Starknet, we recommend adding the\n"
"[get-starknet](https://github.com/starknet-io/get-starknet) library,\n"
"which allows you to manage wallet connections."
msgstr ""
"Para crear una aplicación a la que los usuarios puedan conectarse e interactuar con Starknet, recomendamos agregar la biblioteca [get-starknet](https://github.com/starknet-"
"io/get-starknet), que le permite administrar conexiones de billetera."

#: src/ch02-07-starknet-js.md:36
msgid ""
"With these tools ready, there are basically 3 main concepts to know on\n"
"the frontend: Account, Provider, and Contracts."
msgstr "Con estas herramientas listas, hay básicamente 3 conceptos principales que debes conocer en el frontend: Account, Provider y Contracts."

#: src/ch02-07-starknet-js.md:39
msgid "### Account"
msgstr "### Account"

#: src/ch02-07-starknet-js.md:41
msgid ""
"We can generally think of the account as the \"end user\" of a\n"
"dapp, and some user interaction will be involved to gain access to it."
msgstr "Generalmente podemos pensar en la cuenta como el \"usuario final\" de una dapp, y será necesaria alguna interacción del usuario para obtener acceso a ella."

#: src/ch02-07-starknet-js.md:44
msgid ""
"Think of a dapp where the user connects their browser extension wallet\n"
"(such as ArgentX or Braavos) - if the user accepts the connection, that\n"
"gives us access to the account and signer, which can sign transactions\n"
"and messages."
msgstr ""
"Piense en una dapp donde el usuario conecta la billetera de la extensión de su navegador (como ArgentX o Braavos); si el usuario acepta la conexión, eso nos da acceso a la "
"cuenta y al firmante, que puede firmar transacciones y mensajes."

#: src/ch02-07-starknet-js.md:49
msgid ""
"Unlike Ethereum, where user accounts are Externally Owned Accounts,\n"
"Starknet **accounts are contracts**. This might not necessarily impact\n"
"your dapp’s frontend, but you should definitely be aware of this\n"
"difference."
msgstr ""
"A diferencia de Ethereum, donde las cuentas de usuario son cuentas de propiedad externa, las **cuentas de Starknet son contratos**. Es posible que esto no afecte "
"necesariamente la interfaz de su dapp, pero definitivamente debe tener en cuenta esta diferencia."

#: src/ch02-07-starknet-js.md:54
msgid ""
"```ts\n"
"async function connectWallet() {\n"
"    const starknet = await connect();\n"
"    console.log(starknet.account);\n"
"\n"
"    const nonce = await starknet.account.getNonce();\n"
"    const message = await starknet.account.signMessage(...)\n"
"}\n"
"```"
msgstr ""
"```ts\n"
"async function connectWallet() {\n"
"    const starknet = await connect();\n"
"    console.log(starknet.account);\n"
"\n"
"    const nonce = await starknet.account.getNonce();\n"
"    const message = await starknet.account.signMessage(...)\n"
"}\n"
"```"

#: src/ch02-07-starknet-js.md:64
msgid ""
"The snippet above uses the `connect` function provided by `get-starknet` to establish a connection to the user wallet. Once connected, we are able to access account methods, "
"such as `signMessage` or `execute`."
msgstr ""
"El fragmento anterior utiliza la función `connect` proporcionada por `get-starknet` para establecer una conexión con la billetera del usuario. Una vez conectados, podremos "
"acceder a los métodos de la cuenta, como `signMessage` o `execute`."

#: src/ch02-07-starknet-js.md:66 src/ch02-07-01-00-counter-ui.md:145
msgid "### Provider"
msgstr "### Provider"

#: src/ch02-07-starknet-js.md:68
msgid ""
"The provider allows you to interact with the Starknet\n"
"network. You can think of it as a \"read\" connection to the blockchain,\n"
"as it doesn’t allow signing transactions or messages. Just like in\n"
"Ethereum, you can use a default provider, or use services such as Infura\n"
"or Alchemy, both of which support Starknet, to create an RPC provider."
msgstr ""
"El proveedor le permite interactuar con la red Starknet. Puedes considerarlo como una conexión de \"lectura\" a la cadena de bloques, ya que no permite firmar transacciones "
"o mensajes. Al igual que en Ethereum, puede utilizar un proveedor predeterminado o utilizar servicios como Infura o Alchemy, los cuales son compatibles con Starknet, para "
"crear un proveedor de RPC."

#: src/ch02-07-starknet-js.md:74
msgid "By default, the Provider is a sequencer provider."
msgstr "De forma predeterminada, el proveedor es un proveedor de secuenciador."

#: src/ch02-07-starknet-js.md:76
msgid ""
"```ts\n"
"export const provider = new Provider({\n"
"  sequencer: {\n"
"    network: \"goerli-alpha\",\n"
"  },\n"
"  // rpc: {\n"
"  //   nodeUrl: INFURA_ENDPOINT\n"
"  // }\n"
"});\n"
"\n"
"const block = await provider.getBlock(\"latest\"); // <- Get latest block\n"
"console.log(block.block_number);\n"
"```"
msgstr ""
"```ts\n"
"export const provider = new Provider({\n"
"  sequencer: {\n"
"    network: \"goerli-alpha\",\n"
"  },\n"
"  // rpc: {\n"
"  //   nodeUrl: INFURA_ENDPOINT\n"
"  // }\n"
"});\n"
"\n"
"const block = await provider.getBlock(\"latest\"); // <- Get latest block\n"
"console.log(block.block_number);\n"
"```"

#: src/ch02-07-starknet-js.md:90
msgid "## Contracts"
msgstr "## Contracts"

#: src/ch02-07-starknet-js.md:92
msgid ""
"Your frontend will likely be interacting with deployed\n"
"contracts. For each contract, there should be a counterpart on the\n"
"frontend. To create these instances, you will need the contract’s\n"
"address and ABI, and either a provider or signer."
msgstr ""
"Es probable que su interfaz interactúe con los contratos implementados. Para cada contrato, debe haber una contraparte en la interfaz. Para crear estas instancias, "
"necesitará la dirección del contrato y el ABI, y un proveedor o firmante."

#: src/ch02-07-starknet-js.md:97
msgid ""
"```ts\n"
"const contract = new Contract(abi_erc20, contractAddress, starknet.account);\n"
"\n"
"const balance = await contract.balanceOf(starknet.account.address);\n"
"const transfer = await contract.transfer(recipientAddress, amountFormatted);\n"
"//or: const transfer = await contract.invoke(\"transfer\", [to, amountFormatted]);\n"
"\n"
"console.log(`Tx hash: ${transfer.transaction_hash}`);\n"
"```"
msgstr ""
"```ts\n"
"const contract = new Contract(abi_erc20, contractAddress, starknet.account);\n"
"\n"
"const balance = await contract.balanceOf(starknet.account.address);\n"
"const transfer = await contract.transfer(recipientAddress, amountFormatted);\n"
"//or: const transfer = await contract.invoke(\"transfer\", [to, amountFormatted]);\n"
"\n"
"console.log(`Tx hash: ${transfer.transaction_hash}`);\n"
"```"

#: src/ch02-07-starknet-js.md:107
msgid ""
"If you create a contract instance with a provider, you’ll be limited to\n"
"calling read functions on the contract - only with a signer can you\n"
"change the state of the blockchain. However, you are able to connect a\n"
"previously created `Contract` instance with a new account:"
msgstr ""
"Si crea una instancia de contrato con un proveedor, estará limitado a llamar a funciones de lectura en el contrato; solo con un firmante puede cambiar el estado de la cadena "
"de bloques. Sin embargo, puede conectar una instancia de `Contract` creada previamente con una cuenta nueva:"

#: src/ch02-07-starknet-js.md:112
msgid ""
"```ts\n"
"const contract = new Contract(abi_erc20, contractAddress, provider);\n"
"\n"
"contract.connect(starknet.account);\n"
"```"
msgstr ""
"```ts\n"
"const contract = new Contract(abi_erc20, contractAddress, provider);\n"
"\n"
"contract.connect(starknet.account);\n"
"```"

#: src/ch02-07-starknet-js.md:118
msgid ""
"In the snippet above, after\n"
"calling the `connect` method, it would be possible to call read\n"
"functions on the contract, but not before."
msgstr "En el fragmento anterior, después de llamar al método `connect`, sería posible llamar a funciones de lectura en el contrato, pero no antes."

#: src/ch02-07-starknet-js.md:122
msgid "### Units"
msgstr "### Units"

#: src/ch02-07-starknet-js.md:124
msgid ""
"If you have previous experience with web3, you know dealing\n"
"with units requires care, and Starknet is no exception. Once again, the\n"
"docs are very useful here, in particular [this section on data\n"
"transformation](https://www.starknetjs.com/docs/guides/define_call_message/)."
msgstr ""
"Si tiene experiencia previa con web3, sabrá que manejar unidades requiere cuidado y Starknet no es una excepción. Una vez más, los documentos son muy útiles aquí, en "
"particular [esta sección sobre transformación de datos](https://www.starknetjs.com/docs/guides/define_call_message/)."

#: src/ch02-07-starknet-js.md:129
msgid ""
"Very often you will need to convert Cairo structs (such as Uint256) that\n"
"are returned from contracts into numbers:"
msgstr "Muy a menudo necesitarás convertir las estructuras Cairo (como Uint256) que se devuelven de los contratos en números:"

#: src/ch02-07-starknet-js.md:132
msgid ""
"```ts\n"
"// Uint256 shape:\n"
"// {\n"
"//    type: 'struct',\n"
"//    low: Uint256.low,\n"
"//    high: Uint256.high\n"
"//\n"
"// }\n"
"const balance = await contract.balanceOf(address); // <- uint256\n"
"const asBN = uint256.uint256ToBN(uint256); // <- uint256 into BN\n"
"const asString = asBN.toString(); //<- BN into string\n"
"```"
msgstr ""
"```ts\n"
"// Uint256 shape:\n"
"// {\n"
"//    type: 'struct',\n"
"//    low: Uint256.low,\n"
"//    high: Uint256.high\n"
"//\n"
"// }\n"
"const balance = await contract.balanceOf(address); // <- uint256\n"
"const asBN = uint256.uint256ToBN(uint256); // <- uint256 into BN\n"
"const asString = asBN.toString(); //<- BN into string\n"
"```"

#: src/ch02-07-starknet-js.md:145
msgid "And vice versa:"
msgstr "Y vice versa:"

#: src/ch02-07-starknet-js.md:147
msgid ""
"```ts\n"
"const amount = 1;\n"
"\n"
"const amountFormatted = {\n"
"  type: \"struct\",\n"
"  ...uint256.bnToUint256(amount),\n"
"};\n"
"```"
msgstr ""
"```ts\n"
"const amount = 1;\n"
"\n"
"const amountFormatted = {\n"
"  type: \"struct\",\n"
"  ...uint256.bnToUint256(amount),\n"
"};\n"
"```"

#: src/ch02-07-starknet-js.md:156
msgid ""
"There are other helpful utils, besides `bnToUint256` and `uint256ToBN`,\n"
"provided by Starknet.js."
msgstr ""
"Hay otras utilidades útiles, además de `bnToUint256` y `uint256ToBN`,\n"
"proporcionado por Starknet.js."

#: src/ch02-07-starknet-js.md:159
msgid ""
"We now have a solid foundation to build a Starknet dapp. However, there\n"
"are framework specific tools that help us build Starknet dapps, which\n"
"are covered in chaper 5."
msgstr ""
"Ahora tenemos una base sólida para construir una dapp Starknet. Sin embargo, existen herramientas específicas del marco que nos ayudan a construir dapps Starknet, que se "
"tratan en el capítulo 5."

#: src/ch02-07-starknet-js.md:163
msgid "## Additional Resources"
msgstr "## Recursos Adicionales"

#: src/ch02-07-starknet-js.md:165
msgid ""
"- Starknet.js GitHub Repository:\n"
"  <https://github.com/0xs34n/starknet.js>\n"
"\n"
"- Official Starknet.js Website and documentation:\n"
"  <https://www.starknetjs.com/>"
msgstr ""
"- Repositorio Starknet.js GitHub:\n"
"   <https://github.com/0xs34n/starknet.js>\n"
"\n"
"- Sitio web oficial de Starknet.js y documentación:\n"
"   <https://www.starknetjs.com/>"

#: src/ch02-07-starknet-js.md:171
msgid ""
"Stay tuned for more updates on Starknet.js, including detailed guides,\n"
"examples, and comprehensive documentation."
msgstr "Esté atento a más actualizaciones sobre Starknet.js, incluidas guías detalladas, ejemplos y documentación completa."

#: src/ch02-07-01-examples.md:1 src/ch02-08-01-examples.md:1 src/ch04-04-examples.md:1
msgid "# Examples"
msgstr "# Ejemplos"

#: src/ch02-07-01-examples.md:3
msgid ""
"In this subchapter, readers will find practical examples demonstrating the usage of `starknet-js`. It provides insight into real-world applications and serves as a guide for "
"developers to understand and implement these tools effectively."
msgstr ""
"En este subcapítulo, los lectores encontrarán ejemplos prácticos que demuestran el uso de `starknet-js`. Proporciona información sobre aplicaciones del mundo real y sirve "
"como guía para que los desarrolladores comprendan e implementen estas herramientas de manera efectiva."

#: src/ch02-07-01-examples.md:5 src/ch02-08-01-examples.md:5
msgid "We value the contribution of our developer community:"
msgstr "Valoramos la contribución de nuestra comunidad de desarrolladores:"

#: src/ch02-07-01-examples.md:7 src/ch02-08-01-examples.md:7
msgid ""
"- We encourage developers to contribute additional examples.\n"
"- Please inform us if you identify any mistakes or inaccuracies."
msgstr ""
"- Alentamos a los desarrolladores a contribuir con ejemplos adicionales.\n"
"- Infórmenos si identifica algún error o inexactitud."

#: src/ch02-07-01-examples.md:10 src/ch02-08-01-examples.md:10
msgid "Your insights and feedback are instrumental in making this resource more comprehensive and accurate."
msgstr "Sus ideas y comentarios son fundamentales para que este recurso sea más completo y preciso."

#: src/ch02-07-01-00-counter-ui.md:1
msgid "# Counter Smart Contract UI Integration"
msgstr "# Integración de UI del Contrato Counter"

#: src/ch02-07-01-00-counter-ui.md:3
msgid "This guide walks readers through integrating a simple counter smart contract with a frontend. By the end of this guide, readers will understand how to:"
msgstr ""
"Esta guía orienta a los lectores a través de la integración de un smart contract de un contador simple con una interfaz. Al final de esta guía, los lectores entenderán cómo:"

#: src/ch02-07-01-00-counter-ui.md:5
msgid ""
"- Connect the frontend to a smart contract.\n"
"- Initiate transactions, such as incrementing or decrementing the counter.\n"
"- Read and display data, such as showing the counter value on the frontend."
msgstr ""
"- Conectar el frontend a un smart contract.\n"
"- Iniciar transacciones, como incrementar o disminuir el contador.\n"
"- Leer y mostrar datos, como mostrar el valor del contador en la interfaz."

#: src/ch02-07-01-00-counter-ui.md:9 src/ch02-07-01-00-counter-ui.md:237
msgid ""
"For a visual walkthrough, do check out the [Basecamp frontend session](https://drive.google.com/file/d/1Dtb3Ol_BVoNV4w-_MKV8aeyyRra8nRtz/view). This comprehensive session "
"delves deeper into the nuances of the concepts we've touched upon, presenting a mix of theoretical explanations and hands-on demonstrations."
msgstr ""
"Para obtener un recorrido visual, consulte la [sesión de frontend de Basecamp](https://drive.google.com/file/d/1Dtb3Ol_BVoNV4w-_MKV8aeyyRra8nRtz/view). Esta sesión integral "
"profundiza en los matices de los conceptos que hemos tocado, presentando una combinación de explicaciones teóricas y demostraciones prácticas."

#: src/ch02-07-01-00-counter-ui.md:11
msgid "## Tools Used"
msgstr "## Tools Utilizadas"

#: src/ch02-07-01-00-counter-ui.md:13
msgid ""
"- [Reactjs](https://react.dev/learn/start-a-new-react-project): A frontend building framework.\n"
"- [@argent/get-starknet](https://www.npmjs.com/package/@argent/get-starknet): A wrapper for **[starknet.js](https://github.com/0xs34n/starknet.js)**, aiding interaction with "
"wallet extensions.\n"
"- [starknet](https://www.npmjs.com/package/starknet): A JavaScript library for Starknet."
msgstr ""
"- [Reactjs](https://react.dev/learn/start-a-new-react-project): Un framework de construcción de frontend.\n"
"- [@argent/get-starknet](https://www.npmjs.com/package/@argent/get-starknet): Un wrapper para **[starknet.js](https://github.com/0xs34n /starknet.js)**, lo que ayuda a la "
"interacción con las extensiones de billetera.\n"
"- [starknet](https://www.npmjs.com/package/starknet): Una biblioteca de JavaScript para Starknet."

#: src/ch02-07-01-00-counter-ui.md:17
msgid "## Setting Up the Environment"
msgstr "# Configuración de Variables de Entorno"

#: src/ch02-07-01-00-counter-ui.md:19
msgid "To begin, clone the project repository:"
msgstr "Para comenzar, clona el repositorio del proyecto:"

#: src/ch02-07-01-00-counter-ui.md:21
msgid ""
"```bash\n"
"git clone https://github.com/Darlington02/basecamp-frontend-boilerplate\n"
"```"
msgstr ""
"```bash\n"
"git clone https://github.com/Darlington02/basecamp-frontend-boilerplate\n"
"```"

#: src/ch02-07-01-00-counter-ui.md:25
msgid "Then, navigate to the project directory and install necessary packages:"
msgstr "Luego, navegue hasta el directorio del proyecto e instale los paquetes necesarios:"

#: src/ch02-07-01-00-counter-ui.md:27
msgid ""
"```bash\n"
"cd basecamp-frontend-boilerplate\n"
"npm install\n"
"```"
msgstr ""
"```bash\n"
"cd basecamp-frontend-boilerplate\n"
"npm install\n"
"```"

#: src/ch02-07-01-00-counter-ui.md:32
msgid "To launch the project, run:"
msgstr "Para iniciar el proyecto, ejecute:"

#: src/ch02-07-01-00-counter-ui.md:34
msgid ""
"```bash\n"
"yarn start\n"
"```"
msgstr ""
"```bash\n"
"yarn start\n"
"```"

#: src/ch02-07-01-00-counter-ui.md:38
msgid "In `index.js`, several key functions are provided:"
msgstr "En `index.js`, se proporcionan varias funciones clave:"

#: src/ch02-07-01-00-counter-ui.md:40
msgid ""
"```javascript\n"
"// Connect to the blockchain via a wallet provider (argentX or Bravoos)\n"
"const connectWallet = async () => {};\n"
"\n"
"// Terminate the connection\n"
"const disconnectWallet = async () => {};\n"
"\n"
"// Trigger increment\n"
"const increaseCounter = async () => {};\n"
"\n"
"// Trigger decrement\n"
"const decreaseCounter = async () => {};\n"
"\n"
"// Retrieve current count\n"
"const getCounter = async () => {};\n"
"```"
msgstr ""
"```javascript\n"
"// Connect to the blockchain via a wallet provider (argentX or Bravoos)\n"
"const connectWallet = async () => {};\n"
"\n"
"// Terminate the connection\n"
"const disconnectWallet = async () => {};\n"
"\n"
"// Trigger increment\n"
"const increaseCounter = async () => {};\n"
"\n"
"// Trigger decrement\n"
"const decreaseCounter = async () => {};\n"
"\n"
"// Retrieve current count\n"
"const getCounter = async () => {};\n"
"```"

#: src/ch02-07-01-00-counter-ui.md:57
msgid "## Managing Connection"
msgstr "## Administrar la conexión"

#: src/ch02-07-01-00-counter-ui.md:59
msgid "### `connectWallet`"
msgstr "### `connectWallet`"

#: src/ch02-07-01-00-counter-ui.md:61
msgid ""
"The `connectWallet` function serves as the mechanism to establish a connection to the blockchain through specific wallet providers such as ArgentX or Braavos. It is "
"asynchronous, allowing the use of `await` for handling asynchronous tasks."
msgstr ""
"La función `connectWallet` sirve como mecanismo para establecer una conexión a la cadena de bloques a través de proveedores de billetera específicos como ArgentX o Braavos. "
"Es asincrónico, lo que permite el uso de `await` para manejar tareas asincrónicas."

#: src/ch02-07-01-00-counter-ui.md:63
msgid ""
"```JavaScript\n"
"const connectWallet = async() => {\n"
"    const connection = await connect({webWalletUrl: \"https://web.argent.xyz\"});\n"
"    if (connection && connection.isConnected) {\n"
"      setConnection(connection);\n"
"      setAccount(connection.account);\n"
"      setAddress(connection.selectedAddress);\n"
"    }\n"
"}\n"
"```"
msgstr ""
"```JavaScript\n"
"const connectWallet = async() => {\n"
"    const connection = await connect({webWalletUrl: \"https://web.argent.xyz\"});\n"
"    if (connection && connection.isConnected) {\n"
"      setConnection(connection);\n"
"      setAccount(connection.account);\n"
"      setAddress(connection.selectedAddress);\n"
"    }\n"
"}\n"
"```"

#: src/ch02-07-01-00-counter-ui.md:74
msgid ""
"- Initiates the connection using the **`connect`** method from the **`@argent/get-starknet`** library, targeting Starknet.\n"
"- Upon a successful connection, updates the React component's state with details of the **`connection`**, **`account`**, and **`selectedAddress`**."
msgstr ""
"- Inicia la conexión utilizando el método **`connect`** de la biblioteca **`@argent/get-starknet`**, apuntando a Starknet.\n"
"- Tras una conexión exitosa, actualiza el estado del componente React con detalles de **`connection`**, **`account`** y **`selectedAddress`**."

#: src/ch02-07-01-00-counter-ui.md:77
msgid "### `disconnectWallet`"
msgstr "### `disconnectWallet`"

#: src/ch02-07-01-00-counter-ui.md:79
msgid ""
"The `disconnectWallet` function is designed to sever the connection with the web wallet asynchronously. After disconnection, it updates the component's state, resetting "
"connection details."
msgstr ""
"La función `disconnectWallet` está diseñada para cortar la conexión con la billetera web de forma asincrónica. Después de la desconexión, actualiza el estado del componente "
"y restablece los detalles de la conexión."

#: src/ch02-07-01-00-counter-ui.md:81
msgid ""
"```bash\n"
"const disconnectWallet = async() => {\n"
"    await disconnect();\n"
"    setConnection(undefined);\n"
"    setAccount(undefined);\n"
"    setAddress('');\n"
"}\n"
"```"
msgstr ""
"```bash\n"
"const disconnectWallet = async() => {\n"
"    await disconnect();\n"
"    setConnection(undefined);\n"
"    setAccount(undefined);\n"
"    setAddress('');\n"
"}\n"
"```"

#: src/ch02-07-01-00-counter-ui.md:90
msgid ""
"- It utilizes the **`disconnect`** function, possibly from an external library, and handles the operation asynchronously with **`await`**.\n"
"- Post-disconnection, the state of the React component is updated:\n"
"  - **`setConnection`** is set to **`undefined`**.\n"
"  - **`setAccount`** is set to **`undefined`**.\n"
"  - **`setAddress`** is cleared with an empty string."
msgstr ""
"- Utiliza la función **`disconnect`**, posiblemente de una biblioteca externa, y maneja la operación de forma asincrónica con **`await`**.\n"
"- Después de la desconexión, se actualiza el estado del componente React:\n"
"   - **`setConnection`** está establecido en **`undefined`**.\n"
"   - **`setAccount`** está establecido en **`undefined`**.\n"
"   - **`setAddress`** se borra con una string vacía."

#: src/ch02-07-01-00-counter-ui.md:96
msgid "### `EagerlyConnect`"
msgstr "### `EagerlyConnect`"

#: src/ch02-07-01-00-counter-ui.md:98
msgid "The `EagerlyConnect` mechanism leverages React's `useEffect` hook to initiate a connection to Starknet upon the component's mounting or initial rendering."
msgstr "El mecanismo `EagerlyConnect` aprovecha el hook `useEffect` de React para iniciar una conexión a Starknet durante el montaje o renderizado inicial del componente."

#: src/ch02-07-01-00-counter-ui.md:100
msgid ""
"```javascript\n"
"useEffect(() => {\n"
"  const connectToStarknet = async () => {\n"
"    const connection = await connect({\n"
"      modalMode: \"neverAsk\",\n"
"      webWalletUrl: \"https://web.argent.xyz\",\n"
"    });\n"
"\n"
"    if (connection && connection.isConnected) {\n"
"      setConnection(connection);\n"
"      setAccount(connection.account);\n"
"      setAddress(connection.selectedAddress);\n"
"    }\n"
"  };\n"
"  connectToStarknet();\n"
"}, []);\n"
"```"
msgstr ""
"```javascript\n"
"useEffect(() => {\n"
"  const connectToStarknet = async () => {\n"
"    const connection = await connect({\n"
"      modalMode: \"neverAsk\",\n"
"      webWalletUrl: \"https://web.argent.xyz\",\n"
"    });\n"
"\n"
"    if (connection && connection.isConnected) {\n"
"      setConnection(connection);\n"
"      setAccount(connection.account);\n"
"      setAddress(connection.selectedAddress);\n"
"    }\n"
"  };\n"
"  connectToStarknet();\n"
"}, []);\n"
"```"

#: src/ch02-07-01-00-counter-ui.md:118
msgid ""
"- Inside the **`useEffect`**, the **`connectToStarknet`** function is defined, aiming to establish an asynchronous connection using the **`connect`** function. Parameters "
"like **`modalMode`** and **`webWalletUrl`** are passed to guide the connection process.\n"
"- If successful in connecting (**`connection && connection.isConnected`**), the state updates with details of the connection, the account, and the selected address using "
"**`setConnection`**, **`setAccount`**, and **`setAddress`**.\n"
"- The **`connectToStarknet`** function is executed immediately after its definition."
msgstr ""
"- Dentro del **`useEffect`**, se define la función **`connectToStarknet`**, cuyo objetivo es establecer una conexión asincrónica usando la función **`connect`**. Parámetros "
"como **`modalMode`** y **`webWalletUrl`** se pasan para guiar el proceso de conexión.\n"
"- Si se logra conectar (**`connection && connection.isConnected`**), el estado se actualiza con detalles de la conexión, la cuenta y la dirección seleccionada usando "
"**`setConnection`**, **`setAccount`* * y **`setAddress`**.\n"
"- La función **`connectToStarknet`** se ejecuta inmediatamente después de su definición."

#: src/ch02-07-01-00-counter-ui.md:122
msgid "## Important Refresher on Smart Contract Interactions"
msgstr "## Actualización Importante Sobre Interacciones de Smart Contract"

#: src/ch02-07-01-00-counter-ui.md:124
msgid ""
"For effective interaction with a smart contract on the network, it's crucial to understand key components after establishing a connection. Among these are the `contract "
"address`, `ABI`, `Signer`, and `Provider`."
msgstr ""
"Para una interacción efectiva con un smart contract en la red, es crucial comprender los componentes clave después de establecer una conexión. Entre ellos se encuentran la "
"`contract address`, `ABI`, `Signer`, y `Provider`."

#: src/ch02-07-01-00-counter-ui.md:126
msgid "### ABI (Application Binary Interface)"
msgstr "### ABI (Interfaz Binaria de Aplicaciones)"

#: src/ch02-07-01-00-counter-ui.md:128
msgid "ABI is a standardized bridge between two binary program modules. It is essential for:"
msgstr "ABI es un puente estandarizado entre dos módulos de programa binario. Es esencial para:"

#: src/ch02-07-01-00-counter-ui.md:130
msgid ""
"- Interacting with smart contracts on the blockchain.\n"
"- Specifying the structure of functions, events, and variables for software applications.\n"
"- Enabling smooth communication with the smart contract, detailing function signatures, input/output types, event formats, and variable types.\n"
"- Facilitating invocation of functions and data retrieval from the contract."
msgstr ""
"- Interactuar con smart contracts en blockchain.\n"
"- Especificar la estructura de funciones, eventos y variables para aplicaciones de software.\n"
"- Permitir una comunicación fluida con el contrato inteligente, detallando firmas de funciones, tipos de input/output, formatos de eventos y tipos de variables.\n"
"- Facilitar la invocación de funciones y la recuperación de datos del contrato."

#: src/ch02-07-01-00-counter-ui.md:135
msgid "### Signer"
msgstr "### Signer"

#: src/ch02-07-01-00-counter-ui.md:137
msgid "The Signer plays a pivotal role in:"
msgstr "EL Signer juega un papel fundamental en:"

#: src/ch02-07-01-00-counter-ui.md:139
msgid ""
"- Signing transactions.\n"
"- Authorizing actions on the blockchain.\n"
"- Bearing the fees associated with blockchain operations."
msgstr ""
"- Firma de transacciones.\n"
"- Autorizar acciones sobre la blockchain.\n"
"- Correr con las tarifas asociadas a las operaciones blockchain."

#: src/ch02-07-01-00-counter-ui.md:143
msgid "Signers are especially linked to write operations that change the state of the blockchain. These operations need cryptographic signing for security and validity."
msgstr ""

#: src/ch02-07-01-00-counter-ui.md:147
msgid "The Provider acts as the medium for:"
msgstr ""

#: src/ch02-07-01-00-counter-ui.md:149
msgid ""
"- Communication with the blockchain.\n"
"- Creating transactions.\n"
"- Fetching data from the blockchain."
msgstr ""

#: src/ch02-07-01-00-counter-ui.md:153
msgid "To initiate a write transaction, the connected account (signer) must be provided. This signer then signs the transaction, bearing the necessary fee for execution."
msgstr ""

#: src/ch02-07-01-00-counter-ui.md:155
#, fuzzy
msgid "## Invoking the `increment` Function"
msgstr "## Invocar una Función de Escritura"

#: src/ch02-07-01-00-counter-ui.md:157
msgid ""
"```javascript\n"
"const increaseCounter = async () => {\n"
"  try {\n"
"    const contract = new Contract(contractAbi, contractAddress, account);\n"
"    await contract.increment();\n"
"    alert(\"You successfully incremented the counter!\");\n"
"  } catch (err) {\n"
"    alert(err.message);\n"
"  }\n"
"};\n"
"```"
msgstr ""

#: src/ch02-07-01-00-counter-ui.md:169
msgid "The **`increaseCounter`** function is crafted to interact with a smart contract and increment a specific counter. Here's a step-by-step breakdown:"
msgstr ""

#: src/ch02-07-01-00-counter-ui.md:171
msgid ""
"1. Establishes a new contract instance using the provided contract's ABI, its address, and the connected account. The account is essential since this write transaction "
"alters the contract's state.\n"
"2. Executes the contract's **`increment`** method. The **`await`** keyword ensures the program pauses until this action completes.\n"
"3. On successful execution, the user receives a confirmation alert indicating the counter's increment.\n"
"4. In case of any errors during the process, an alert displays the corresponding error message to the user."
msgstr ""

#: src/ch02-07-01-00-counter-ui.md:176
#, fuzzy
msgid "## Invoking the `decrement` Function"
msgstr "## Invocar una Función de Escritura"

#: src/ch02-07-01-00-counter-ui.md:178
msgid ""
"```javascript\n"
"const decreaseCounter = async () => {\n"
"  try {\n"
"    const contract = new Contract(contractAbi, contractAddress, account);\n"
"    await contract.decrement();\n"
"    alert(\"You successfully decremented the counter!\");\n"
"  } catch (err) {\n"
"    alert(err.message);\n"
"  }\n"
"};\n"
"```"
msgstr ""

#: src/ch02-07-01-00-counter-ui.md:190
msgid "The **`decreaseCounter`** function is designed to interact with a smart contract and decrement a specific counter. Here's a succinct breakdown of its operation:"
msgstr ""

#: src/ch02-07-01-00-counter-ui.md:192
msgid ""
"1. Creates a new contract instance by utilizing the provided contract's ABI, its address, and the connected account. The account is vital as this write transaction modifies "
"the contract's state.\n"
"2. Initiates the contract's **`decrement`** method. With the use of the **`await`** keyword, the program ensures it waits for the decrement action to finalize.\n"
"3. Upon successful execution, the user is notified with an alert indicating the counter's decrement.\n"
"4. Should any errors arise during the interaction, the user is promptly alerted with the pertinent error message."
msgstr ""

#: src/ch02-07-01-00-counter-ui.md:197
msgid "## Fetching the Current Count with `get_current_count` Function"
msgstr ""

#: src/ch02-07-01-00-counter-ui.md:199
msgid ""
"```javascript\n"
"const getCounter = async () => {\n"
"  const provider = new Provider({\n"
"    sequencer: { network: constants.NetworkName.SN_MAIN },\n"
"  });\n"
"  try {\n"
"    const mycontract = new Contract(contractAbi, contractAddress, provider);\n"
"    const num = await mycontract.get_current_count();\n"
"    setRetrievedValue(num.toString());\n"
"  } catch (err) {\n"
"    alert(err.message);\n"
"  }\n"
"};\n"
"```"
msgstr ""

#: src/ch02-07-01-00-counter-ui.md:214
msgid "The **`getCounter`** function is designed to retrieve the current count from a smart contract. Here's a breakdown of its operation:"
msgstr ""

#: src/ch02-07-01-00-counter-ui.md:216
msgid ""
"1. Establishes a provider instance, specifying the sequencer network – in this instance, it's set to the **`mainnet`** through **`constants.NetworkName.SN_MAIN`**.\n"
"2. With this provider, it then initiates a contract instance using the provided contract's ABI, its address, and the aforementioned provider.\n"
"3. The function then invokes the **`get_current_count`** method of the contract to fetch the current count. This is an asynchronous action, and the program waits for its "
"completion with the **`await`** keyword.\n"
"4. Once successfully retrieved, the count, which is presumably a number, is converted to a string and stored using the **`setRetrievedValue`** function.\n"
"5. In the event of any errors during the process, an alert provides the user with the relevant error message."
msgstr ""

#: src/ch02-07-01-00-counter-ui.md:222
msgid ""
"It's essential to emphasize that while performing read operations, like fetching data from a blockchain network, the function uses the provider. Unlike write operations, "
"which typically require a signer (or an account) for transaction signing, read operations don't mandate such authentication. Thus, in this function, only the provider is "
"specified, and not the signer."
msgstr ""

#: src/ch02-07-01-00-counter-ui.md:224
#, fuzzy
msgid "## Wrapping It Up: Integrating a Frontend with a Counter Smart Contract"
msgstr "## Interactuando con el Contrato Starknet"

#: src/ch02-07-01-00-counter-ui.md:226
msgid "In this tutorial, we review the process of integrating a basic counter smart contract with a frontend application."
msgstr ""

#: src/ch02-07-01-00-counter-ui.md:228
msgid "Here's a quick recap:"
msgstr ""

#: src/ch02-07-01-00-counter-ui.md:230
msgid ""
"1. **Establishing Connection**: With the **`connectWallet`** function, we made seamless connections to the blockchain, paving the way for interactions with our smart "
"contract.\n"
"2. **Terminating Connection**: The **`disconnectWallet`** function ensures that users can safely terminate their active connections to the blockchain, maintaining security "
"and control.\n"
"3. **Interacting with the Smart Contract**: Using the **`increaseCounter`**, **`decreaseCounter`**, and **`getCounter`** functions, we explored how to:\n"
"   - Initiate transactions\n"
"   - Adjust the counter value (increment or decrement)\n"
"   - Fetch data from the blockchain"
msgstr ""

#: src/ch02-07-01-01-erc20-ui.md:1 src/ch02-08-01-01-erc20-ui.md:1
msgid "# ERC-20 UI"
msgstr "# ERC-20 UI"

#: src/ch02-07-01-01-erc20-ui.md:3
#, fuzzy
msgid "This guide offers steps to build an ERC20 smart contract using Cairo and to incorporate it within a React web application with StarknetJS. Readers will:"
msgstr "Esta guía ofrece pasos para crear un contrato inteligente ERC20 usando Cairo e incorporarlo dentro de una aplicación web React con Starknet React. Los lectores:"

#: src/ch02-07-01-01-erc20-ui.md:5 src/ch02-08-01-01-erc20-ui.md:5
msgid ""
"- Understand how to implement the ERC20 interface\n"
"- Learn how to deploy contracts on the Starknet network\n"
"- Discover ways to engage with contracts within a React application\n"
"- Design their own ERC20 token and initiate it on Starknet"
msgstr ""
"- Comprender cómo implementar la interfaz ERC20.\n"
"- Aprenda a implementar contratos en la red Starknet\n"
"- Descubra formas de interactuar con contratos dentro de una aplicación React\n"
"- Diseñar su propio token ERC20 e iniciarlo en Starknet"

#: src/ch02-07-01-01-erc20-ui.md:10
#, fuzzy
msgid ""
"A prerequisite for this guide is a foundational understanding of both the Cairo programming language and StarknetJS. Additionally, ensure Node.js and NPM are installed on "
"the system."
msgstr ""
"Un requisito previo para esta guía es una comprensión básica tanto del lenguaje de programación Cairo como de ReactJS. Además, asegúrese de que Node.js y NPM estén "
"instalados en el sistema."

#: src/ch02-07-01-01-erc20-ui.md:12 src/ch02-08-01-01-erc20-ui.md:12
msgid "The example will walk through creating an ERC20 token named MKT and crafting a web3 interface for functionalities such as balance verification and token transfer."
msgstr ""
"El ejemplo explicará la creación de un token ERC20 llamado MKT y la creación de una interfaz web3 para funcionalidades como la verificación de saldo y la transferencia de "
"tokens."

#: src/ch02-07-01-01-erc20-ui.md:14
#, fuzzy
msgid "<img alt=\"Basic Dapp ERC20\" src=\"img/ch02-basic-dapp-screenshot_js.png\" class=\"center\" style=\"width: 75%;\" />"
msgstr "<img alt=\"Basic Dapp ERC20\" src=\"img/ch02-basic-dapp-screenshot.png\" class=\"center\" style=\"width: 75%;\" />"

#: src/ch02-07-01-01-erc20-ui.md:16 src/ch02-08-01-01-erc20-ui.md:16
msgid "Throughout this guide, the following tools and libraries will be utilized:"
msgstr "A lo largo de esta guía, se utilizarán las siguientes herramientas y bibliotecas:"

#: src/ch02-07-01-01-erc20-ui.md:18
#, fuzzy
msgid ""
"- Scarb 0.7.0 with Cairo 2.2.0\n"
"- Starkli 0.1.9\n"
"- Oppenzeppelin libraries v0.7.0\n"
"- StarknetJS v5.19.5\n"
"- get-starknet v3.0.1\n"
"- NodeJS v19.6.1\n"
"- Next.js 13.5.5\n"
"- Visual Studio Code\n"
"- Vercel"
msgstr ""
"- Scarb 0.7.0 with Cairo 2.2.0\n"
"- Starkli 0.1.9\n"
"- Oppenzeppelin libraries v0.7.0\n"
"- Starknet React v1.0.4\n"
"- NodeJS v19.6.1\n"
"- Next.js 13.1.6\n"
"- Visual Studio Code\n"
"- Vercel"

#: src/ch02-07-01-01-erc20-ui.md:28 src/ch02-08-01-01-erc20-ui.md:27
msgid "## Initiating a New Starknet Project"
msgstr "## Iniciando un Nuevo Proyecto en Starknet"

#: src/ch02-07-01-01-erc20-ui.md:30 src/ch02-08-01-01-erc20-ui.md:29
msgid "Begin by establishing a new Starknet project named \"erc20\" using Scarb:"
msgstr "Comience estableciendo un nuevo proyecto Starknet llamado \"erc20\" usando Scarb:"

#: src/ch02-07-01-01-erc20-ui.md:32 src/ch02-08-01-01-erc20-ui.md:31
msgid ""
"```bash\n"
"mkdir erc20\n"
"cd erc20\n"
"scarb init --name erc20\n"
"```"
msgstr ""
"```bash\n"
"mkdir erc20\n"
"cd erc20\n"
"scarb init --name erc20\n"
"```"

#: src/ch02-07-01-01-erc20-ui.md:38 src/ch02-08-01-01-erc20-ui.md:37
msgid "Subsequently, update the Scarb.toml to include the essential OpenZeppelin libraries. Post edits, the Scarb.toml should appear as:"
msgstr "Posteriormente, actualice Scarb.toml para incluir las bibliotecas esenciales de OpenZeppelin. Después de las ediciones, Scarb.toml debería aparecer como:"

#: src/ch02-07-01-01-erc20-ui.md:40 src/ch02-08-01-01-erc20-ui.md:39
#, fuzzy
msgid ""
"```toml\n"
"[package]\n"
"name = \"erc20\"\n"
"version = \"0.1.0\"\n"
"\n"
"# For more keys and definitions, visit https://docs.swmansion.com/scarb/docs/reference/manifest.html\n"
"\n"
"[dependencies]\n"
"starknet = \">=2.2.0\"\n"
"openzeppelin = { git = \"https://github.com/OpenZeppelin/cairo-contracts.git\", tag = \"v0.7.0\" }\n"
"\n"
"[[target.starknet-contract]]\n"
"```"
msgstr ""
"```toml\n"
"[package]\n"
"name = \"erc20\"\n"
"version = \"0.1.0\"\n"
"\n"
"# For more keys and definitions, visit https://docs.swmansion.com/scarb/docs/reference/manifest.html\n"
"\n"
"[dependencies]\n"
"starknet = \">=2.2.0\"\n"
"openzeppelin = { git = \"https://github.com/OpenZeppelin-contracts.git\", tag = \"v0.7.0\" }\n"
"\n"
"[[target.starknet-contract]]\n"
"```"

#: src/ch02-07-01-01-erc20-ui.md:54 src/ch02-08-01-01-erc20-ui.md:53
msgid "## Implementing the ERC20 Token"
msgstr "## Implementación del Token ERC20"

#: src/ch02-07-01-01-erc20-ui.md:56 src/ch02-08-01-01-erc20-ui.md:55
msgid "Begin by creating a new file named `src/erc20.cairo`. In this file, the ERC20 token named MKT, along with its associated functions, will be defined:"
msgstr "Comience creando un nuevo archivo llamado `src/erc20.cairo`. En este archivo se definirá el token ERC20 denominado MKT, junto con sus funciones asociadas:"

#: src/ch02-07-01-01-erc20-ui.md:58 src/ch02-08-01-01-erc20-ui.md:57
msgid ""
"```rust\n"
"#[starknet::contract]\n"
"mod erc20 {\n"
"    use starknet::ContractAddress;\n"
"    use openzeppelin::token::erc20::ERC20;\n"
"\n"
"    #[storage]\n"
"    struct Storage {}\n"
"\n"
"    #[constructor]\n"
"    fn constructor(\n"
"        ref self: ContractState,\n"
"        initial_supply: u256,\n"
"        recipient: ContractAddress\n"
"    ) {\n"
"        let name = 'MyToken';\n"
"        let symbol = 'MTK';\n"
"\n"
"        let mut unsafe_state = ERC20::unsafe_new_contract_state();\n"
"        ERC20::InternalImpl::initializer(ref unsafe_state, name, symbol);\n"
"        ERC20::InternalImpl::_mint(ref unsafe_state, recipient, initial_supply);\n"
"    }\n"
"\n"
"    #[external(v0)]\n"
"    #[generate_trait]\n"
"    impl Ierc20Impl of Ierc20 {\n"
"        fn balance_of(self: @ContractState, account: ContractAddress) -> u256 {\n"
"            let unsafe_state = ERC20::unsafe_new_contract_state();\n"
"            ERC20::ERC20Impl::balance_of(@unsafe_state, account)\n"
"        }\n"
"\n"
"        fn transfer(ref self: ContractState, recipient: ContractAddress, amount: u256) -> bool {\n"
"            let mut unsafe_state = ERC20::unsafe_new_contract_state();\n"
"            ERC20::ERC20Impl::transfer(ref unsafe_state, recipient, amount)\n"
"        }\n"
"    }\n"
"}\n"
"```"
msgstr ""
"```rust\n"
"#[starknet::contract]\n"
"mod erc20 {\n"
"    use starknet::ContractAddress;\n"
"    use openzeppelin::token::erc20::ERC20;\n"
"\n"
"    #[storage]\n"
"    struct Storage {}\n"
"\n"
"    #[constructor]\n"
"    fn constructor(\n"
"        ref self: ContractState,\n"
"        initial_supply: u256,\n"
"        recipient: ContractAddress\n"
"    ) {\n"
"        let name = 'MyToken';\n"
"        let symbol = 'MTK';\n"
"\n"
"        let mut unsafe_state = ERC20::unsafe_new_contract_state();\n"
"        ERC20::InternalImpl::initializer(ref unsafe_state, name, symbol);\n"
"        ERC20::InternalImpl::_mint(ref unsafe_state, recipient, initial_supply);\n"
"    }\n"
"\n"
"    #[external(v0)]\n"
"    #[generate_trait]\n"
"    impl Ierc20Impl of Ierc20 {\n"
"        fn balance_of(self: @ContractState, account: ContractAddress) -> u256 {\n"
"            let unsafe_state = ERC20::unsafe_new_contract_state();\n"
"            ERC20::ERC20Impl::balance_of(@unsafe_state, account)\n"
"        }\n"
"\n"
"        fn transfer(ref self: ContractState, recipient: ContractAddress, amount: u256) -> bool {\n"
"            let mut unsafe_state = ERC20::unsafe_new_contract_state();\n"
"            ERC20::ERC20Impl::transfer(ref unsafe_state, recipient, amount)\n"
"        }\n"
"    }\n"
"}\n"
"```"

#: src/ch02-07-01-01-erc20-ui.md:97
#, fuzzy
msgid "<img alt=\"Basic Dapp ERC20\" src=\"img/ch02-basic-dapp-erc20_js.png\" class=\"center\" style=\"width: 75%;\" />"
msgstr "<img alt=\"Basic Dapp ERC20\" src=\"img/ch02-basic-dapp-erc20.png\" class=\"center\" style=\"width: 75%;\" />"

#: src/ch02-07-01-01-erc20-ui.md:99 src/ch02-08-01-01-erc20-ui.md:98
#, fuzzy
msgid "Now edit `src/lib.cairo` and replace the content with:"
msgstr "Borre todo el contenido en `src/lib.cairo` y reemplácelo con lo siguiente:"

#: src/ch02-07-01-01-erc20-ui.md:101 src/ch02-08-01-01-erc20-ui.md:100
#, fuzzy
msgid ""
"```rust\n"
"mod erc20;\n"
"```"
msgstr ""
"```bash\n"
"vercel\n"
"```"

#: src/ch02-07-01-01-erc20-ui.md:105 src/ch02-08-01-01-erc20-ui.md:104
#, fuzzy
msgid "<img alt=\"Basic Dapp ERC20\" src=\"img/ch02-basic-dapp-erc20_lib_js.png\" class=\"center\" style=\"width: 75%;\" />"
msgstr "<img alt=\"Basic Dapp ERC20\" src=\"img/ch02-basic-dapp-erc20.png\" class=\"center\" style=\"width: 75%;\" />"

#: src/ch02-07-01-01-erc20-ui.md:107 src/ch02-08-01-01-erc20-ui.md:106
msgid "Upon completing your contract, proceed to compile it using Scarb:"
msgstr "Al completar tu contrato, procede a compilarlo usando Scarb:"

#: src/ch02-07-01-01-erc20-ui.md:109 src/ch02-08-01-01-erc20-ui.md:108
msgid ""
"```bash\n"
"scarb build\n"
"```"
msgstr ""
"```bash\n"
"scarb build\n"
"```"

#: src/ch02-07-01-01-erc20-ui.md:113
#, fuzzy
msgid "Subsequent to the compilation, declare the smart contract on the Starknet testnet (using your own account and keystore):"
msgstr "Después de la compilación, declare el contrato inteligente en la red de prueba de Starknet:"

#: src/ch02-07-01-01-erc20-ui.md:115 src/ch02-08-01-01-erc20-ui.md:114
msgid ""
"```bash\n"
"starkli declare target/dev/erc20_erc20.sierra.json --account ../../demo-account.json --keystore ../../demo-key.json --compiler-version 2.1.0 --network goerli-1 --watch\n"
"```"
msgstr ""
"```bash\n"
"starkli declare target/dev/erc20_erc20.sierra.json --account ../../demo-account.json --keystore ../../demo-key.json --compiler-version 2.1.0 --network goerli-1 --watch\n"
"```"

#: src/ch02-07-01-01-erc20-ui.md:119 src/ch02-07-01-01-erc20-ui.md:146 src/ch02-08-01-01-erc20-ui.md:118 src/ch02-08-01-01-erc20-ui.md:145
msgid "The output should appear similar to:"
msgstr "El resultado debería ser similar a:"

#: src/ch02-07-01-01-erc20-ui.md:121 src/ch02-08-01-01-erc20-ui.md:120
#, fuzzy
msgid ""
"```bash\n"
"Enter keystore password:\n"
"Declaring Cairo 1 class: 0x04940154eae35788e899ceb0ef2794eaa5ea6818af5c1c726d6d278fd4979713\n"
"... [shortened for brevity]\n"
"Class hash declared: 0x04940154eae35788e899ceb0ef2794eaa5ea6818af5c1c726d6d278fd4979713\n"
"```"
msgstr ""
"```bash\n"
"Enter keystore password: \n"
"Declaring Cairo 1 class: 0x04940154eae35788e899ceb0ef2794eaa5ea6818af5c1c726d6d278fd4979713\n"
"... [shortened for brevity]\n"
"Class hash declared: 0x04940154eae35788e899ceb0ef2794eaa5ea6818af5c1c726d6d278fd4979713\n"
"```"

#: src/ch02-07-01-01-erc20-ui.md:128 src/ch02-08-01-01-erc20-ui.md:127
msgid "In cases where no modifications have been made to the provided contract, a notification will indicate that the contract has previously been declared on Starknet:"
msgstr ""
"En los casos en que no se hayan realizado modificaciones al contrato proporcionado, una notificación indicará que el contrato ha sido declarado previamente en Starknet:"

#: src/ch02-07-01-01-erc20-ui.md:130 src/ch02-08-01-01-erc20-ui.md:129
#, fuzzy
msgid ""
"```bash\n"
"Enter keystore password:\n"
"Not declaring class as it's already declared. Class hash: 0x04940154eae35788e899ceb0ef2794eaa5ea6818af5c1c726d6d278fd4979713\n"
"```"
msgstr ""
"```bash\n"
"Enter keystore password: \n"
"Not declaring class as it's already declared. Class hash: 0x04940154eae35788e899ceb0ef2794eaa5ea6818af5c1c726d6d278fd4979713\n"
"```"

#: src/ch02-07-01-01-erc20-ui.md:135 src/ch02-08-01-01-erc20-ui.md:134
msgid "## Deploying the ERC20 Contract"
msgstr "## Implementación del Contrato ERC20"

#: src/ch02-07-01-01-erc20-ui.md:137 src/ch02-08-01-01-erc20-ui.md:136
msgid "Proceed to deploy the MKT Token using Starkli. Provide these arguments for successful deployment:"
msgstr "Proceda a implementar el token MKT usando Starkli. Proporcione estos argumentos para una implementación exitosa:"

#: src/ch02-07-01-01-erc20-ui.md:139
#, fuzzy
msgid ""
"- `Initial mint`: Mint 1,000,000 tokens. Given that the MKT token comprises 18 decimals (a standard of OpenZeppelin), the input required is 1,000,000 \\* 10^18 or "
"0xd3c21bcecceda1000000. Due to the contract's expectation of a u256 mint value, provide both low and high values: 0xd3c21bcecceda1000000 and 0 respectively.\n"
"- `Receiver address`: Use a preferred address who wiil be the initial recipient of 1,000,000 MKT. In this example: "
"0x0334863e3e851de87fb4b6b6113aa2a6b40ea20f22dbec55536e4eac912206fc"
msgstr ""
"- `Initial mint`: Acuña 1.000.000 de tokens. Dado que el token MKT consta de 18 decimales (un estándar de OpenZeppelin), la entrada requerida es 1.000.000 * 10^18 o "
"0xd3c21bcecceda1000000. Debido a la expectativa del contrato de un valor perfecto de u256, proporcione valores bajos y altos: 0xd3c21bcecceda1000000 y 0 respectivamente.\n"
"- `Receiver address`: Utilice una dirección preferida. En este ejemplo: 0x0334863e3e851de87fb4b6b6113aa2a6b40ea20f22dbec55536e4eac912206fc"

#: src/ch02-07-01-01-erc20-ui.md:142 src/ch02-08-01-01-erc20-ui.md:141
msgid ""
"```bash\n"
"starkli deploy 0x04940154eae35788e899ceb0ef2794eaa5ea6818af5c1c726d6d278fd4979713 --account ../../demo-account.json --keystore ../../demo-key.json --network goerli-1 --watch "
"0xd3c21bcecceda1000000 0 0x0334863e3e851de87fb4b6b6113aa2a6b40ea20f22dbec55536e4eac912206fc\n"
"```"
msgstr ""
"```bash\n"
"starkli deploy 0x04940154eae35788e899ceb0ef2794eaa5ea6818af5c1c726d6d278fd4979713 --account ../../demo-account.json --keystore ../../demo-key.json --network goerli-1 --watch "
"0xd3c21bcecceda1000000 0 0x0334863e3e851de87fb4b6b6113aa2a6b40ea20f22dbec55536e4eac912206fc\n"
"```"

#: src/ch02-07-01-01-erc20-ui.md:148 src/ch02-08-01-01-erc20-ui.md:147
#, fuzzy
msgid ""
"```bash\n"
"Enter keystore password:\n"
"... [shortened for brevity]\n"
"Contract deployed: 0x001892d81e09cb2c2005f0112891dacb92a6f8ce571edd03ed1f3e549abcf37f\n"
"```"
msgstr ""
"```bash\n"
"Enter keystore password: \n"
"... [shortened for brevity]\n"
"Contract deployed: 0x001892d81e09cb2c2005f0112891dacb92a6f8ce571edd03ed1f3e549abcf37f\n"
"```"

#: src/ch02-07-01-01-erc20-ui.md:154 src/ch02-08-01-01-erc20-ui.md:153
msgid ""
"NOTE: The deployed address received will differ for every user. Retain this address, as it will replace instances in subsequent TypeScript files to match the specific "
"contract address."
msgstr ""
"NOTA: La dirección implementada recibida será diferente para cada usuario. Conserve esta dirección, ya que reemplazará las instancias en archivos TypeScript posteriores para "
"que coincidan con la dirección del contrato específica."

#: src/ch02-07-01-01-erc20-ui.md:156 src/ch02-08-01-01-erc20-ui.md:155
msgid "Well done! The Cairo ERC20 smart contract has been deployed successfully on Starknet."
msgstr "¡Bien hecho! El smart contract en Cairo de ERC20 se implementó con éxito en Starknet."

#: src/ch02-07-01-01-erc20-ui.md:158 src/ch02-08-01-01-erc20-ui.md:173
msgid "## Setting Up a New React Project"
msgstr "## Configurando un Nuevo Proyecto de React"

#: src/ch02-07-01-01-erc20-ui.md:160
#, fuzzy
msgid ""
"With the contract in place, initiate the development of the web application. Begin by\n"
"setting up our react project. To do this, Nextjs framework provides the `create-next-app` script that streamlines the setup of a Nextjs application:"
msgstr "Con el contrato en vigor, iniciar el desarrollo de la aplicación web. Comience incorporando la biblioteca Starknet React:"

#: src/ch02-07-01-01-erc20-ui.md:163
msgid ""
"```bash\n"
"npx create-next-app@latest erc20_web --use-npm\n"
"✔ Would you like to use TypeScript? … Yes\n"
"✔ Would you like to use ESLint? … Yes\n"
"✔ Would you like to use Tailwind CSS? … Yes\n"
"✔ Would you like to use `src/` directory? … Yes\n"
"✔ Would you like to use App Router? (recommended) … Yes\n"
"✔ Would you like to customize the default import alias (@/*)? … No\n"
"```"
msgstr ""

#: src/ch02-07-01-01-erc20-ui.md:173
#, fuzzy
msgid "Then, you should see something like this:"
msgstr "El comando se vería así:"

#: src/ch02-07-01-01-erc20-ui.md:175
msgid ""
"```bash\n"
"Creating a new Next.js app in /home/kali/cairo/erc20_web.\n"
"Using npm.\n"
"Initializing project with template: app-tw\n"
"Installing dependencies:\n"
"- react\n"
"- react-dom\n"
"- next\n"
"\n"
"... [shortened for brevity]\n"
"\n"
"Initialized a git repository.\n"
"Success! Created erc20_web at /home/kali/cairo/erc20_web\n"
"```"
msgstr ""

#: src/ch02-07-01-01-erc20-ui.md:190
#, fuzzy
msgid "## Installing the Starknet.js Library"
msgstr "## Instalación de la Biblioteca Starknet React"

#: src/ch02-07-01-01-erc20-ui.md:192
msgid "Now, let's install the starknet.js and recommended get-starknet (manage wallet connections) libraries:"
msgstr ""

#: src/ch02-07-01-01-erc20-ui.md:194
#, fuzzy
msgid ""
"```bash\n"
"cd erc20_web\n"
"npm install get-starknet\n"
"```"
msgstr ""
"```bash\n"
"cd erc20_web/\n"
"npm run dev\n"
"```"

#: src/ch02-07-01-01-erc20-ui.md:199 src/ch02-07-01-01-erc20-ui.md:213
msgid "You should see something like this:"
msgstr ""

#: src/ch02-07-01-01-erc20-ui.md:201
msgid ""
"```bash\n"
"added 3 packages, changed 1 package, and audited 1549 packages in 7s\n"
"... [shortened for brevity]\n"
"Run `npm audit` for details.\n"
"```"
msgstr ""

#: src/ch02-07-01-01-erc20-ui.md:207
#, fuzzy
msgid "Install starknetJS:"
msgstr "npm install starknet"

#: src/ch02-07-01-01-erc20-ui.md:209
#, fuzzy
msgid ""
"```bash\n"
"npm install starknet\n"
"```"
msgstr "npm install starknet"

#: src/ch02-07-01-01-erc20-ui.md:215
msgid ""
"```bash\n"
"added 18 packages, and audited 1546 packages in 6s\n"
"... [shortened for brevity]\n"
"Run `npm audit` for details.\n"
"```"
msgstr ""

#: src/ch02-07-01-01-erc20-ui.md:221
#, fuzzy
msgid "Post-installation, confirm the version of the Starknet.js library:"
msgstr "Después de la instalación, confirme la versión de la biblioteca Starknet React:"

#: src/ch02-07-01-01-erc20-ui.md:223
#, fuzzy
msgid ""
"```bash\n"
"npm list starknet\n"
"\n"
"npm list get-starknet\n"
"```"
msgstr ""
"```bash\n"
"npm list @starknet-react/core\n"
"```"

#: src/ch02-07-01-01-erc20-ui.md:229
#, fuzzy
msgid "The output should display the installed version, such as `starknet@5.19.5` and `get-starknet@3.0.1`."
msgstr "El resultado debería mostrar la versión instalada, como `@starknet-react/core@1.0.4`."

#: src/ch02-07-01-01-erc20-ui.md:231
#, fuzzy
msgid "## Building our Project"
msgstr "# Construyendo un Proyecto Scarb"

#: src/ch02-07-01-01-erc20-ui.md:233
#, fuzzy
msgid "Once set up, make modifications to `erc20_web/src/app/layout.tsx` by replacing its content with the following code:"
msgstr "Una vez configurado, realice modificaciones en `erc20_web/index.tsx` reemplazando su contenido con el siguiente código:"

#: src/ch02-07-01-01-erc20-ui.md:235
msgid ""
"```typescript\n"
"import type { Metadata } from 'next'\n"
"\n"
"export const metadata: Metadata = {\n"
"  title: 'Create Next App',\n"
"  description: 'Generated by create next app',\n"
"}\n"
"\n"
"export default function RootLayout({\n"
"  children,\n"
"}: {\n"
"  children: React.ReactNode\n"
"}) {\n"
"  return (\n"
"    <html lang=\"en\">\n"
"      <body>{children}</body>\n"
"    </html>\n"
"  )\n"
"}\n"
"\n"
"```"
msgstr ""

#: src/ch02-07-01-01-erc20-ui.md:257
#, fuzzy
msgid "Now, edit `erc20_web/src/app/page.tsx` and replace its content with the following code:"
msgstr "Una vez configurado, realice modificaciones en `erc20_web/index.tsx` reemplazando su contenido con el siguiente código:"

#: src/ch02-07-01-01-erc20-ui.md:259
msgid ""
"```typescript\n"
"import Head from \"next/head\";\n"
"import App from \"../components/App\";\n"
"\n"
"export default function Home() {\n"
"\n"
"  return (\n"
"    <>\n"
"      <Head>\n"
"        <title>Homepage</title>\n"
"        <link rel=\"icon\" href=\"/favicon.ico\" />\n"
"      </Head>\n"
"      <main>\n"
"      <p>A basic web3 example with StarknetJS</p>\n"
"          <App />\n"
"      </main>\n"
"    </>\n"
"  );\n"
"}\n"
"```"
msgstr ""

#: src/ch02-07-01-01-erc20-ui.md:280 src/ch02-08-01-01-erc20-ui.md:229
msgid "## Enhancing Your React Application with Additional Features"
msgstr "## Mejora de su Aplicación React con Funciones Adicionales"

#: src/ch02-07-01-01-erc20-ui.md:282
#, fuzzy
msgid "To enhance the app's functionality, create one component (`erc20_web/src/components/App.tsx`) for balance and transfer with the following code."
msgstr ""
"Para mejorar la funcionalidad de la aplicación, cree dos componentes para saldo y transferencia. Posteriormente, actualice el archivo `Wallet.tsx` para incorporar las nuevas "
"funcionalidades:"

#: src/ch02-07-01-01-erc20-ui.md:284
msgid ""
"```typescript\n"
"'use client';\n"
"import { useState, useMemo } from \"react\"\n"
"import { connect, disconnect } from \"get-starknet\"\n"
"import { Contract, Provider, SequencerProvider, constants } from \"starknet\"\n"
"\n"
"const contractAddress = \"0x001892d81e09cb2c2005f0112891dacb92a6f8ce571edd03ed1f3e549abcf37f\"\n"
"\n"
"function App() {\n"
"  const [provider, setProvider] = useState({} as Provider)\n"
"  const [address, setAddress] = useState('')\n"
"  const [currentBlockHash, setCurrentBlockHash] = useState('')\n"
"  const [balance, setBalance] = useState('')\n"
"  const [isConnected, setIsConnected] = useState(false)\n"
"  const [recipient, setRecipient] = useState('0x');\n"
"  const [amount, setAmount] = useState('1000000000000000000');\n"
"\n"
"  const disconnectWallet = async () => {\n"
"    try {\n"
"      await disconnect({ clearLastWallet: true })\n"
"      setProvider({} as Provider)\n"
"      setAddress('')\n"
"      setIsConnected(false)\n"
"    }\n"
"    catch (error: any) {\n"
"      alert(error.message)\n"
"    }\n"
"  }\n"
"\n"
"  const connectWallet = async () => {\n"
"    try {\n"
"      const starknet = await connect()\n"
"      if (!starknet) throw new Error(\"Failed to connect to wallet.\")\n"
"      await starknet.enable({ starknetVersion: \"v5\" })\n"
"      setProvider(starknet.account)\n"
"      setAddress(starknet.selectedAddress || '')\n"
"      setIsConnected(true)\n"
"    }\n"
"    catch (error: any) {\n"
"      alert(error.message)\n"
"    }\n"
"  }\n"
"\n"
"  const checkBalance = async () => {\n"
"    try {\n"
"      // initialize contract using abi, address and provider\n"
"      const { abi: testAbi } = await provider.getClassAt(contractAddress);\n"
"      if (testAbi === undefined) { throw new Error(\"no abi.\") };\n"
"      const contract = new Contract(testAbi, contractAddress, provider)\n"
"      // make contract call\n"
"      const data = await contract.balance_of(address)\n"
"      setBalance(data.toString())\n"
"    }\n"
"    catch (error: any) {\n"
"      alert(error.message)\n"
"    }\n"
"  }\n"
"\n"
"  const transfer = async () => {\n"
"    try {\n"
"      // initialize contract using abi, address and provider\n"
"      const { abi: testAbi } = await provider.getClassAt(contractAddress);\n"
"      if (testAbi === undefined) { throw new Error(\"no abi.\") };\n"
"      const contract = new Contract(testAbi, contractAddress, provider)\n"
"      // make contract call\n"
"      await contract.transfer(recipient, amount)\n"
"    }\n"
"    catch (error: any) {\n"
"      alert(error.message)\n"
"    }\n"
"  }\n"
"\n"
"  const current_block_hash = async () => {\n"
"    try {\n"
"      const provider1 = new SequencerProvider({ baseUrl: constants.BaseUrl.SN_GOERLI });\n"
"\n"
"      const block = await provider1.getBlock(\"latest\"); // <- Get latest block\n"
"      setCurrentBlockHash(block.block_hash);\n"
"    }\n"
"    catch (error: any) {\n"
"      alert(error.message)\n"
"    }\n"
"  }\n"
"\n"
"  current_block_hash()\n"
"\n"
"  const shortenedAddress = useMemo(() => {\n"
"    if (!isConnected) return ''\n"
"    return `${address.slice(0, 6)}...${address.slice(-4)}`\n"
"  }, [isConnected, address])\n"
"\n"
"  const handleRecipientChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n"
"    setRecipient(event.target.value);\n"
"  };\n"
"\n"
"  const handleAmountChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n"
"      setAmount(event.target.value);\n"
"  };\n"
"\n"
"  return (\n"
"    <div>\n"
"      <p>Latest block hash: {currentBlockHash}</p>\n"
"      {isConnected ?\n"
"        <div>\n"
"          <span>Connected: {shortenedAddress}</span>\n"
"          <p><button onClick={()=> {disconnectWallet()}}>Disconnect</button></p>\n"
"          <hr />\n"
"          <p>Balance.</p>\n"
"          <p>{balance}</p>\n"
"          <p><button onClick={() => checkBalance()}>Check Balance</button></p>\n"
"          <hr />\n"
"          <p>Transfer.</p>\n"
"          <p>Recipient:\n"
"              <input\n"
"              type=\"text\"\n"
"              value={recipient}\n"
"              onChange={handleRecipientChange}\n"
"              />\n"
"          </p>\n"
"          <p>Amount (default 1 MKT with 18 decimals):\n"
"            <input\n"
"            type=\"number\"\n"
"            value={amount}\n"
"            onChange={handleAmountChange}\n"
"            />\n"
"          </p>\n"
"          <p>\n"
"            <button onClick={() => transfer()}>Transfer</button>\n"
"          </p>\n"
"          <hr/>\n"
"        </div> :\n"
"        <div>\n"
"          <span>Choose a wallet:</span>\n"
"          <p>\n"
"            <button onClick={() => connectWallet()}>Connect a Wallet</button>\n"
"          </p>\n"
"        </div>\n"
"      }\n"
"    </div>\n"
"  );\n"
"}\n"
"\n"
"export default App;\n"
"```"
msgstr ""

#: src/ch02-07-01-01-erc20-ui.md:429
#, fuzzy
msgid "Finally, launch the web3 application:"
msgstr "Para iniciar la aplicación web3:"

#: src/ch02-07-01-01-erc20-ui.md:431 src/ch02-08-01-01-erc20-ui.md:222
msgid ""
"```bash\n"
"cd erc20_web/\n"
"npm run dev\n"
"```"
msgstr ""
"```bash\n"
"cd erc20_web/\n"
"npm run dev\n"
"```"

#: src/ch02-07-01-01-erc20-ui.md:436
msgid "Congratulations, you have your starknetjs web3 application. Now connect your wallet in goerli testnet, check your balance and transfer MKT tokens to your friends:"
msgstr ""

#: src/ch02-07-01-01-erc20-ui.md:438
#, fuzzy
msgid "<img alt=\"Localhost\" src=\"img/ch02-basic-dapp-localhost_js.png\" class=\"center\" style=\"width: 75%;\" />"
msgstr "<img alt=\"Localhost\" src=\"img/ch02-basic-dapp-localhost.png\" class=\"center\" style=\"width: 75%;\" />"

#: src/ch02-07-01-01-erc20-ui.md:440 src/ch02-08-01-01-erc20-ui.md:392
msgid "## Deploying Your Project Online"
msgstr "## Implementación de su Proyecto Online"

#: src/ch02-07-01-01-erc20-ui.md:442 src/ch02-08-01-01-erc20-ui.md:394
msgid ""
"To share your application with friends and allow them to check their balances and transfer tokens, publish your app online. Vercel offers a straightforward way to do this:"
msgstr ""
"Para compartir su aplicación con amigos y permitirles consultar sus saldos y transferir tokens, publique su aplicación en línea. Vercel ofrece una forma sencilla de hacer "
"esto:"

#: src/ch02-07-01-01-erc20-ui.md:444 src/ch02-08-01-01-erc20-ui.md:396
msgid "### Set Up Vercel"
msgstr "### Configurar Vercel"

#: src/ch02-07-01-01-erc20-ui.md:446 src/ch02-08-01-01-erc20-ui.md:398
msgid ""
"1. Register for an account at [Vercel Signup](https://vercel.com/signup).\n"
"2. Install Vercel in your web application folder (`erc20_web`):"
msgstr ""
"1. Regístrese para obtener una cuenta en [Vercel Signup](https://vercel.com/signup).\n"
"2. Instale Vercel en la carpeta de su aplicación web (`erc20_web`):"

#: src/ch02-07-01-01-erc20-ui.md:449
#, fuzzy
msgid ""
"```bash\n"
"cd erc20_web/\n"
"npm i -g vercel\n"
"```"
msgstr ""
"```bash\n"
"cd erc20_web/\n"
"npm i -g vercel\n"
"vercel init\n"
"```"

#: src/ch02-07-01-01-erc20-ui.md:454 src/ch02-08-01-01-erc20-ui.md:407
msgid "3. Authenticate your Vercel account:"
msgstr "3. Autentique su cuenta Vercel:"

#: src/ch02-07-01-01-erc20-ui.md:456
msgid ""
"```bash\n"
"vercel login\n"
"Continue with Email (or select your preferent login method)\n"
"```"
msgstr ""

#: src/ch02-07-01-01-erc20-ui.md:461 src/ch02-08-01-01-erc20-ui.md:413
msgid "After entering your email, check your inbox and click on the \"Verify\" button."
msgstr "Después de ingresar su correo electrónico, revise su bandeja de entrada y haga clic en el botón \"Verify\"."

#: src/ch02-07-01-01-erc20-ui.md:463
#, fuzzy
msgid ""
"<img alt=\"Vercel login\" src=\"img/ch02-basic-dapp-vercel-login_js.png\" class=\"center\" style=\"width: 75%;\" />\n"
"\n"
"<img alt=\"Vercel verify\" src=\"img/ch02-basic-dapp-vercel-verify_js.png\" class=\"center\" style=\"width: 75%;\" />"
msgstr ""
"<img alt=\"Vercel login\" src=\"img/ch02-basic-dapp-vercel-login.png\" class=\"center\" style=\"width: 75%;\" />\n"
"\n"
"<img alt=\"Vercel verify\" src=\"img/ch02-basic-dapp-vercel-verify.png\" class=\"center\" style=\"width: 75%;\" />"

#: src/ch02-07-01-01-erc20-ui.md:467 src/ch02-08-01-01-erc20-ui.md:419
msgid "On successful verification, you'll receive a confirmation in the console."
msgstr "Si la verificación es exitosa, recibirás una confirmación en la consola."

#: src/ch02-07-01-01-erc20-ui.md:469 src/ch02-08-01-01-erc20-ui.md:421
msgid "4. Link your project to Vercel:"
msgstr "4. Vincula tu proyecto a Vercel:"

#: src/ch02-07-01-01-erc20-ui.md:471
msgid ""
"```bash\n"
"vercel link\n"
"? Set up “~/cairo/erc20_web”? [Y/n] y\n"
"? Which scope should contain your project? (just press enter)\n"
"? Link to existing project? [y/N] n\n"
"? What’s your project’s name? erc20-web\n"
"? In which directory is your code located? ./\n"
"? Want to modify these settings? [y/N] n\n"
"✅  Linked erc20-web (created .vercel)\n"
"```"
msgstr ""

#: src/ch02-07-01-01-erc20-ui.md:482 src/ch02-08-01-01-erc20-ui.md:427
msgid "5. Upload it:"
msgstr "5. Cárgalo:"

#: src/ch02-07-01-01-erc20-ui.md:484 src/ch02-08-01-01-erc20-ui.md:429
msgid ""
"```bash\n"
"vercel\n"
"```"
msgstr ""
"```bash\n"
"vercel\n"
"```"

#: src/ch02-07-01-01-erc20-ui.md:488 src/ch02-08-01-01-erc20-ui.md:433
msgid "6. Publish your project:"
msgstr "6. Publica tu proyecto:"

#: src/ch02-07-01-01-erc20-ui.md:490
msgid ""
"```bash\n"
"vercel --prod\n"
"✅  Production: https://erc20-ch3cn791b-devnet0x-gmailcom.vercel.app [1s]\n"
"```"
msgstr ""

#: src/ch02-07-01-01-erc20-ui.md:495
#, fuzzy
msgid "Check your production URL and congratulations! Your MKT token web3 application is now accessible to everyone."
msgstr "¡Felicidades! Su aplicación web3 de token MKT ahora es accesible para todos."

#: src/ch02-07-01-01-erc20-ui.md:497
#, fuzzy
msgid "<img alt=\"Vercel publication\" src=\"img/ch02-basic-dapp-pub1_js.png\" class=\"center\" style=\"width: 75%;\" />"
msgstr "<img alt=\"Vercel publication\" src=\"img/ch02-basic-dapp-pub1.png\" class=\"center\" style=\"width: 75%;\" />"

#: src/ch02-07-01-01-erc20-ui.md:499 src/ch02-08-01-01-erc20-ui.md:443
msgid "Engage with your app by:"
msgstr "Interactúe con su aplicación de la siguiente manera:"

#: src/ch02-07-01-01-erc20-ui.md:501 src/ch02-08-01-01-erc20-ui.md:445
#, fuzzy
msgid "- Connecting your wallet:"
msgstr "* Conectando tu wallet:"

#: src/ch02-07-01-01-erc20-ui.md:503
#, fuzzy
msgid "<img alt=\"Vercel publication 2\" src=\"img/ch02-basic-dapp-pub2_js.png\" class=\"center\" style=\"width: 75%;\" />"
msgstr "<img alt=\"Vercel publication 2\" src=\"img/ch02-basic-dapp-pub2.png\" class=\"center\" style=\"width: 75%;\" />"

#: src/ch02-07-01-01-erc20-ui.md:505 src/ch02-08-01-01-erc20-ui.md:449
#, fuzzy
msgid "- Checking your balance:"
msgstr "* Consulta de tu balance:"

#: src/ch02-07-01-01-erc20-ui.md:507
#, fuzzy
msgid "<img alt=\"Vercel publication 3\" src=\"img/ch02-basic-dapp-pub3_js.png\" class=\"center\" style=\"width: 75%;\" />"
msgstr "<img alt=\"Vercel publication 3\" src=\"img/ch02-basic-dapp-pub3.png\" class=\"center\" style=\"width: 75%;\" />"

#: src/ch02-07-01-01-erc20-ui.md:509 src/ch02-08-01-01-erc20-ui.md:453
#, fuzzy
msgid "- Transferring tokens:"
msgstr "* Transferencia de tokens:"

#: src/ch02-07-01-01-erc20-ui.md:511
#, fuzzy
msgid "<img alt=\"Vercel publication 4\" src=\"img/ch02-basic-dapp-pub4_js.png\" class=\"center\" style=\"width: 75%;\" />"
msgstr "<img alt=\"Vercel publication 4\" src=\"img/ch02-basic-dapp-pub4.png\" class=\"center\" style=\"width: 75%;\" />"

#: src/ch02-07-01-01-erc20-ui.md:513 src/ch02-08-01-01-erc20-ui.md:457
msgid "## Wrapping Up"
msgstr "## Conclusión"

#: src/ch02-07-01-01-erc20-ui.md:515
#, fuzzy
msgid ""
"Throughout this tutorial, you've walked through the steps to craft a web3 application using React, StarknetJS and Cairo. This application, complete with an ERC20 smart "
"contract, offers a modern web interface for user interaction. Here's a snapshot of your achievements:"
msgstr ""
"A lo largo de este tutorial, ha seguido los pasos para crear una aplicación web3 utilizando React y Starknet Cairo. Esta aplicación, completa con un contrato inteligente "
"ERC20, ofrece una interfaz web moderna para la interacción del usuario. Aquí tienes una instantánea de tus logros:"

#: src/ch02-07-01-01-erc20-ui.md:517
#, fuzzy
msgid ""
"- **Project Initialization**: Set up a Starknet project with Scarb and incorporated OpenZeppelin libraries.\n"
"\n"
"- **Crafting the ERC20 Contract**: Developed an ERC20 token using Cairo, enriched with functionalities like balance checks and token transfers. This was then compiled and "
"launched on the Starknet network.\n"
"\n"
"- **React Application**: Built a React application powered by StarknetJS, featuring components dedicated to balance inquiries and token transactions.\n"
"\n"
"- **Online Deployment**: Brought your application to a wider audience by deploying it on Vercel. This empowered users to connect their wallets, scrutinize their balances, "
"and execute token transactions."
msgstr ""
"- **Inicialización del proyecto**: Configure un proyecto Starknet con Scarb y bibliotecas OpenZeppelin incorporadas.\n"
"  \n"
"- **Elaboración del contrato ERC20**: Desarrollé un token ERC20 usando Cairo, enriquecido con funcionalidades como verificación de saldo y transferencias de tokens. Luego se "
"compiló y se lanzó en la red Starknet.\n"
"\n"
"- **Aplicación React**: creó una aplicación React impulsada por Starknet React, que presenta componentes dedicados a consultas de saldo y transacciones de tokens.\n"
"\n"
"- **Creación de ABI**: Produje el ABI para el token MKT, un componente crítico para vincularse con el contrato.\n"
"\n"
"- **Implementación en línea**: llevó su aplicación a una audiencia más amplia al implementarla en Vercel. Esto permitió a los usuarios conectar sus billeteras, examinar sus "
"saldos y ejecutar transacciones simbólicas."

#: src/ch02-07-01-01-erc20-ui.md:525 src/ch02-08-01-01-erc20-ui.md:470
msgid ""
"The insights you've gathered from this tutorial lay a solid groundwork for creating intricate web3 applications. You're now equipped with the prowess to craft more intricate "
"decentralized applications and smart contracts. The vast expanse of decentralized finance and blockchain is ripe for your innovative inputs. Dive in and happy coding!"
msgstr ""
"Los conocimientos que ha recopilado en este tutorial sientan una base sólida para crear aplicaciones web3 complejas. Ahora está equipado con la destreza para crear "
"aplicaciones descentralizadas y contratos inteligentes más complejos. La vasta extensión de las finanzas descentralizadas y blockchain está lista para sus aportes "
"innovadores. ¡Sumérgete y feliz codificación!"

#: src/ch02-08-starknet-react.md:1
msgid "# Starknet-React: React Integration"
msgstr "# Starknet-React: Integración de React"

#: src/ch02-08-starknet-react.md:3
msgid ""
"Several tools exist in the starknet ecosystem to build the front-end for\n"
"your application. The most popular ones are:"
msgstr ""
"Existen varias herramientas en el ecosistema Starknet para construir el front-end de\n"
"su aplicación. Las más populares son:"

#: src/ch02-08-starknet-react.md:6
msgid ""
"- [starknet-react](https://github.com/apibara/starknet-react)\n"
"  ([documentation](https://apibara.github.io/starknet-react)):\n"
"  Collection of React hooks for Starknet. It is inspired by\n"
"  [wagmi](https://github.com/tmm/wagmi), powered by\n"
"  [starknet.js](https://github.com/0xs34n/starknet.js).\n"
"\n"
"- [starknet.js](https://github.com/0xs34n/starknet.js): A JavaScript\n"
"  library for interacting with Starknet contracts. It would be the\n"
"  equivalent of [web3.js](https://web3js.org/) for Ethereum."
msgstr ""
"- [starknet-react](https://github.com/apibara/starknet-react)\n"
"  ([documentation](https://apibara.github.io/starknet-react)):\n"
"  Collection of React hooks for Starknet. It is inspired by\n"
"  [wagmi](https://github.com/tmm/wagmi), powered by\n"
"  [starknet.js](https://github.com/0xs34n/starknet.js).\n"
"\n"
"- [starknet.js](https://github.com/0xs34n/starknet.js): A JavaScript\n"
"  library for interacting with Starknet contracts. It would be the\n"
"  equivalent of [web3.js](https://web3js.org/) for Ethereum."

#: src/ch02-08-starknet-react.md:16
msgid ""
"For Vue developers, vue-stark-boil, created by the team at [Don’t Panic\n"
"DAO](https://github.com/dontpanicdao), is a great option. For a deeper\n"
"understanding of Vue, visit their [website](https://vuejs.org/). The\n"
"vue-stark-boil boilerplate enables various functionalities, such as\n"
"connecting to a wallet, listening for account changes, and calling a\n"
"contract."
msgstr ""
"Para desarrolladores de Vue, vue-stark-boil, creado por el equipo de [Don’t Panic\n"
"DAO](https://github.com/dontpanicdao), es una gran opción. Para una más profunda\n"
"Para comprender Vue, visite su [sitio web](https://vuejs.org/). El\n"
"El texto estándar vue-stark-boil permite varias funcionalidades, como\n"
"conectarse a una billetera, escuchar cambios en la cuenta y llamar a un\n"
"contrato."

#: src/ch02-08-starknet-react.md:23
msgid ""
"Authored by the [Apibara](https://github.com/apibara/) team, [Starknet\n"
"React](https://github.com/apibara/starknet-react/) is an open-source\n"
"collection of React providers and hooks meticulously designed for\n"
"Starknet."
msgstr ""
"Escrito por el equipo de [Apibara](https://github.com/apibara/), [Starknet React](https://github.com/apibara/starknet-react/) es una colección de código abierto de "
"proveedores y enlaces de React meticulosamente diseñados para Starknet."

#: src/ch02-08-starknet-react.md:28
msgid ""
"To immerse in the real-world application of Starknet React, we recommend\n"
"exploring the comprehensive example dApp project at\n"
"[starknet-demo-dapp](https://github.com/finiam/starknet-demo-dapp/)."
msgstr ""
"Para sumergirse en la aplicación del mundo real de Starknet React, recomendamos explorar el proyecto dApp de ejemplo completo en\n"
"[starknet-demo-dapp](https://github.com/finiam/starknet-demo-dapp/)."

#: src/ch02-08-starknet-react.md:32
msgid "## Integrating Starknet React"
msgstr "## Integrando Starknet React"

#: src/ch02-08-starknet-react.md:34
msgid ""
"Embarking on your Starknet React journey necessitates the incorporation\n"
"of vital dependencies. Let’s start by adding them to your project."
msgstr "Embarcarse en su viaje Starknet React requiere la incorporación de dependencias vitales. Comencemos agregándolos a su proyecto."

#: src/ch02-08-starknet-react.md:37
msgid "yarn add @starknet-react/core starknet get-starknet"
msgstr "yarn add @starknet-react/core starknet get-starknet"

#: src/ch02-08-starknet-react.md:39
msgid ""
"[Starknet.js](https://www.starknetjs.com/) is an essential SDK\n"
"facilitating interactions with Starknet. In contrast,\n"
"[get-starknet](https://github.com/starknet-io/get-starknet/) is a\n"
"package adept at managing wallet connections."
msgstr ""
"[Starknet.js](https://www.starknetjs.com/) es un SDK esencial que facilita las interacciones con Starknet. Por el contrario, [get-starknet](https://github.com/starknet-io/"
"get-starknet/) es un paquete experto en gestionar conexiones de billetera."

#: src/ch02-08-starknet-react.md:44
msgid ""
"Proceed by swaddling your app within the `StarknetConfig` component.\n"
"This enveloping action offers a degree of configuration, while\n"
"simultaneously providing a React Context for the application beneath to\n"
"utilize shared data and hooks. The `StarknetConfig` component accepts a\n"
"connectors prop, allowing the definition of wallet connection options\n"
"available to the user."
msgstr ""
"Continúe envolviendo su aplicación dentro del componente `StarknetConfig`. Esta acción envolvente ofrece un grado de configuración y, al mismo tiempo, proporciona un "
"contexto de React para que la aplicación subyacente utilice datos y enlaces compartidos. El componente `StarknetConfig` acepta un accesorio de conector, lo que permite la "
"definición de opciones de conexión de billetera disponibles para el usuario."

#: src/ch02-08-starknet-react.md:51
msgid ""
"const connectors = [\n"
"      new InjectedConnector({ options: { id: \"braavos\" } }),\n"
"      new InjectedConnector({ options: { id: \"argentX\" } }),\n"
"    ];\n"
"\n"
"    return (\n"
"        <StarknetConfig\n"
"          connectors={connectors}\n"
"          autoConnect\n"
"        >\n"
"          <App />\n"
"        </StarknetConfig>\n"
"    )"
msgstr ""
"const connectors = [\n"
"      new InjectedConnector({ options: { id: \"braavos\" } }),\n"
"      new InjectedConnector({ options: { id: \"argentX\" } }),\n"
"    ];\n"
"\n"
"    return (\n"
"        <StarknetConfig\n"
"          connectors={connectors}\n"
"          autoConnect\n"
"        >\n"
"          <App />\n"
"        </StarknetConfig>\n"
"    )"

#: src/ch02-08-starknet-react.md:65
msgid "## Establishing Connection and Managing Account"
msgstr "## Establecer Conexión y Administrar Cuenta"

#: src/ch02-08-starknet-react.md:67
msgid ""
"Once the connectors are defined in the config, the stage is set to use a\n"
"hook to access these connectors, enabling users to connect their\n"
"wallets:"
msgstr ""
"Una vez que los conectores están definidos en la configuración, el escenario está listo para usar un hook para acceder a estos conectores, lo que permite a los usuarios "
"conectar sus billeteras:"

#: src/ch02-08-starknet-react.md:71
msgid ""
"export default function Connect() {\n"
"      const { connect, connectors, disconnect } = useConnectors();\n"
"\n"
"      return (\n"
"        <div>\n"
"          {connectors.map((connector) => (\n"
"            <button\n"
"              key={connector.id}\n"
"              onClick={() => connect(connector)}\n"
"              disabled={!connector.available()}\n"
"            >\n"
"              Connect with {connector.id}\n"
"            </button>\n"
"          ))}\n"
"        </div>\n"
"      );\n"
"    }"
msgstr ""
"export default function Connect() {\n"
"      const { connect, connectors, disconnect } = useConnectors();\n"
"\n"
"      return (\n"
"        <div>\n"
"          {connectors.map((connector) => (\n"
"            <button\n"
"              key={connector.id}\n"
"              onClick={() => connect(connector)}\n"
"              disabled={!connector.available()}\n"
"            >\n"
"              Connect with {connector.id}\n"
"            </button>\n"
"          ))}\n"
"        </div>\n"
"      );\n"
"    }"

#: src/ch02-08-starknet-react.md:89
msgid ""
"Observe the `disconnect` function that terminates the connection when\n"
"invoked. Post connection, access to the connected account is provided\n"
"through the `useAccount` hook, offering insight into the current state\n"
"of connection:"
msgstr ""
"Observe la función `disconnect` que finaliza la conexión cuando se invoca. Después de la conexión, el acceso a la cuenta conectada se proporciona a través del enlace "
"`useAccount`, que ofrece información sobre el estado actual de conexión:"

#: src/ch02-08-starknet-react.md:94
msgid ""
"const { address, isConnected, isReconnecting, account } = useAccount();\n"
"\n"
"    return (\n"
"        <div>\n"
"          {isConnected ? (\n"
"              <p>Hello, {address}</p>\n"
"          ) : (\n"
"            <Connect />\n"
"          )}\n"
"        </div>\n"
"    );"
msgstr ""
"const { address, isConnected, isReconnecting, account } = useAccount();\n"
"\n"
"    return (\n"
"        <div>\n"
"          {isConnected ? (\n"
"              <p>Hello, {address}</p>\n"
"          ) : (\n"
"            <Connect />\n"
"          )}\n"
"        </div>\n"
"    );"

#: src/ch02-08-starknet-react.md:106
msgid ""
"The state values, such as `isConnected` and `isReconnecting`, receive\n"
"automatic updates, simplifying UI conditional updates. This convenient\n"
"pattern shines when dealing with asynchronous processes, as it\n"
"eliminates the need to manually manage the state within your components."
msgstr ""
"Los valores de estado, como`isConnected` y `isReconnecting`, reciben actualizaciones automáticas, lo que simplifica las actualizaciones condicionales de la interfaz de "
"usuario. Este patrón conveniente brilla cuando se trata de procesos asincrónicos, ya que elimina la necesidad de administrar manualmente el estado dentro de sus componentes."

#: src/ch02-08-starknet-react.md:111
msgid ""
"Having established a connection, signing messages becomes a breeze using\n"
"the account value returned from the `useAccount` hook. For a more\n"
"streamlined experience, the `useSignTypedData` hook is at your disposal."
msgstr ""
"Una vez establecida una conexión, firmar mensajes se vuelve muy sencillo utilizando el valor de cuenta devuelto por el hook `useAccount. Para una experiencia más optimizada, "
"el hook `useSignTypedData` está a su disposición."

#: src/ch02-08-starknet-react.md:115
msgid ""
"const { data, signTypedData } = useSignTypedData(typedMessage)\n"
"\n"
"    return (\n"
"      <>\n"
"        <p>\n"
"          <button onClick={signTypedData}>Sign</button>\n"
"        </p>\n"
"        {data && <p>Signed: {JSON.stringify(data)}</p>}\n"
"      </>\n"
"    )"
msgstr ""
"const { data, signTypedData } = useSignTypedData(typedMessage)\n"
"\n"
"    return (\n"
"      <>\n"
"        <p>\n"
"          <button onClick={signTypedData}>Sign</button>\n"
"        </p>\n"
"        {data && <p>Signed: {JSON.stringify(data)}</p>}\n"
"      </>\n"
"    )"

#: src/ch02-08-starknet-react.md:126
msgid ""
"Starknet React supports signing an array of `BigNumberish` values or an\n"
"object. While signing an object, it is crucial to ensure that the data\n"
"conforms to the EIP712 type. For a more comprehensive guide on signing,\n"
"refer to the Starknet.js documentation:\n"
"[here](https://www.starknetjs.com/docs/guides/signature/)."
msgstr ""
"Starknet React admite la firma de una matriz de valores `BigNumberish` o un objeto. Al firmar un objeto, es fundamental asegurarse de que los datos se ajusten al tipo "
"EIP712. Para obtener una guía más completa sobre cómo firmar, consulte la documentación de Starknet.js: [aquí](https://www.starknetjs.com/docs/guides/signature/)."

#: src/ch02-08-starknet-react.md:132
msgid "## Displaying StarkName"
msgstr "## Mostrando StarkName"

#: src/ch02-08-starknet-react.md:134
msgid ""
"After an account has been connected, the `useStarkName` hook can be used\n"
"to retrieve the StarkName of this connected account. Related to\n"
"[Starknet.id](https://www.starknet.id/) it permits to display the user\n"
"address in a more user friendly way."
msgstr ""
"Una vez que se ha conectado una cuenta, se puede utilizar el enlace `useStarkName` para recuperar el StarkName de esta cuenta conectada. Relacionado con [Starknet.id]"
"(https://www.starknet.id/) permite mostrar la dirección del usuario de una manera más fácil de usar."

#: src/ch02-08-starknet-react.md:139
msgid ""
"const { data, isError, isLoading, status } = useStarkName({ address });\n"
"    // You can track the status of the request with the status variable ('idle' | 'error' | 'loading' | 'success')\n"
"\n"
"    if (isLoading) return <p>Loading...</p>\n"
"    return <p>Account: {isError ? address : data}</p>"
msgstr ""
"const { data, isError, isLoading, status } = useStarkName({ address });\n"
"    // You can track the status of the request with the status variable ('idle' | 'error' | 'loading' | 'success')\n"
"\n"
"    if (isLoading) return <p>Loading...</p>\n"
"    return <p>Account: {isError ? address : data}</p>"

#: src/ch02-08-starknet-react.md:145
msgid ""
"You also have additional information you can get from this hook →\n"
"**error**, **isIdle**, **isFetching**, **isSuccess**, **isFetched**,\n"
"**isFetchedAfterMount**, **isRefetching**, **refetch** which can give\n"
"you more precise information on what is happening."
msgstr ""
"También tienes información adicional que puedes obtener en este hook →\n"
"**error**, **isIdle**, **isFetching**, **isSuccess**, **isFetched**,\n"
"**isFetchedAfterMount**, **isRefetching**, **refetch** que pueden dar\n"
"usted información más precisa sobre lo que está sucediendo."

#: src/ch02-08-starknet-react.md:150
msgid "## Fetching address from StarkName"
msgstr "## Obteniendo dirección de StarkName"

#: src/ch02-08-starknet-react.md:152
msgid ""
"You could also want to retrieve an address corresponding to a StarkName.\n"
"For this purpose, you can use the `useAddressFromStarkName` hook."
msgstr ""
"También es posible que desee recuperar una dirección correspondiente a un StarkName.\n"
"Para ello, puede utilizar el hook `useAddressFromStarkName`."

#: src/ch02-08-starknet-react.md:155
msgid ""
"const { data, isLoading, isError } = useAddressFromStarkName({ name: 'vitalik.stark' })\n"
"\n"
"    if (isLoading) return <p>Loading...</p>\n"
"    if (isError) return <p>Something went wrong</p>\n"
"    return <p>Address: {data}</p>"
msgstr ""
"const { data, isLoading, isError } = useAddressFromStarkName({ name: 'vitalik.stark' })\n"
"\n"
"    if (isLoading) return <p>Loading...</p>\n"
"    if (isError) return <p>Something went wrong</p>\n"
"    return <p>Address: {data}</p>"

#: src/ch02-08-starknet-react.md:161
msgid ""
"If the provided name does not have an associated address, it will return\n"
"**\"0x0\"**"
msgstr ""
"Si el nombre proporcionado no tiene una dirección asociada, devolverá\n"
"**\"0x0\"**"

#: src/ch02-08-starknet-react.md:164
msgid "## Navigating the Network"
msgstr "## Navegando por la Red"

#: src/ch02-08-starknet-react.md:166
msgid ""
"In addition to wallet and account management, Starknet React equips\n"
"developers with hooks for network interactions. For instance, useBlock\n"
"enables the retrieval of the latest block:"
msgstr ""
"Además de la administración de cuentas y billeteras, Starknet React equipa a los desarrolladores con hooks para las interacciones de red. Por ejemplo, useBlock permite la "
"recuperación del último bloque:"

#: src/ch02-08-starknet-react.md:170
msgid ""
"const { data, isError, isFetching } = useBlock({\n"
"        refetchInterval: 10_000,\n"
"        blockIdentifier: \"latest\",\n"
"    });\n"
"\n"
"    if (isError) {\n"
"      return (\n"
"        <p>Something went wrong</p>\n"
"      )\n"
"    }\n"
"\n"
"    return (\n"
"        <p>Current block: {isFetching ? \"Loading...\" : data?.block_number}<p>\n"
"    )"
msgstr ""
"const { data, isError, isFetching } = useBlock({\n"
"        refetchInterval: 10_000,\n"
"        blockIdentifier: \"latest\",\n"
"    });\n"
"\n"
"    if (isError) {\n"
"      return (\n"
"        <p>Something went wrong</p>\n"
"      )\n"
"    }\n"
"\n"
"    return (\n"
"        <p>Current block: {isFetching ? \"Loading...\" : data?.block_number}<p>\n"
"    )"

#: src/ch02-08-starknet-react.md:185
msgid ""
"In the aforementioned code, refetchInterval controls the frequency of\n"
"data refetching. Behind the scenes, Starknet React harnesses\n"
"[react-query](https://github.com/TanStack/query/) for managing state and\n"
"queries. In addition to useBlock, Starknet React offers other hooks like\n"
"useContractRead and useWaitForTransaction, which can be configured to\n"
"update at regular intervals."
msgstr ""
"En el código mencionado anteriormente, refetchInterval controla la frecuencia de recuperación de datos. Detrás de escena, Starknet React aprovecha\n"
"[react-query](https://github.com/TanStack/query/) para gestionar el estado y las consultas. Además de useBlock, Starknet React ofrece otros hooks como useContractRead y "
"useWaitForTransaction, que se puede configurar para actualizarse a intervalos regulares."

#: src/ch02-08-starknet-react.md:192
msgid "The useStarknet hook provides direct access to the ProviderInterface:"
msgstr "El hook useStarknet proporciona acceso directo a ProviderInterface:"

#: src/ch02-08-starknet-react.md:194
msgid ""
"const { library } = useStarknet();\n"
"\n"
"    // library.getClassByHash(...)\n"
"    // library.getTransaction(...)"
msgstr ""
"const { library } = useStarknet();\n"
"\n"
"    // library.getClassByHash(...)\n"
"    // library.getTransaction(...)"

#: src/ch02-08-starknet-react.md:199
msgid "## Tracking Wallet changes"
msgstr "## Seguimiento de Cambios en la Wallet"

#: src/ch02-08-starknet-react.md:201
msgid ""
"To improve your dApp User Experience, you can track the user wallet\n"
"changes, especially when the user changes the wallet account (or\n"
"connects/disconnects). But also when the user changes the network. You\n"
"could want to reload correct balances when the user changes the account,\n"
"or to reset the state of your dApp when the user changes the network. To\n"
"do so, you can use a previous hook we already looked at: `useAccount`\n"
"and a new one `useNetwork`."
msgstr ""
"Para mejorar su experiencia de usuario de dApp, puede realizar un seguimiento de los cambios en la billetera del usuario, especialmente cuando el usuario cambia la cuenta de "
"la billetera (o se conecta/desconecta). Pero también cuando el usuario cambia de red. Es posible que desee recargar los saldos correctos cuando el usuario cambia de cuenta o "
"restablecer el estado de su dApp cuando el usuario cambia de red. Para hacerlo, puede usar un hook anterior que ya vimos: `useAccount` y uno nuevo `useNetwork`."

#: src/ch02-08-starknet-react.md:209
msgid ""
"The `useNetwork` hook can provide you with the network chain currently\n"
"in use."
msgstr "El hook `useNetwork` puede proporcionarle la cadena de red actualmente en uso."

#: src/ch02-08-starknet-react.md:212
msgid ""
"const { chain: {id, name} } = useNetwork();\n"
"\n"
"    return (\n"
"        <>\n"
"            <p>Connected chain: {name}</p>\n"
"            <p>Connected chain id: {id}</p>\n"
"        </>\n"
"    )"
msgstr ""
"const { chain: {id, name} } = useNetwork();\n"
"\n"
"    return (\n"
"        <>\n"
"            <p>Connected chain: {name}</p>\n"
"            <p>Connected chain id: {id}</p>\n"
"        </>\n"
"    )"

#: src/ch02-08-starknet-react.md:221
msgid ""
"You also have additional information you can get from this hook →\n"
"**blockExplorer**, **testnet** which can give you more precise\n"
"information about the current network being used."
msgstr ""
"También tienes información adicional que puedes obtener en este hook → **blockExplorer**, **testnet** que pueden brindarle información más precisa sobre la red que se "
"utiliza actualmente."

#: src/ch02-08-starknet-react.md:225
msgid ""
"After knowing this you have all you need to track user interaction on\n"
"the using account and network. You can use the `useEffect` hook to do\n"
"some work on changes."
msgstr ""
"Después de saber esto, tendrá todo lo que necesita para realizar un seguimiento de la interacción del usuario en la cuenta y la red que lo utiliza. Puede utilizar el hook "
"`useEffect` para trabajar un poco en los cambios."

#: src/ch02-08-starknet-react.md:229
msgid ""
"const { chain } = useNetwork();\n"
"    const { address } = useAccount();\n"
"\n"
"    useEffect(() => {\n"
"        if(address) {\n"
"            // Do some work when the user changes the account on the wallet\n"
"            // Like reloading the balances\n"
"        }else{\n"
"            // Do some work when the user disconnects the wallet\n"
"            // Like reseting the state of your dApp\n"
"        }\n"
"    }, [address]);\n"
"\n"
"    useEffect(() => {\n"
"        // Do some work when the user changes the network on the wallet\n"
"        // Like reseting the state of your dApp\n"
"    }, [chain]);"
msgstr ""
"const { chain } = useNetwork();\n"
"    const { address } = useAccount();\n"
"\n"
"    useEffect(() => {\n"
"        if(address) {\n"
"            // Do some work when the user changes the account on the wallet\n"
"            // Like reloading the balances\n"
"        }else{\n"
"            // Do some work when the user disconnects the wallet\n"
"            // Like reseting the state of your dApp\n"
"        }\n"
"    }, [address]);\n"
"\n"
"    useEffect(() => {\n"
"        // Do some work when the user changes the network on the wallet\n"
"        // Like reseting the state of your dApp\n"
"    }, [chain]);"

#: src/ch02-08-starknet-react.md:247
msgid "## Contract Interactions"
msgstr "## Interacciones del Contrato"

#: src/ch02-08-starknet-react.md:249
msgid "### Read Functions"
msgstr "### Leer Funciones"

#: src/ch02-08-starknet-react.md:251
msgid ""
"Starknet React presents useContractRead, a specialized hook for invoking\n"
"read functions on contracts, akin to wagmi. This hook functions\n"
"independently of the user’s connection status, as read operations do not\n"
"necessitate a signer."
msgstr ""
"Starknet React presenta useContractRead, un hook especializado para invocar funciones de lectura en contratos, similar a wagmi. Este hook funciona\n"
"independientemente del estado de conexión del usuario, ya que las operaciones de lectura no necesitan un firmante."

#: src/ch02-08-starknet-react.md:256
msgid ""
"const { data: balance, isLoading, isError, isSuccess } = useContractRead({\n"
"        abi: abi_erc20,\n"
"        address: CONTRACT_ADDRESS,\n"
"        functionName: \"allowance\",\n"
"        args: [owner, spender],\n"
"        // watch: true <- refresh at every block\n"
"    });"
msgstr ""
"const { data: balance, isLoading, isError, isSuccess } = useContractRead({\n"
"        abi: abi_erc20,\n"
"        address: CONTRACT_ADDRESS,\n"
"        functionName: \"allowance\",\n"
"        args: [owner, spender],\n"
"        // watch: true <- refresh at every block\n"
"    });"

#: src/ch02-08-starknet-react.md:264
msgid ""
"For ERC20 operations, Starknet React offers a convenient useBalance\n"
"hook. This hook exempts you from passing an ABI and returns a suitably\n"
"formatted balance value."
msgstr ""
"Para operaciones ERC20, Starknet React ofrece un conveniente useBalance como hook de equilibrio. Este hook lo exime de pasar una ABI y devuelve un valor de saldo con el "
"formato adecuado."

#: src/ch02-08-starknet-react.md:268
msgid ""
"  const { data, isLoading } = useBalance({\n"
"        address,\n"
"        token: CONTRACT_ADDRESS, // <- defaults to the ETH token\n"
"        // watch: true <- refresh at every block\n"
"      });\n"
"\n"
"      return (\n"
"        <p>Balance: {data?.formatted} {data?.symbol}</p>\n"
"      )"
msgstr ""
"  const { data, isLoading } = useBalance({\n"
"        address,\n"
"        token: CONTRACT_ADDRESS, // <- defaults to the ETH token\n"
"        // watch: true <- refresh at every block\n"
"      });\n"
"\n"
"      return (\n"
"        <p>Balance: {data?.formatted} {data?.symbol}</p>\n"
"      )"

#: src/ch02-08-starknet-react.md:278
msgid "### Write Functions"
msgstr "### Funciones de Escritura"

#: src/ch02-08-starknet-react.md:280
msgid ""
"The useContractWrite hook, designed for write operations, deviates\n"
"slightly from wagmi. The unique architecture of Starknet facilitates\n"
"multicall transactions natively at the account level. This feature\n"
"enhances the user experience when executing multiple transactions,\n"
"eliminating the need to approve each transaction individually. Starknet\n"
"React capitalizes on this functionality through the useContractWrite\n"
"hook. Below is a demonstration of its usage:"
msgstr ""
"El hook useContractWrite, diseñado para operaciones de escritura, se desvía ligeramente de wagmi. La arquitectura única de Starknet facilita las transacciones multillamada "
"de forma nativa a nivel de cuenta. Esta característica mejora la experiencia del usuario al ejecutar múltiples transacciones, eliminando la necesidad de aprobar cada "
"transacción individualmente. Starknet React aprovecha esta funcionalidad mediante useContractWritehook. A continuación se muestra una demostración de su uso:"

#: src/ch02-08-starknet-react.md:288
msgid ""
"const calls = useMemo(() => {\n"
"        // compile the calldata to send\n"
"        const calldata = stark.compileCalldata({\n"
"          argName: argValue,\n"
"        });\n"
"\n"
"        // return a single object for single transaction,\n"
"        // or an array of objects for multicall**\n"
"        return {\n"
"          contractAddress: CONTRACT_ADDRESS,\n"
"          entrypoint: functionName,\n"
"          calldata,\n"
"        };\n"
"    }, [argValue]);\n"
"\n"
"\n"
"    // Returns a function to trigger the transaction\n"
"    // and state of tx after being sent\n"
"    const { write, isLoading, data } = useContractWrite({\n"
"        calls,\n"
"    });\n"
"\n"
"    function execute() {\n"
"      // trigger the transaction\n"
"      write();\n"
"    }\n"
"\n"
"    return (\n"
"      <button type=\"button\" onClick={execute}>\n"
"        Make a transaction\n"
"      </button>\n"
"    )"
msgstr ""
"const calls = useMemo(() => {\n"
"        // compile the calldata to send\n"
"        const calldata = stark.compileCalldata({\n"
"          argName: argValue,\n"
"        });\n"
"\n"
"        // return a single object for single transaction,\n"
"        // or an array of objects for multicall**\n"
"        return {\n"
"          contractAddress: CONTRACT_ADDRESS,\n"
"          entrypoint: functionName,\n"
"          calldata,\n"
"        };\n"
"    }, [argValue]);\n"
"\n"
"\n"
"    // Returns a function to trigger the transaction\n"
"    // and state of tx after being sent\n"
"    const { write, isLoading, data } = useContractWrite({\n"
"        calls,\n"
"    });\n"
"\n"
"    function execute() {\n"
"      // trigger the transaction\n"
"      write();\n"
"    }\n"
"\n"
"    return (\n"
"      <button type=\"button\" onClick={execute}>\n"
"        Make a transaction\n"
"      </button>\n"
"    )"

#: src/ch02-08-starknet-react.md:321
msgid ""
"The code snippet begins by compiling the calldata using the\n"
"compileCalldata utility provided by Starknet.js. This calldata, along\n"
"with the contract address and entry point, are passed to the\n"
"useContractWrite hook. The hook returns a write function that is\n"
"subsequently used to execute the transaction. The hook also provides the\n"
"transaction’s hash and state."
msgstr ""
"El fragmento de código comienza compilando los datos de llamada utilizando la utilidad compileCalldata proporcionada por Starknet.js. Estos datos de llamada, junto con con "
"la dirección del contrato y el punto de entrada, se pasan al hook useContractWrite. El hook devuelve una función de escritura que posteriormente se utiliza para ejecutar la "
"transacción. El hook también proporciona el hash y el estado de la transacción."

#: src/ch02-08-starknet-react.md:328
msgid "### A Single Contract Instance"
msgstr "### Una Unica Instancia de Contrato"

#: src/ch02-08-starknet-react.md:330
msgid ""
"In certain use cases, working with a single contract instance may be\n"
"preferable to specifying the contract address and ABI in each hook.\n"
"Starknet React accommodates this requirement with the useContract hook:"
msgstr ""
"En ciertos casos de uso, puede ser preferible trabajar con una única instancia de contrato que especificar la dirección del contrato y la ABI en cada enlace. Starknet React "
"cumple con este requisito con el hook useContract:"

#: src/ch02-08-starknet-react.md:334
msgid ""
"const { contract } = useContract({\n"
"        address: CONTRACT_ADDRESS,\n"
"        abi: abi_erc20,\n"
"    });\n"
"\n"
"    // Call functions directly on contract\n"
"    // contract.transfer(...);\n"
"    // contract.balanceOf(...);"
msgstr ""
"const { contract } = useContract({\n"
"        address: CONTRACT_ADDRESS,\n"
"        abi: abi_erc20,\n"
"    });\n"
"\n"
"    // Call functions directly on contract\n"
"    // contract.transfer(...);\n"
"    // contract.balanceOf(...);"

#: src/ch02-08-starknet-react.md:343
msgid "## Tracking Transactions"
msgstr "## Seguimiento de Transacciones"

#: src/ch02-08-starknet-react.md:345
msgid ""
"The useTransaction hook allows for the tracking of transaction states\n"
"given a transaction hash. This hook maintains a cache of all\n"
"transactions, thereby minimizing redundant network requests."
msgstr ""
"El gancho useTransaction permite el seguimiento de los estados de las transacciones dado un hash de transacción. Este enlace mantiene un caché de todas las transacciones, "
"minimizando así las solicitudes de red redundantes."

#: src/ch02-08-starknet-react.md:349
msgid ""
"const { data, isLoading, error } = useTransaction({ hash: txHash });\n"
"\n"
"    return (\n"
"      <pre>\n"
"        {JSON.stringify(data?.calldata)}\n"
"      </pre>\n"
"    )"
msgstr ""
"const { data, isLoading, error } = useTransaction({ hash: txHash });\n"
"\n"
"    return (\n"
"      <pre>\n"
"        {JSON.stringify(data?.calldata)}\n"
"      </pre>\n"
"    )"

#: src/ch02-08-starknet-react.md:357
msgid ""
"The full array of available hooks can be discovered in the Starknet\n"
"React documentation, accessible here:\n"
"<https://apibara.github.io/starknet-react/>."
msgstr ""
"La gama completa de hooks disponibles se puede descubrir en la documentación de Starknet React, a la que se puede acceder aquí:\n"
"<https://apibara.github.io/starknet-react/>."

#: src/ch02-08-starknet-react.md:363
msgid ""
"The Starknet React library offers a comprehensive suite of React hooks\n"
"and providers, purpose-built for Starknet and the Starknet.js SDK. By\n"
"taking advantage of these well-crafted tools, developers can build\n"
"robust decentralized applications that harness the power of the Starknet\n"
"network."
msgstr ""
"La biblioteca Starknet React ofrece un conjunto completo de hook React y proveedores, diseñados específicamente para Starknet y el SDK de Starknet.js. Al aprovechar estas "
"herramientas bien diseñadas, los desarrolladores pueden crear aplicaciones descentralizadas sólidas que aprovechen el poder de la red Starknet."

#: src/ch02-08-starknet-react.md:369
msgid ""
"Through the diligent work of dedicated developers and contributors,\n"
"Starknet React continues to evolve. New features and optimizations are\n"
"regularly added, fostering a dynamic and growing ecosystem of\n"
"decentralized applications."
msgstr ""
"Gracias al trabajo diligente de desarrolladores y colaboradores dedicados, Starknet React continúa evolucionando. Regularmente se agregan nuevas funciones y optimizaciones, "
"lo que fomenta un ecosistema dinámico y en crecimiento de aplicaciones descentralizadas."

#: src/ch02-08-starknet-react.md:374
msgid ""
"It’s a fascinating journey, filled with innovative technology, endless\n"
"opportunities, and a growing community of passionate individuals. As a\n"
"developer, you’re not only building applications, but contributing to\n"
"the advancement of a global, decentralized network."
msgstr ""
"Es un viaje fascinante, lleno de tecnología innovadora, infinitas oportunidades y una comunidad creciente de personas apasionadas. Como desarrollador, no solo crea "
"aplicaciones, sino que también contribuye al avance de una red global y descentralizada."

#: src/ch02-08-starknet-react.md:379
msgid ""
"Have questions or need help? The Starknet community is always ready to\n"
"assist. Join the [Starknet Discord](https://discord.gg/starknet) or\n"
"explore the [StarknetBook’s GitHub\n"
"repository](https://github.com/starknet-edu/starknetbook) for resources\n"
"and support."
msgstr ""
"¿Tienes alguna pregunta o necesita ayuda? La comunidad Starknet siempre está lista para\n"
"asistir. Únase a [Starknet Discord](https://discord.gg/starknet) o\n"
"explore el [GitHub de StarknetBook\n"
"repositorio](https://github.com/starknet-edu/starknetbook) para recursos\n"
"y apoyo."

#: src/ch02-08-starknet-react.md:385
msgid "## Further Reading"
msgstr "## Otras Lecturas"

#: src/ch02-08-starknet-react.md:387
msgid ""
"- [Starknet.js](https://starknet.js.org)\n"
"\n"
"- [Starknet React Docs](https://www.apibara.com/starknet-react-docs)\n"
"\n"
"- [Mastering Ethereum](https://github.com/ethereumbook/ethereumbook)\n"
"\n"
"- [Mastering Bitcoin](https://github.com/bitcoinbook/bitcoinbook)"
msgstr ""
"- [Starknet.js](https://starknet.js.org)\n"
"\n"
"- [Starknet React Docs](https://www.apibara.com/starknet-react-docs)\n"
"\n"
"- [Mastering Ethereum](https://github.com/ethereumbook/ethereumbook)\n"
"\n"
"- [Mastering Bitcoin](https://github.com/bitcoinbook/bitcoinbook)"

#: src/ch02-08-01-examples.md:3
#, fuzzy
msgid ""
"In this subchapter, readers will find practical examples demonstrating the usage of `starknet-react`. It provides insight into real-world applications and serves as a guide "
"for developers to understand and implement these tools effectively."
msgstr ""
"En este subcapítulo, los lectores encontrarán ejemplos prácticos que demuestran el uso de \"starknet-js\" y \"starknet-react\". Proporciona información sobre aplicaciones "
"del mundo real y sirve como guía para que los desarrolladores comprendan e implementen estas herramientas de manera efectiva."

#: src/ch02-08-01-01-erc20-ui.md:3
msgid "This guide offers steps to build an ERC20 smart contract using Cairo and to incorporate it within a React web application with Starknet React. Readers will:"
msgstr "Esta guía ofrece pasos para crear un contrato inteligente ERC20 usando Cairo e incorporarlo dentro de una aplicación web React con Starknet React. Los lectores:"

#: src/ch02-08-01-01-erc20-ui.md:10
msgid ""
"A prerequisite for this guide is a foundational understanding of both the Cairo programming language and ReactJS. Additionally, ensure Node.js and NPM are installed on the "
"system."
msgstr ""
"Un requisito previo para esta guía es una comprensión básica tanto del lenguaje de programación Cairo como de ReactJS. Además, asegúrese de que Node.js y NPM estén "
"instalados en el sistema."

#: src/ch02-08-01-01-erc20-ui.md:14
msgid "<img alt=\"Basic Dapp ERC20\" src=\"img/ch02-basic-dapp-screenshot.png\" class=\"center\" style=\"width: 75%;\" />"
msgstr "<img alt=\"Basic Dapp ERC20\" src=\"img/ch02-basic-dapp-screenshot.png\" class=\"center\" style=\"width: 75%;\" />"

#: src/ch02-08-01-01-erc20-ui.md:18
msgid ""
"- Scarb 0.7.0 with Cairo 2.2.0\n"
"- Starkli 0.1.9\n"
"- Oppenzeppelin libraries v0.7.0\n"
"- Starknet React v1.0.4\n"
"- NodeJS v19.6.1\n"
"- Next.js 13.1.6\n"
"- Visual Studio Code\n"
"- Vercel"
msgstr ""
"- Scarb 0.7.0 with Cairo 2.2.0\n"
"- Starkli 0.1.9\n"
"- Oppenzeppelin libraries v0.7.0\n"
"- Starknet React v1.0.4\n"
"- NodeJS v19.6.1\n"
"- Next.js 13.1.6\n"
"- Visual Studio Code\n"
"- Vercel"

#: src/ch02-08-01-01-erc20-ui.md:96
msgid "<img alt=\"Basic Dapp ERC20\" src=\"img/ch02-basic-dapp-erc20.png\" class=\"center\" style=\"width: 75%;\" />"
msgstr "<img alt=\"Basic Dapp ERC20\" src=\"img/ch02-basic-dapp-erc20.png\" class=\"center\" style=\"width: 75%;\" />"

#: src/ch02-08-01-01-erc20-ui.md:112
msgid "Subsequent to the compilation, declare the smart contract on the Starknet testnet:"
msgstr "Después de la compilación, declare el contrato inteligente en la red de prueba de Starknet:"

#: src/ch02-08-01-01-erc20-ui.md:138
#, fuzzy
msgid ""
"- `Initial mint`: Mint 1,000,000 tokens. Given that the MKT token comprises 18 decimals (a standard of OpenZeppelin), the input required is 1,000,000 \\* 10^18 or "
"0xd3c21bcecceda1000000. Due to the contract's expectation of a u256 mint value, provide both low and high values: 0xd3c21bcecceda1000000 and 0 respectively.\n"
"- `Receiver address`: Use a preferred address. In this example: 0x0334863e3e851de87fb4b6b6113aa2a6b40ea20f22dbec55536e4eac912206fc"
msgstr ""
"- `Initial mint`: Acuña 1.000.000 de tokens. Dado que el token MKT consta de 18 decimales (un estándar de OpenZeppelin), la entrada requerida es 1.000.000 * 10^18 o "
"0xd3c21bcecceda1000000. Debido a la expectativa del contrato de un valor perfecto de u256, proporcione valores bajos y altos: 0xd3c21bcecceda1000000 y 0 respectivamente.\n"
"- `Receiver address`: Utilice una dirección preferida. En este ejemplo: 0x0334863e3e851de87fb4b6b6113aa2a6b40ea20f22dbec55536e4eac912206fc"

#: src/ch02-08-01-01-erc20-ui.md:157
msgid "## Installing the Starknet React Library"
msgstr "## Instalación de la Biblioteca Starknet React"

#: src/ch02-08-01-01-erc20-ui.md:159
msgid "With the contract in place, initiate the development of the web application. Begin by incorporating the Starknet React library:"
msgstr "Con el contrato en vigor, iniciar el desarrollo de la aplicación web. Comience incorporando la biblioteca Starknet React:"

#: src/ch02-08-01-01-erc20-ui.md:161
msgid ""
"```bash\n"
"npm add @starknet-react/core\n"
"```"
msgstr ""
"```bash\n"
"npm add @starknet-react/core\n"
"```"

#: src/ch02-08-01-01-erc20-ui.md:165
msgid "Post-installation, confirm the version of the Starknet React library:"
msgstr "Después de la instalación, confirme la versión de la biblioteca Starknet React:"

#: src/ch02-08-01-01-erc20-ui.md:167
msgid ""
"```bash\n"
"npm list @starknet-react/core\n"
"```"
msgstr ""
"```bash\n"
"npm list @starknet-react/core\n"
"```"

#: src/ch02-08-01-01-erc20-ui.md:171
msgid "The output should display the installed version, such as `@starknet-react/core@1.0.4`."
msgstr "El resultado debería mostrar la versión instalada, como `@starknet-react/core@1.0.4`."

#: src/ch02-08-01-01-erc20-ui.md:175
msgid "Starknet React library provides the `create-starknet` script that streamlines the setup of a Starknet application using TypeScript:"
msgstr "La biblioteca Starknet React proporciona el script `create-starknet` que agiliza la configuración de una aplicación Starknet usando TypeScript:"

#: src/ch02-08-01-01-erc20-ui.md:177
msgid ""
"```bash\n"
"npx create-starknet erc20_web --use-npm\n"
"```"
msgstr ""
"```bash\n"
"npx create-starknet erc20_web --use-npm\n"
"```"

#: src/ch02-08-01-01-erc20-ui.md:181
msgid "Once set up, make modifications to `erc20_web/index.tsx` by replacing its content with the following code:"
msgstr "Una vez configurado, realice modificaciones en `erc20_web/index.tsx` reemplazando su contenido con el siguiente código:"

#: src/ch02-08-01-01-erc20-ui.md:183
msgid ""
"```typescript\n"
"import Head from 'next/head'\n"
"import { useBlock } from '@starknet-react/core'\n"
"import WalletBar from '../components/WalletBar'\n"
"import { BlockTag } from 'starknet';\n"
"\n"
"export default function Home() {\n"
"  const { data, isLoading, isError } = useBlock({\n"
"    refetchInterval: 3000,\n"
"    blockIdentifier: BlockTag.latest,\n"
"  })\n"
"  return (\n"
"    <>\n"
"      <Head>\n"
"        <title>Create Starknet</title>\n"
"        <meta name=\"description\" content=\"Generated by create-starknet\" />\n"
"        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n"
"        <link rel=\"icon\" href=\"/favicon.ico\" />\n"
"      </Head>\n"
"      <main>\n"
"        <p>\n"
"          A basic web3 example with Starknet&nbsp;\n"
"        </p>\n"
"        <div>\n"
"          {isLoading\n"
"            ? 'Loading...'\n"
"            : isError\n"
"            ? 'Error while fetching the latest block hash'\n"
"            : `Latest block hash: ${data?.block_hash}`}\n"
"        </div>\n"
"        <WalletBar />\n"
"      </main>\n"
"    </>\n"
"  )\n"
"}\n"
"```"
msgstr ""
"```typescript\n"
"import Head from 'next/head'\n"
"import { useBlock } from '@starknet-react/core'\n"
"import WalletBar from '../components/WalletBar'\n"
"import { BlockTag } from 'starknet';\n"
"\n"
"export default function Home() {\n"
"  const { data, isLoading, isError } = useBlock({\n"
"    refetchInterval: 3000,\n"
"    blockIdentifier: BlockTag.latest,\n"
"  })\n"
"  return (\n"
"    <>\n"
"      <Head>\n"
"        <title>Create Starknet</title>\n"
"        <meta name=\"description\" content=\"Generated by create-starknet\" />\n"
"        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n"
"        <link rel=\"icon\" href=\"/favicon.ico\" />\n"
"      </Head>\n"
"      <main>\n"
"        <p>\n"
"          A basic web3 example with Starknet&nbsp;\n"
"        </p>\n"
"        <div>\n"
"          {isLoading\n"
"            ? 'Loading...'\n"
"            : isError\n"
"            ? 'Error while fetching the latest block hash'\n"
"            : `Latest block hash: ${data?.block_hash}`}\n"
"        </div>\n"
"        <WalletBar />\n"
"      </main>\n"
"    </>\n"
"  )\n"
"}\n"
"```"

#: src/ch02-08-01-01-erc20-ui.md:220
msgid "To launch the web3 application:"
msgstr "Para iniciar la aplicación web3:"

#: src/ch02-08-01-01-erc20-ui.md:227
msgid "NOTE: Observe the server port that appears during launch. This will be useful for subsequent testing."
msgstr "NOTA: Observe el puerto del servidor que aparece durante el inicio. Esto será útil para pruebas posteriores."

#: src/ch02-08-01-01-erc20-ui.md:231
msgid "To enhance the app's functionality, create two components for balance and transfer. Subsequently, update the `Wallet.tsx` file to incorporate the new features:"
msgstr ""
"Para mejorar la funcionalidad de la aplicación, cree dos componentes para saldo y transferencia. Posteriormente, actualice el archivo `Wallet.tsx` para incorporar las nuevas "
"funcionalidades:"

#: src/ch02-08-01-01-erc20-ui.md:233
msgid "<img alt=\"Basic Dapp ERC20 React Files\" src=\"img/ch02-basic-dapp-react-files.png\" class=\"center\" style=\"width: 75%;\" />"
msgstr "<img alt=\"Basic Dapp ERC20 React Files\" src=\"img/ch02-basic-dapp-react-files.png\" class=\"center\" style=\"width: 75%;\" />"

#: src/ch02-08-01-01-erc20-ui.md:235
msgid "### Balance Component"
msgstr "### Componente de Balance"

#: src/ch02-08-01-01-erc20-ui.md:237
msgid "Design a balance component inside `components/Balance.tsx` and integrate the following code:"
msgstr "Diseñe un componente de equilibrio dentro de `components/Balance.tsx` e integre el siguiente código:"

#: src/ch02-08-01-01-erc20-ui.md:239
#, fuzzy
msgid ""
"```typescript\n"
"import { useAccount, useContractRead } from \"@starknet-react/core\";\n"
"import erc20ABI from '../assets/erc20.json';\n"
"\n"
"function Balance() {\n"
"  const { address } = useAccount();\n"
"  const { data, isLoading, error, refetch } = useContractRead({\n"
"    address: '0x001892d81e09cb2c2005f0112891dacb92a6f8ce571edd03ed1f3e549abcf37f',\n"
"    abi: erc20ABI,\n"
"    functionName: 'balance_of',\n"
"    args: [address],\n"
"    watch: false\n"
"  });\n"
"\n"
"  if (isLoading) return <span>Loading...</span>;\n"
"  if (error) return <span>Error: {JSON.stringify(error)}</span>;\n"
"\n"
"  return (\n"
"    <div>\n"
"      <p>Balance:</p>\n"
"      <p>{data?data.toString(): 0}</p>\n"
"      <p><button onClick={refetch}>Refresh Balance</button></p>\n"
"      <hr/>\n"
"    </div>\n"
"  );\n"
"}\n"
"\n"
"export default Balance;\n"
"```"
msgstr ""
"```typescript\n"
"import { useAccount, useContractRead } from \"@starknet-react/core\";\n"
"import erc20ABI from '../assets/erc20.json';\n"
"\n"
"function Balance() {\n"
"  const { address } = useAccount();\n"
"  const { data, isLoading, error, refetch } = useContractRead({\n"
"    address: '0x001892d81e09cb2c2005f0112891dacb92a6f8ce571edd03ed1f3e549abcf37f',\n"
"    abi: erc20ABI,\n"
"    functionName: 'balance_of',\n"
"    args: [address],\n"
"    watch: false\n"
"  });\n"
"\n"
"  if (isLoading) return <span>Loading...</span>;\n"
"  if (error) return <span>Error: {JSON.stringify(error)}</span>;\n"
"\n"
"  return (\n"
"    <div>\n"
"      <p>Balance:</p>\n"
"      <p>{data?data.toString(): 0}</p>\n"
"      <p><button onClick={refetch}>Refresh Balance</button></p>\n"
"      <hr/>\n"
"    </div>\n"
"  );\n"
"}\n"
"  \n"
"export default Balance;\n"
"```"

#: src/ch02-08-01-01-erc20-ui.md:269
msgid "NOTE: Replace the address with the address of your deployed contract."
msgstr "NOTA: Reemplace la dirección con la dirección de su contrato implementado."

#: src/ch02-08-01-01-erc20-ui.md:271
msgid "### Transfer Component"
msgstr "### Componente de Transfer"

#: src/ch02-08-01-01-erc20-ui.md:273
msgid "Craft a transfer component in `components/Transfer.tsx` and embed the subsequent code:"
msgstr "Cree un componente de transferencia en `components/Transfer.tsx` e incruste el código siguiente:"

#: src/ch02-08-01-01-erc20-ui.md:275
#, fuzzy
msgid ""
"```typescript\n"
"import { useAccount, useContractWrite } from \"@starknet-react/core\";\n"
"import React, { useState, useMemo } from \"react\";\n"
"\n"
"function Transfer() {\n"
"    const { address } = useAccount();\n"
"    const [count] = useState(1);\n"
"    const [recipient, setRecipient] = useState('0x');\n"
"    const [amount, setAmount] = useState('1000000000000000000');\n"
"\n"
"    const calls = useMemo(() => {\n"
"      const tx = {\n"
"        contractAddress: '0x001892d81e09cb2c2005f0112891dacb92a6f8ce571edd03ed1f3e549abcf37f',\n"
"        entrypoint: 'transfer',\n"
"        calldata: [recipient, amount, 0]\n"
"      };\n"
"      return Array(count).fill(tx);\n"
"    }, [address, count, recipient, amount]);\n"
"\n"
"    const { write } = useContractWrite({ calls });\n"
"\n"
"    return (\n"
"      <>\n"
"        <p>Transfer:</p>\n"
"        <p>\n"
"          Recipient:\n"
"          <input type=\"text\" value={recipient} onChange={(e) => setRecipient(e.target.value)} />\n"
"        </p>\n"
"        <p>\n"
"          Amount (default: 1 MKT with 18 decimals):\n"
"          <input type=\"number\" value={amount} onChange={(e) => setAmount(e.target.value)} />\n"
"        </p>\n"
"        <p><button onClick={() => write()}>Execute Transfer</button></p>\n"
"        <hr/>\n"
"      </>\n"
"    );\n"
"}\n"
"\n"
"export default Transfer;\n"
"```"
msgstr ""
"```typescript\n"
"import { useAccount, useContractWrite } from \"@starknet-react/core\";\n"
"import React, { useState, useMemo } from \"react\";\n"
"\n"
"function Transfer() {\n"
"    const { address } = useAccount();\n"
"    const [count] = useState(1);\n"
"    const [recipient, setRecipient] = useState('0x');\n"
"    const [amount, setAmount] = useState('1000000000000000000');\n"
"  \n"
"    const calls = useMemo(() => {\n"
"      const tx = {\n"
"        contractAddress: '0x001892d81e09cb2c2005f0112891dacb92a6f8ce571edd03ed1f3e549abcf37f',\n"
"        entrypoint: 'transfer',\n"
"        calldata: [recipient, amount, 0]\n"
"      };\n"
"      return Array(count).fill(tx);\n"
"    }, [address, count, recipient, amount]);\n"
"\n"
"    const { write } = useContractWrite({ calls });\n"
"  \n"
"    return (\n"
"      <>\n"
"        <p>Transfer:</p>\n"
"        <p>\n"
"          Recipient:\n"
"          <input type=\"text\" value={recipient} onChange={(e) => setRecipient(e.target.value)} />\n"
"        </p>\n"
"        <p>\n"
"          Amount (default: 1 MKT with 18 decimals):\n"
"          <input type=\"number\" value={amount} onChange={(e) => setAmount(e.target.value)} />\n"
"        </p>\n"
"        <p><button onClick={() => write()}>Execute Transfer</button></p>\n"
"        <hr/>\n"
"      </>\n"
"    );\n"
"}\n"
"\n"
"export default Transfer;\n"
"```"

#: src/ch02-08-01-01-erc20-ui.md:316
msgid "NOTE: Replace contractAddress with the address of your deployed contract."
msgstr "NOTA: Reemplace contractAddress con la dirección de su contrato implementado."

#: src/ch02-08-01-01-erc20-ui.md:318
msgid "### Updating the Wallet Component"
msgstr "### Actualización del Componente Wallet"

#: src/ch02-08-01-01-erc20-ui.md:320
msgid "Proceed to modify the `components/Wallet.tsx` file. Replace any existing content with the following enhanced code:"
msgstr "Proceda a modificar el archivo `components/Wallet.tsx`. Reemplace cualquier contenido existente con el siguiente código mejorado:"

#: src/ch02-08-01-01-erc20-ui.md:322
msgid ""
"```typescript\n"
"import { useAccount, useConnectors } from '@starknet-react/core'\n"
"import { useMemo } from 'react'\n"
"import Balance from '../components/Balance'\n"
"import Transfer from '../components/Transfer'\n"
"\n"
"function WalletConnected() {\n"
"  const { address } = useAccount();\n"
"  const { disconnect } = useConnectors();\n"
"\n"
"  const shortenedAddress = useMemo(() => {\n"
"    if (!address) return '';\n"
"    return `${address.slice(0, 6)}...${address.slice(-4)}`;\n"
"  }, [address]);\n"
"\n"
"  return (\n"
"    <div>\n"
"      <span>Connected: {shortenedAddress}</span>\n"
"      <p><button onClick={disconnect}>Disconnect</button></p>\n"
"      <hr/>\n"
"      <Balance />\n"
"      <Transfer />\n"
"    </div>\n"
"  );\n"
"}\n"
"\n"
"function ConnectWallet() {\n"
"  const { connectors, connect } = useConnectors();\n"
"\n"
"  return (\n"
"    <div>\n"
"      <span>Select a wallet:</span>\n"
"      <p>\n"
"      {connectors.map((connector) => (\n"
"        <button key={connector.id} onClick={() => connect(connector)}>\n"
"          {connector.id}\n"
"        </button>\n"
"      ))}\n"
"      </p>\n"
"    </div>\n"
"  );\n"
"}\n"
"\n"
"export default function WalletBar() {\n"
"  const { address } = useAccount();\n"
"\n"
"  return address ? <WalletConnected /> : <ConnectWallet />;\n"
"}\n"
"```"
msgstr ""
"```typescript\n"
"import { useAccount, useConnectors } from '@starknet-react/core'\n"
"import { useMemo } from 'react'\n"
"import Balance from '../components/Balance'\n"
"import Transfer from '../components/Transfer'\n"
"\n"
"function WalletConnected() {\n"
"  const { address } = useAccount();\n"
"  const { disconnect } = useConnectors();\n"
"\n"
"  const shortenedAddress = useMemo(() => {\n"
"    if (!address) return '';\n"
"    return `${address.slice(0, 6)}...${address.slice(-4)}`;\n"
"  }, [address]);\n"
"\n"
"  return (\n"
"    <div>\n"
"      <span>Connected: {shortenedAddress}</span>\n"
"      <p><button onClick={disconnect}>Disconnect</button></p>\n"
"      <hr/>\n"
"      <Balance />\n"
"      <Transfer />\n"
"    </div>\n"
"  );\n"
"}\n"
"\n"
"function ConnectWallet() {\n"
"  const { connectors, connect } = useConnectors();\n"
"\n"
"  return (\n"
"    <div>\n"
"      <span>Select a wallet:</span>\n"
"      <p>\n"
"      {connectors.map((connector) => (\n"
"        <button key={connector.id} onClick={() => connect(connector)}>\n"
"          {connector.id}\n"
"        </button>\n"
"      ))}\n"
"      </p>\n"
"    </div>\n"
"  );\n"
"}\n"
"\n"
"export default function WalletBar() {\n"
"  const { address } = useAccount();\n"
"\n"
"  return address ? <WalletConnected /> : <ConnectWallet />;\n"
"}\n"
"```"

#: src/ch02-08-01-01-erc20-ui.md:372
msgid "This updated code refines the Wallet component to offer a more interactive experience for users intending to connect or manage their wallets."
msgstr ""
"Este código actualizado perfecciona el componente Wallet para ofrecer una experiencia más interactiva a los usuarios que deseen conectarse o administrar sus billeteras."

#: src/ch02-08-01-01-erc20-ui.md:374
msgid "## Finalizing the MKT Token Application"
msgstr "## Finalizando la solicitud del token MKT"

#: src/ch02-08-01-01-erc20-ui.md:376
msgid "To finalize the application setup, we need the ABI file for the MKT token. Follow the steps below to generate and integrate it:"
msgstr "Para finalizar la configuración de la aplicación, necesitamos el archivo ABI para el token MKT. Siga los pasos a continuación para generarlo e integrarlo:"

#: src/ch02-08-01-01-erc20-ui.md:378
msgid ""
"1. At the root of your project, create a new directory named `assets/`.\n"
"2. Inside the `assets/` directory, create an empty JSON file named `erc20.json`.\n"
"3. Go back to your ERC20 Cairo project folder and locate the `erc20/target/erc20_erc20_sierra.json` file."
msgstr ""
"1. En la raíz de su proyecto, cree un nuevo directorio llamado `assets/`.\n"
"2. Dentro del directorio `assets/`, cree un archivo JSON vacío llamado `erc20.json`.\n"
"3. Regrese a la carpeta de su proyecto ERC20 Cairo y busque el archivo `erc20/target/erc20_erc20_sierra.json`."

#: src/ch02-08-01-01-erc20-ui.md:382
msgid "<img alt=\"ABI Original\" src=\"img/ch02-basic-dapp-abi.png\" class=\"center\" style=\"width: 75%;\" />"
msgstr "<img alt=\"ABI Original\" src=\"img/ch02-basic-dapp-abi.png\" class=\"center\" style=\"width: 75%;\" />"

#: src/ch02-08-01-01-erc20-ui.md:384
msgid "4. Extract the ABI definition (ensuring you include the square brackets) and integrate it into the previously created `assets/erc20.json` file."
msgstr "4. Extraiga la definición de ABI (asegurándose de incluir los corchetes) e intégrela en el archivo `assets/erc20.json` creado previamente."

#: src/ch02-08-01-01-erc20-ui.md:386
msgid "<img alt=\"ABI Updated\" src=\"img/ch02-basic-dapp-abi-new.png\" class=\"center\" style=\"width: 75%;\" />"
msgstr "<img alt=\"ABI Updated\" src=\"img/ch02-basic-dapp-abi-new.png\" class=\"center\" style=\"width: 75%;\" />"

#: src/ch02-08-01-01-erc20-ui.md:388
msgid ""
"Well done! The basic MKT token application is now operational locally. Access it via `http://localhost:3000` or the port noted from earlier server setup. The app allows "
"users to connect their wallets, review their balances, and perform token transfers."
msgstr ""
"¡Bien hecho! La aplicación básica del token MKT ahora está operativa localmente. Acceda a él a través de `http://localhost:3000` o el puerto indicado en la configuración "
"anterior del servidor. La aplicación permite a los usuarios conectar sus billeteras, revisar sus saldos y realizar transferencias de tokens."

#: src/ch02-08-01-01-erc20-ui.md:390
msgid "<img alt=\"Localhost\" src=\"img/ch02-basic-dapp-localhost.png\" class=\"center\" style=\"width: 75%;\" />"
msgstr "<img alt=\"Localhost\" src=\"img/ch02-basic-dapp-localhost.png\" class=\"center\" style=\"width: 75%;\" />"

#: src/ch02-08-01-01-erc20-ui.md:401
msgid ""
"```bash\n"
"cd erc20_web/\n"
"npm i -g vercel\n"
"vercel init\n"
"```"
msgstr ""
"```bash\n"
"cd erc20_web/\n"
"npm i -g vercel\n"
"vercel init\n"
"```"

#: src/ch02-08-01-01-erc20-ui.md:409
msgid ""
"```bash\n"
"vercel login\n"
"```"
msgstr ""
"```bash\n"
"vercel login\n"
"```"

#: src/ch02-08-01-01-erc20-ui.md:415
msgid ""
"<img alt=\"Vercel login\" src=\"img/ch02-basic-dapp-vercel-login.png\" class=\"center\" style=\"width: 75%;\" />\n"
"\n"
"<img alt=\"Vercel verify\" src=\"img/ch02-basic-dapp-vercel-verify.png\" class=\"center\" style=\"width: 75%;\" />"
msgstr ""
"<img alt=\"Vercel login\" src=\"img/ch02-basic-dapp-vercel-login.png\" class=\"center\" style=\"width: 75%;\" />\n"
"\n"
"<img alt=\"Vercel verify\" src=\"img/ch02-basic-dapp-vercel-verify.png\" class=\"center\" style=\"width: 75%;\" />"

#: src/ch02-08-01-01-erc20-ui.md:423
msgid ""
"```bash\n"
"vercel link\n"
"```"
msgstr ""
"```bash\n"
"vercel link\n"
"```"

#: src/ch02-08-01-01-erc20-ui.md:435
msgid ""
"```bash\n"
"vercel --prod\n"
"```"
msgstr ""
"```bash\n"
"vercel --prod\n"
"```"

#: src/ch02-08-01-01-erc20-ui.md:439
msgid "Congratulations! Your MKT token web3 application is now accessible to everyone."
msgstr "¡Felicidades! Su aplicación web3 de token MKT ahora es accesible para todos."

#: src/ch02-08-01-01-erc20-ui.md:441
msgid "<img alt=\"Vercel publication\" src=\"img/ch02-basic-dapp-pub1.png\" class=\"center\" style=\"width: 75%;\" />"
msgstr "<img alt=\"Vercel publication\" src=\"img/ch02-basic-dapp-pub1.png\" class=\"center\" style=\"width: 75%;\" />"

#: src/ch02-08-01-01-erc20-ui.md:447
msgid "<img alt=\"Vercel publication 2\" src=\"img/ch02-basic-dapp-pub2.png\" class=\"center\" style=\"width: 75%;\" />"
msgstr "<img alt=\"Vercel publication 2\" src=\"img/ch02-basic-dapp-pub2.png\" class=\"center\" style=\"width: 75%;\" />"

#: src/ch02-08-01-01-erc20-ui.md:451
msgid "<img alt=\"Vercel publication 3\" src=\"img/ch02-basic-dapp-pub3.png\" class=\"center\" style=\"width: 75%;\" />"
msgstr "<img alt=\"Vercel publication 3\" src=\"img/ch02-basic-dapp-pub3.png\" class=\"center\" style=\"width: 75%;\" />"

#: src/ch02-08-01-01-erc20-ui.md:455
msgid "<img alt=\"Vercel publication 4\" src=\"img/ch02-basic-dapp-pub4.png\" class=\"center\" style=\"width: 75%;\" />"
msgstr "<img alt=\"Vercel publication 4\" src=\"img/ch02-basic-dapp-pub4.png\" class=\"center\" style=\"width: 75%;\" />"

#: src/ch02-08-01-01-erc20-ui.md:459
msgid ""
"Throughout this tutorial, you've walked through the steps to craft a web3 application using React and Starknet Cairo. This application, complete with an ERC20 smart "
"contract, offers a modern web interface for user interaction. Here's a snapshot of your achievements:"
msgstr ""
"A lo largo de este tutorial, ha seguido los pasos para crear una aplicación web3 utilizando React y Starknet Cairo. Esta aplicación, completa con un contrato inteligente "
"ERC20, ofrece una interfaz web moderna para la interacción del usuario. Aquí tienes una instantánea de tus logros:"

#: src/ch02-08-01-01-erc20-ui.md:461
#, fuzzy
msgid ""
"- **Project Initialization**: Set up a Starknet project with Scarb and incorporated OpenZeppelin libraries.\n"
"- **Crafting the ERC20 Contract**: Developed an ERC20 token using Cairo, enriched with functionalities like balance checks and token transfers. This was then compiled and "
"launched on the Starknet network.\n"
"\n"
"- **React Application**: Built a React application powered by Starknet React, featuring components dedicated to balance inquiries and token transactions.\n"
"\n"
"- **ABI Creation**: Produced the ABI for the MKT token, a critical component to liaise with the contract.\n"
"\n"
"- **Online Deployment**: Brought your application to a wider audience by deploying it on Vercel. This empowered users to connect their wallets, scrutinize their balances, "
"and execute token transactions."
msgstr ""
"- **Inicialización del proyecto**: Configure un proyecto Starknet con Scarb y bibliotecas OpenZeppelin incorporadas.\n"
"  \n"
"- **Elaboración del contrato ERC20**: Desarrollé un token ERC20 usando Cairo, enriquecido con funcionalidades como verificación de saldo y transferencias de tokens. Luego se "
"compiló y se lanzó en la red Starknet.\n"
"\n"
"- **Aplicación React**: creó una aplicación React impulsada por Starknet React, que presenta componentes dedicados a consultas de saldo y transacciones de tokens.\n"
"\n"
"- **Creación de ABI**: Produje el ABI para el token MKT, un componente crítico para vincularse con el contrato.\n"
"\n"
"- **Implementación en línea**: llevó su aplicación a una audiencia más amplia al implementarla en Vercel. Esto permitió a los usuarios conectar sus billeteras, examinar sus "
"saldos y ejecutar transacciones simbólicas."

#: src/ch02-07-01-02-million-dollar-homepage.md:1
msgid "# Million Dollar Homepage"
msgstr "# Million Dollar Homepage"

#: src/ch02-07-01-02-million-dollar-homepage.md:3
msgid ""
"[Starknet Homepage](https://github.com/dbejarano820/starknet_homepage) is a decentralized application on the Starknet blockchain. It provides a virtual space where users can "
"claim and personalize sections of a 100x100 grid, known as \"Starknet Homepage\". Each section is a 10x10 pixel area. Users can acquire these sections by minting non-"
"fungible tokens (NFTs) and then personalizing them with images and other content."
msgstr ""
"[Starknet Homepage](https://github.com/dbejarano820/starknet_homepage) es una aplicación descentralizada en la cadena de bloques Starknet. Proporciona un espacio virtual "
"donde los usuarios pueden reclamar y personalizar secciones de una cuadrícula de 100x100, conocida como \"Starknet Homepage\". Cada sección es un área de 10x10 píxeles. Los "
"usuarios pueden adquirir estas secciones acuñando tokens no fungibles (NFT) y luego personalizándolos con imágenes y otro contenido."

#: src/ch02-07-01-02-million-dollar-homepage.md:5
msgid "View the live app on testnet [here](https://starknet-homepage-kappa.vercel.app/)."
msgstr "Vea la aplicación en vivo en testnet [aquí](https://starknet-homepage-kappa.vercel.app/)."

#: src/ch02-07-01-02-million-dollar-homepage.md:7
msgid "<img alt=\"homepage\" src=\"img/ch02-starknet-homepage.jpg\" class=\"center\" style=\"width: 75%;\" />"
msgstr "<img alt=\"homepage\" src=\"img/ch02-starknet-homepage.jpg\" class=\"center\" style=\"width: 75%;\" />"

#: src/ch02-07-01-02-million-dollar-homepage.md:9
msgid ""
"This initiative is an adaptation of the renowned Million Dollar Homepage and was conceived at the Starknet Summit 2023 Hacker House in Palo Alto, California. The following "
"is a guide to understanding how this project was developed using the available tools in the ecosystem."
msgstr ""
"Esta iniciativa es una adaptación de la reconocida Million Dollar Homepage y fue concebida en la Hacker House Starknet Summit 2023 en Palo Alto, California. La siguiente es "
"una guía para comprender cómo se desarrolló este proyecto utilizando las herramientas disponibles en el ecosistema."

#: src/ch02-07-01-02-million-dollar-homepage.md:11
msgid "### Tools Utilized:"
msgstr "### Tools Utilizadas:"

#: src/ch02-07-01-02-million-dollar-homepage.md:13
msgid ""
"- [Starknet-react](https://github.com/apibara/starknet-react)\n"
"- [Starknet.js](https://github.com/0xs34n/starknet.js)\n"
"- [OpenZeppelin Cairo Contracts](https://github.com/OpenZeppelin/cairo-contracts)\n"
"- [MaterialUI](https://mui.com/material-ui/)"
msgstr ""
"- [Starknet-react](https://github.com/apibara/starknet-react)\n"
"- [Starknet.js](https://github.com/0xs34n/starknet.js)\n"
"- [OpenZeppelin Cairo Contracts](https://github.com/OpenZeppelin/cairo-contracts)\n"
"- [MaterialUI](https://mui.com/material-ui/)"

#: src/ch02-07-01-02-million-dollar-homepage.md:18
msgid "## Initial Setup"
msgstr "## Configuración Inicial"

#: src/ch02-07-01-02-million-dollar-homepage.md:20
msgid "The `Starknet-react` app offers a command to initialize a Starknet app. This command sets up the foundational structure needed for a NextJS application."
msgstr ""
"La aplicación `Starknet-react` ofrece un comando para inicializar una aplicación Starknet. Este comando configura la estructura fundamental necesaria para una aplicación "
"NextJS."

#: src/ch02-07-01-02-million-dollar-homepage.md:22
msgid ""
"```shell\n"
"npx create-starknet\n"
"```"
msgstr ""
"```shell\n"
"npx create-starknet\n"
"```"

#: src/ch02-07-01-02-million-dollar-homepage.md:26
msgid ""
"The `StarknetConfig` component accepts a `connectors` prop, which defines wallet connection options for the user. Additionally, it can take a `defaultProvider` to set the "
"network the application should connect to by default."
msgstr ""
"El componente `StarknetConfig` acepta un accesorio `connectors`, que define las opciones de conexión de billetera para el usuario. Además, puede ser necesario un "
"`defaultProvider` para configurar la red a la que la aplicación debe conectarse de forma predeterminada."

#: src/ch02-07-01-02-million-dollar-homepage.md:28
msgid ""
"```javascript\n"
"const connectors = [\n"
"  new InjectedConnector({ options: { id: \"braavos\" } }),\n"
"  new InjectedConnector({ options: { id: \"argentX\" } }),\n"
"];\n"
"const provider = new Provider({\n"
"  sequencer: { network: constants.NetworkName.SN_GOERLI },\n"
"});\n"
"return (\n"
"  <StarknetConfig\n"
"    autoConnect\n"
"    defaultProvider={provider}\n"
"    connectors={connectors}\n"
"  >\n"
"    <CacheProvider value={emotionCache}>\n"
"      <ThemeProvider theme={theme}>\n"
"        <Component {...pageProps} />\n"
"      </ThemeProvider>\n"
"    </CacheProvider>\n"
"  </StarknetConfig>\n"
");\n"
"```"
msgstr ""
"```javascript\n"
"const connectors = [\n"
"  new InjectedConnector({ options: { id: \"braavos\" } }),\n"
"  new InjectedConnector({ options: { id: \"argentX\" } }),\n"
"];\n"
"const provider = new Provider({\n"
"  sequencer: { network: constants.NetworkName.SN_GOERLI },\n"
"});\n"
"return (\n"
"  <StarknetConfig\n"
"    autoConnect\n"
"    defaultProvider={provider}\n"
"    connectors={connectors}\n"
"  >\n"
"    <CacheProvider value={emotionCache}>\n"
"      <ThemeProvider theme={theme}>\n"
"        <Component {...pageProps} />\n"
"      </ThemeProvider>\n"
"    </CacheProvider>\n"
"  </StarknetConfig>\n"
");\n"
"```"

#: src/ch02-07-01-02-million-dollar-homepage.md:51
msgid ""
"Both `CacheProvider` and `ThemeProvider` are components that facilitate the seamless integration of MaterialUI with NextJS. For a comprehensive setup guide on these "
"components, please refer to [this link](https://blog.logrocket.com/getting-started-with-mui-and-next-js/)."
msgstr ""
"Tanto `CacheProvider` como `ThemeProvider` son componentes que facilitan la perfecta integración de MaterialUI con NextJS. Para obtener una guía de configuración completa "
"sobre estos componentes, consulte [este enlace](https://blog.logrocket.com/getting-started-with-mui-and-next-js/)."

#: src/ch02-07-01-02-million-dollar-homepage.md:53
msgid "## Main Functionality"
msgstr "## Funcionalidad Principal"

#: src/ch02-07-01-02-million-dollar-homepage.md:55
msgid ""
"The core functionality of the Starknet Homepage centers around selecting a 4-sided region on a matrix, representing the desired 10x10 cells, and minting a token based on "
"those cells. The responsibility of the smart contract is to validate whether the selected cells are available for minting. If a user owns Starknet Homepage tokens, they can "
"access a dropdown to modify the token's content, including the associated image and link on the grid."
msgstr ""
"La funcionalidad principal de Starknet Homepage se centra en seleccionar una región de 4 lados en una matriz, que representa las celdas de 10x10 deseadas y acuñar un token "
"basado en esas celdas. La responsabilidad del contrato inteligente es validar si las celdas seleccionadas están disponibles para acuñar. Si un usuario posee tokens de la "
"página de inicio de Starknet, puede acceder a un menú desplegable para modificar el contenido del token, incluida la imagen asociada y el enlace en la cuadrícula."

#: src/ch02-07-01-02-million-dollar-homepage.md:57
msgid "The app's primary requirements are:"
msgstr "Los requisitos principales de la aplicación son:"

#: src/ch02-07-01-02-million-dollar-homepage.md:59
msgid ""
"- Wallet connectivity\n"
"- Grid for displaying existing tokens\n"
"- Cell selection capability\n"
"- Multicall function for token approval and minting\n"
"- Dropdown to view owned tokens\n"
"- On-chain representation of the entire 1 million pixel grid"
msgstr ""
"- Conectividad de billetera\n"
"- Cuadrícula para mostrar tokens existentes\n"
"- Capacidad de selección de celdas\n"
"- Función multillamada para aprobación y acuñación de tokens\n"
"- Menú desplegable para ver los tokens propios\n"
"- Representación en cadena de toda la cuadrícula de 1 millón de píxeles"

#: src/ch02-07-01-02-million-dollar-homepage.md:66
msgid ""
"A significant aspect to consider is the string limitation in Cairo contracts. To store links of varying sizes, they are stored as arrays of `felt252`s. The contract uses the "
"following logic for this purpose:"
msgstr ""
"Un aspecto importante a considerar es la limitación de cadenas en los contratos de El Cairo. Para almacenar enlaces de diferentes tamaños, se almacenan como matrices de "
"`felt252`s. El contrato utiliza la siguiente lógica para este propósito:"

#: src/ch02-07-01-02-million-dollar-homepage.md:68
msgid ""
"```rust\n"
"impl StoreFelt252Array of Store<Array<felt252>> {\n"
"    fn read(address_domain: u32, base: StorageBaseAddress) -> SyscallResult<Array<felt252>> {\n"
"        StoreFelt252Array::read_at_offset(address_domain, base, 0)\n"
"    }\n"
"    fn write(\n"
"        address_domain: u32, base: StorageBaseAddress, value: Array<felt252>\n"
"    ) -> SyscallResult<()> {\n"
"        StoreFelt252Array::write_at_offset(address_domain, base, 0, value)\n"
"    }\n"
"    fn read_at_offset(\n"
"        address_domain: u32, base: StorageBaseAddress, mut offset: u8\n"
"    ) -> SyscallResult<Array<felt252>> {\n"
"        let mut arr: Array<felt252> = ArrayTrait::new();\n"
"        // Read the stored array's length. If the length is superior to 255, the read will fail.\n"
"        let len: u8 = Store::<u8>::read_at_offset(address_domain, base, offset)\n"
"            .expect('Storage Span too large');\n"
"\n"
"        offset += 1;\n"
"\n"
"        // Sequentially read all stored elements and append them to the array.\n"
"        let exit = len + offset;\n"
"        loop {\n"
"            if offset >= exit {\n"
"                break;\n"
"            }\n"
"            let value = Store::<felt252>::read_at_offset(address_domain, base, offset).unwrap();\n"
"            arr.append(value);\n"
"            offset += Store::<felt252>::size();\n"
"        };\n"
"        Result::Ok(arr)\n"
"    }\n"
"    fn write_at_offset(\n"
"        address_domain: u32, base: StorageBaseAddress, mut offset: u8, mut value: Array<felt252>\n"
"    ) -> SyscallResult<()> {\n"
"        // // Store the length of the array in the first storage slot. 255 of elements is max\n"
"        let len: u8 = value.len().try_into().expect('Storage - Span too large');\n"
"        Store::<u8>::write_at_offset(address_domain, base, offset, len);\n"
"        offset += 1;\n"
"        // Store the array elements sequentially\n"
"        loop {\n"
"            match value.pop_front() {\n"
"                Option::Some(element) => {\n"
"                    Store::<felt252>::write_at_offset(address_domain, base, offset, element);\n"
"                    offset += Store::<felt252>::size();\n"
"                },\n"
"                Option::None => {\n"
"                    break Result::Ok(());\n"
"                }\n"
"            };\n"
"        }\n"
"    }\n"
"    fn size() -> u8 {\n"
"        255 / Store::<felt252>::size()\n"
"    }\n"
"}\n"
"```"
msgstr ""
"```rust\n"
"impl StoreFelt252Array of Store<Array<felt252>> {\n"
"    fn read(address_domain: u32, base: StorageBaseAddress) -> SyscallResult<Array<felt252>> {\n"
"        StoreFelt252Array::read_at_offset(address_domain, base, 0)\n"
"    }\n"
"    fn write(\n"
"        address_domain: u32, base: StorageBaseAddress, value: Array<felt252>\n"
"    ) -> SyscallResult<()> {\n"
"        StoreFelt252Array::write_at_offset(address_domain, base, 0, value)\n"
"    }\n"
"    fn read_at_offset(\n"
"        address_domain: u32, base: StorageBaseAddress, mut offset: u8\n"
"    ) -> SyscallResult<Array<felt252>> {\n"
"        let mut arr: Array<felt252> = ArrayTrait::new();\n"
"        // Read the stored array's length. If the length is superior to 255, the read will fail.\n"
"        let len: u8 = Store::<u8>::read_at_offset(address_domain, base, offset)\n"
"            .expect('Storage Span too large');\n"
"\n"
"        offset += 1;\n"
"\n"
"        // Sequentially read all stored elements and append them to the array.\n"
"        let exit = len + offset;\n"
"        loop {\n"
"            if offset >= exit {\n"
"                break;\n"
"            }\n"
"            let value = Store::<felt252>::read_at_offset(address_domain, base, offset).unwrap();\n"
"            arr.append(value);\n"
"            offset += Store::<felt252>::size();\n"
"        };\n"
"        Result::Ok(arr)\n"
"    }\n"
"    fn write_at_offset(\n"
"        address_domain: u32, base: StorageBaseAddress, mut offset: u8, mut value: Array<felt252>\n"
"    ) -> SyscallResult<()> {\n"
"        // // Store the length of the array in the first storage slot. 255 of elements is max\n"
"        let len: u8 = value.len().try_into().expect('Storage - Span too large');\n"
"        Store::<u8>::write_at_offset(address_domain, base, offset, len);\n"
"        offset += 1;\n"
"        // Store the array elements sequentially\n"
"        loop {\n"
"            match value.pop_front() {\n"
"                Option::Some(element) => {\n"
"                    Store::<felt252>::write_at_offset(address_domain, base, offset, element);\n"
"                    offset += Store::<felt252>::size();\n"
"                },\n"
"                Option::None => {\n"
"                    break Result::Ok(());\n"
"                }\n"
"            };\n"
"        }\n"
"    }\n"
"    fn size() -> u8 {\n"
"        255 / Store::<felt252>::size()\n"
"    }\n"
"}\n"
"```"

#: src/ch02-07-01-02-million-dollar-homepage.md:126
msgid "The storage method for links in the contract state is structured as:"
msgstr "El método de storage de links en el estado de contrato se estructura de la siguiente manera:"

#: src/ch02-07-01-02-million-dollar-homepage.md:128
msgid ""
"```rust\n"
"struct Cell {\n"
"    token_id: u256,\n"
"    xpos: u8,\n"
"    ypos: u8,\n"
"    width: u8,\n"
"    height: u8,\n"
"    img: Array<felt252>,\n"
"    link: Array<felt252>,\n"
"}\n"
"```"
msgstr ""
"```rust\n"
"struct Cell {\n"
"    token_id: u256,\n"
"    xpos: u8,\n"
"    ypos: u8,\n"
"    width: u8,\n"
"    height: u8,\n"
"    img: Array<felt252>,\n"
"    link: Array<felt252>,\n"
"}\n"
"```"

#: src/ch02-07-01-02-million-dollar-homepage.md:140
msgid ""
"The OpenZeppelin Cairo Contracts library played a crucial role in speeding up the development of the ERC721 contract for Starknet Homepage. You can find the contract for "
"review [here](https://github.com/dbejarano820/starknet_homepage/blob/main/cairo_contracts/src/ERC721.cairo). Once you have installed the library, you can refer to the "
"following example for typical usage:"
msgstr ""
"La biblioteca OpenZeppelin Cairo Contracts jugó un papel crucial a la hora de acelerar el desarrollo del contrato ERC721 para Starknet Homepage. Puede encontrar el contrato "
"para revisión [aquí](https://github.com/dbejarano820/starknet_homepage/blob/main/cairo_contracts/src/ERC721.cairo). Una vez que haya instalado la biblioteca, puede consultar "
"el siguiente ejemplo para conocer el uso típico:"

#: src/ch02-07-01-02-million-dollar-homepage.md:142
msgid ""
"```rust\n"
"#[starknet::contract]\n"
"mod MyToken {\n"
"    use starknet::ContractAddress;\n"
"    use openzeppelin::token::erc20::ERC20;\n"
"    #[storage]\n"
"    struct Storage {}\n"
"    #[constructor]\n"
"    fn constructor(\n"
"        ref self: ContractState,\n"
"        initial_supply: u256,\n"
"        recipient: ContractAddress\n"
"    ) {\n"
"        let name = 'MyToken';\n"
"        let symbol = 'MTK';\n"
"        let mut unsafe_state = ERC20::unsafe_new_contract_state();\n"
"        ERC20::InternalImpl::initializer(ref unsafe_state, name, symbol);\n"
"        ERC20::InternalImpl::_mint(ref unsafe_state, recipient, initial_supply);\n"
"    }\n"
"    #[external(v0)]\n"
"    fn name(self: @ContractState) -> felt252 {\n"
"        let unsafe_state = ERC20::unsafe_new_contract_state();\n"
"        ERC20::ERC20Impl::name(@unsafe_state)\n"
"    }\n"
"    ...\n"
"}\n"
"```"
msgstr ""
"```rust\n"
"#[starknet::contract]\n"
"mod MyToken {\n"
"    use starknet::ContractAddress;\n"
"    use openzeppelin::token::erc20::ERC20;\n"
"    #[storage]\n"
"    struct Storage {}\n"
"    #[constructor]\n"
"    fn constructor(\n"
"        ref self: ContractState,\n"
"        initial_supply: u256,\n"
"        recipient: ContractAddress\n"
"    ) {\n"
"        let name = 'MyToken';\n"
"        let symbol = 'MTK';\n"
"        let mut unsafe_state = ERC20::unsafe_new_contract_state();\n"
"        ERC20::InternalImpl::initializer(ref unsafe_state, name, symbol);\n"
"        ERC20::InternalImpl::_mint(ref unsafe_state, recipient, initial_supply);\n"
"    }\n"
"    #[external(v0)]\n"
"    fn name(self: @ContractState) -> felt252 {\n"
"        let unsafe_state = ERC20::unsafe_new_contract_state();\n"
"        ERC20::ERC20Impl::name(@unsafe_state)\n"
"    }\n"
"    ...\n"
"}\n"
"```"

#: src/ch02-07-01-02-million-dollar-homepage.md:170
msgid "### Component Logic"
msgstr "### Lógica de Componentes"

#: src/ch02-07-01-02-million-dollar-homepage.md:172
msgid "#### Grid"
msgstr "#### Grid"

#: src/ch02-07-01-02-million-dollar-homepage.md:174
msgid ""
"The Grid component represents a 100x100 matrix, with each cell being 100 pixels. This layout corresponds to the data structure found in the smart contract. To showcase the "
"tokens already minted on the Homepage, the app employs a React Hook from `starknet-react` to invoke the `getAllTokens` function from the contract."
msgstr ""
"El componente Grid representa una matriz de 100x100, donde cada celda tiene 100 píxeles. Este diseño corresponde a la estructura de datos que se encuentra en el contrato "
"inteligente. Para mostrar los tokens ya acuñados en la página de inicio, la aplicación emplea un React Hook de `starknet-react` para invocar la función `getAllTokens` del "
"contrato."

#: src/ch02-07-01-02-million-dollar-homepage.md:176
msgid ""
"```typescript\n"
"const [allNfts, setAllNfts] = useState<any[]>([]);\n"
"const { data, isLoading } = useContractRead({\n"
"  address: STARKNET_HOMEPAGE_ERC721_ADDRESS,\n"
"  functionName: \"getAllTokens\",\n"
"  abi: starknetHomepageABI,\n"
"  args: [],\n"
"});\n"
"useEffect(() => {\n"
"  if (!isLoading) {\n"
"    const arr = data?.map((nft) => {\n"
"      return deserializeTokenObject(nft);\n"
"    });\n"
"    setAllNfts(arr || []);\n"
"  }\n"
"}, [data, isLoading]);\n"
"```"
msgstr ""
"```typescript\n"
"const [allNfts, setAllNfts] = useState<any[]>([]);\n"
"const { data, isLoading } = useContractRead({\n"
"  address: STARKNET_HOMEPAGE_ERC721_ADDRESS,\n"
"  functionName: \"getAllTokens\",\n"
"  abi: starknetHomepageABI,\n"
"  args: [],\n"
"});\n"
"useEffect(() => {\n"
"  if (!isLoading) {\n"
"    const arr = data?.map((nft) => {\n"
"      return deserializeTokenObject(nft);\n"
"    });\n"
"    setAllNfts(arr || []);\n"
"  }\n"
"}, [data, isLoading]);\n"
"```"

#: src/ch02-07-01-02-million-dollar-homepage.md:194
msgid ""
"Deserialization ensures the data from the Starknet contract is aptly transformed for frontend use. This process involves decoding the array of `felt252`s into extensive "
"strings."
msgstr ""
"La deserialización garantiza que los datos del contrato Starknet se transformen adecuadamente para su uso frontend. Este proceso implica decodificar la matriz de `felt252`s "
"en cadenas extensas."

#: src/ch02-07-01-02-million-dollar-homepage.md:196
msgid ""
"```typescript\n"
"import { shortString, num } from \"starknet\";\n"
"const deserializeFeltArray = (arr: any) => {\n"
"    return arr\n"
"        .map((img: bigint) => {\n"
"            return shortString.decodeShortString(num.toHex(img));\n"
"        })\n"
"        .join(\"\");\n"
"};\n"
"...\n"
"img: deserializeFeltArray(tokenObject.img),\n"
"link: deserializeFeltArray(tokenObject.link),\n"
"...\n"
"```"
msgstr ""
"```typescript\n"
"import { shortString, num } from \"starknet\";\n"
"const deserializeFeltArray = (arr: any) => {\n"
"    return arr\n"
"        .map((img: bigint) => {\n"
"            return shortString.decodeShortString(num.toHex(img));\n"
"        })\n"
"        .join(\"\");\n"
"};\n"
"...\n"
"img: deserializeFeltArray(tokenObject.img),\n"
"link: deserializeFeltArray(tokenObject.link),\n"
"...\n"
"```"

#: src/ch02-07-01-02-million-dollar-homepage.md:211
msgid ""
"Furthermore, the Grid component manages the cell selection process, leading to the minting of a corresponding token. Once an area is chosen, a modal appears displaying the "
"mint details and other necessary inputs for the call data. The intricacies of the multicall will be addressed subsequently."
msgstr ""
"Además, el componente Grid gestiona el proceso de selección de celdas, lo que lleva a la acuñación del token correspondiente. Una vez que se elige un área, aparece un modal "
"que muestra los detalles de la menta y otras entradas necesarias para los datos de la llamada. Las complejidades de la multillamada se abordarán más adelante."

#: src/ch02-07-01-02-million-dollar-homepage.md:213
msgid "<img alt=\"Wallets\" src=\"img/ch02-starknet-homepage-select.jpg\" class=\"center\" style=\"width: 75%;\" />"
msgstr "<img alt=\"Wallets\" src=\"img/ch02-starknet-homepage-select.jpg\" class=\"center\" style=\"width: 75%;\" />"

#: src/ch02-07-01-02-million-dollar-homepage.md:215
msgid "#### Modals"
msgstr "#### Modals"

#: src/ch02-07-01-02-million-dollar-homepage.md:217
msgid "Modals offer a convenient means to present varied functionalities within the app, such as wallet connection, token minting, and token editing."
msgstr ""
"Los modales ofrecen un medio conveniente para presentar diversas funcionalidades dentro de la aplicación, como conexión de billetera, acuñación de tokens y edición de tokens."

#: src/ch02-07-01-02-million-dollar-homepage.md:219
msgid "<img alt=\"Wallets\" src=\"img/ch02-starknet-homepage-wallets.jpg\" class=\"center\" style=\"width: 75%;\" />"
msgstr "<img alt=\"Wallets\" src=\"img/ch02-starknet-homepage-wallets.jpg\" class=\"center\" style=\"width: 75%;\" />"

#: src/ch02-07-01-02-million-dollar-homepage.md:221
msgid "A recognized best practice is to invoke the React hook for shared information at a top-level, ensuring components like the `WalletBar` remain streamlined and focused."
msgstr ""
"Una mejor práctica reconocida es invocar el hook de React para información compartida en un nivel superior, asegurando que componentes como `WalletBar` permanezcan "
"optimizados y enfocados."

#: src/ch02-07-01-02-million-dollar-homepage.md:223
msgid ""
"```typescript\n"
"const { address } = useAccount();\n"
"\n"
"return (\n"
"    ...\n"
"    <WalletBar account={address} />\n"
"    ...\n"
")\n"
"```"
msgstr ""
"```typescript\n"
"const { address } = useAccount();\n"
"\n"
"return (\n"
"    ...\n"
"    <WalletBar account={address} />\n"
"    ...\n"
")\n"
"```"

#: src/ch02-07-01-02-million-dollar-homepage.md:233
msgid ""
"Below, the `WalletConnected` function displays the connected wallet's address, while the `ConnectWallet` function allows users to select and connect their wallet. The "
"`WalletBar` function renders the appropriate modal based on the connection status."
msgstr ""
"A continuación, la función`WalletConnected`  muestra la dirección de la billetera conectada, mientras que la función `ConnectWallet` permite a los usuarios seleccionar y "
"conectar su billetera. La función `WalletBar` muestra el modal apropiado según el estado de la conexión."

#: src/ch02-07-01-02-million-dollar-homepage.md:235
msgid ""
"```typescript\n"
"function WalletConnected({ address }: { address: string }) {\n"
"  const { disconnect } = useConnectors();\n"
"  const { chain } = useNetwork();\n"
"  const shortenedAddress = useMemo(() => {\n"
"    if (!address) return \"\";\n"
"    return `${address.slice(0, 6)}...${address.slice(-4)}`;\n"
"  }, [address]);\n"
"\n"
"  return (\n"
"    <StyledBox>\n"
"      <StyledButton color=\"inherit\" onClick={disconnect}>\n"
"        {shortenedAddress}\n"
"      </StyledButton>\n"
"      <span>&nbsp;Connected to {chain && chain.name}</span>\n"
"    </StyledBox>\n"
"  );\n"
"}\n"
"\n"
"function ConnectWallet() {\n"
"  const { connectors, connect } = useConnectors();\n"
"  const [open, setOpen] = useState(false);\n"
"  const theme = useTheme();\n"
"\n"
"  const handleClickOpen = () => {\n"
"    setOpen(true);\n"
"  };\n"
"\n"
"  const handleClose = () => {\n"
"    setOpen(false);\n"
"  };\n"
"\n"
"  return (\n"
"    <StyledBox>\n"
"      <StyledButton color=\"inherit\" onClick={handleClickOpen}>\n"
"        Connect Wallet\n"
"      </StyledButton>\n"
"      <Dialog open={open} onClose={handleClose}>\n"
"        <DialogTitle>Connect to a wallet</DialogTitle>\n"
"        <DialogContent>\n"
"          <DialogContentText>\n"
"            <Grid container direction=\"column\" alignItems=\"flex-start\" gap={1}>\n"
"              {connectors.map((connector) => (\n"
"                <ConnectWalletButton\n"
"                  key={connector.id}\n"
"                  onClick={() => {\n"
"                    connect(connector);\n"
"                    handleClose();\n"
"                  }}\n"
"                  sx={{ margin: theme.spacing(1) }}\n"
"                >\n"
"                  {connector.id}\n"
"                  <Image\n"
"                    src={`/${connector.id}-icon.png`}\n"
"                    alt={connector.id}\n"
"                    width={30}\n"
"                    height={30}\n"
"                  />\n"
"                </ConnectWalletButton>\n"
"              ))}\n"
"            </Grid>\n"
"          </DialogContentText>\n"
"        </DialogContent>\n"
"        <DialogActions>\n"
"          <Button onClick={handleClose} color=\"inherit\">\n"
"            Cancel\n"
"          </Button>\n"
"        </DialogActions>\n"
"      </Dialog>\n"
"    </StyledBox>\n"
"  );\n"
"}\n"
"\n"
"export default function WalletBar({\n"
"  account,\n"
"}: {\n"
"  account: string | undefined;\n"
"}) {\n"
"  return account ? <WalletConnected address={account} /> : <ConnectWallet />;\n"
"}\n"
"```"
msgstr ""
"```typescript\n"
"function WalletConnected({ address }: { address: string }) {\n"
"  const { disconnect } = useConnectors();\n"
"  const { chain } = useNetwork();\n"
"  const shortenedAddress = useMemo(() => {\n"
"    if (!address) return \"\";\n"
"    return `${address.slice(0, 6)}...${address.slice(-4)}`;\n"
"  }, [address]);\n"
"\n"
"  return (\n"
"    <StyledBox>\n"
"      <StyledButton color=\"inherit\" onClick={disconnect}>\n"
"        {shortenedAddress}\n"
"      </StyledButton>\n"
"      <span>&nbsp;Connected to {chain && chain.name}</span>\n"
"    </StyledBox>\n"
"  );\n"
"}\n"
"\n"
"function ConnectWallet() {\n"
"  const { connectors, connect } = useConnectors();\n"
"  const [open, setOpen] = useState(false);\n"
"  const theme = useTheme();\n"
"\n"
"  const handleClickOpen = () => {\n"
"    setOpen(true);\n"
"  };\n"
"\n"
"  const handleClose = () => {\n"
"    setOpen(false);\n"
"  };\n"
"\n"
"  return (\n"
"    <StyledBox>\n"
"      <StyledButton color=\"inherit\" onClick={handleClickOpen}>\n"
"        Connect Wallet\n"
"      </StyledButton>\n"
"      <Dialog open={open} onClose={handleClose}>\n"
"        <DialogTitle>Connect to a wallet</DialogTitle>\n"
"        <DialogContent>\n"
"          <DialogContentText>\n"
"            <Grid container direction=\"column\" alignItems=\"flex-start\" gap={1}>\n"
"              {connectors.map((connector) => (\n"
"                <ConnectWalletButton\n"
"                  key={connector.id}\n"
"                  onClick={() => {\n"
"                    connect(connector);\n"
"                    handleClose();\n"
"                  }}\n"
"                  sx={{ margin: theme.spacing(1) }}\n"
"                >\n"
"                  {connector.id}\n"
"                  <Image\n"
"                    src={`/${connector.id}-icon.png`}\n"
"                    alt={connector.id}\n"
"                    width={30}\n"
"                    height={30}\n"
"                  />\n"
"                </ConnectWalletButton>\n"
"              ))}\n"
"            </Grid>\n"
"          </DialogContentText>\n"
"        </DialogContent>\n"
"        <DialogActions>\n"
"          <Button onClick={handleClose} color=\"inherit\">\n"
"            Cancel\n"
"          </Button>\n"
"        </DialogActions>\n"
"      </Dialog>\n"
"    </StyledBox>\n"
"  );\n"
"}\n"
"\n"
"export default function WalletBar({\n"
"  account,\n"
"}: {\n"
"  account: string | undefined;\n"
"}) {\n"
"  return account ? <WalletConnected address={account} /> : <ConnectWallet />;\n"
"}\n"
"```"

#: src/ch02-07-01-02-million-dollar-homepage.md:317
msgid "#### Token Dropdown"
msgstr "#### Token Dropdown"

#: src/ch02-07-01-02-million-dollar-homepage.md:319
msgid ""
"The dropdown component is dedicated to showcasing the tokens associated with the currently connected wallet. To retrieve these tokens, a transaction like the one shown below "
"can be executed. The sole argument for this function is the contract address of the intended owner."
msgstr ""
"El componente desplegable (dropdown) está dedicado a mostrar los tokens asociados con la billetera actualmente conectada. Para recuperar estos tokens, se puede ejecutar una "
"transacción como la que se muestra a continuación. El único argumento para esta función es la dirección contractual del propietario previsto."

#: src/ch02-07-01-02-million-dollar-homepage.md:321
msgid ""
"```typescript\n"
"const readTx = useMemo(() => {\n"
"  const tx = {\n"
"    address: STARKNET_HOMEPAGE_ERC721_ADDRESS,\n"
"    functionName: \"getTokensByOwner\",\n"
"    abi: starknetHomepageABI,\n"
"    args: [account || \"0x0000000\"],\n"
"  };\n"
"  return tx;\n"
"}, [account]);\n"
"\n"
"const { data, isLoading } = useContractRead(readTx);\n"
"```"
msgstr ""
"```typescript\n"
"const readTx = useMemo(() => {\n"
"  const tx = {\n"
"    address: STARKNET_HOMEPAGE_ERC721_ADDRESS,\n"
"    functionName: \"getTokensByOwner\",\n"
"    abi: starknetHomepageABI,\n"
"    args: [account || \"0x0000000\"],\n"
"  };\n"
"  return tx;\n"
"}, [account]);\n"
"\n"
"const { data, isLoading } = useContractRead(readTx);\n"
"```"

#: src/ch02-07-01-02-million-dollar-homepage.md:335
msgid "### Multicall Contract Interaction"
msgstr "### Interacción de Contrato con Multicall"

#: src/ch02-07-01-02-million-dollar-homepage.md:337
msgid ""
"The provided code offers an illustration of a multicall, specifically to approve a transaction for the mint price transfer followed by the actual minting action. Notably, "
"the `shortString` module from `starknet.js` plays a pivotal role; it encodes and segments a lengthy string into an array of `felt252`s, the expected argument type for the "
"contract on Starknet."
msgstr ""
"El código proporcionado ofrece una ilustración de una llamada múltiple, específicamente para aprobar una transacción para la transferencia del precio de acuñación seguida de "
"la acción de acuñación real. En particular, el módulo `shortString` de `starknet.js` juega un papel fundamental; codifica y segmenta una cadena larga en una matriz de "
"`felt252`s, el tipo de argumento esperado para el contrato en Starknet."

#: src/ch02-07-01-02-million-dollar-homepage.md:339
msgid "The `useContractWrite` is a Hook dedicated to executing a Starknet multicall, which can be employed for a singular transaction or multiple ones."
msgstr "El `useContractWrite` es un Hook dedicado a ejecutar una multillamada de Starknet, que puede emplearse para una transacción singular o varias."

#: src/ch02-07-01-02-million-dollar-homepage.md:341
msgid ""
"```typescript\n"
"const calls = useMemo(() => {\n"
"  const splitNewImage: string[] = shortString.splitLongString(newImage);\n"
"  const splitNewLink: string[] = shortString.splitLongString(newLink);\n"
"\n"
"  const tx2 = {\n"
"    contractAddress: STARKNET_HOMEPAGE_ERC721_ADDRESS,\n"
"    entrypoint: \"mint\",\n"
"    calldata: [\n"
"      startCell.col,\n"
"      startCell.row,\n"
"      width,\n"
"      height,\n"
"      splitNewImage,\n"
"      splitNewLink,\n"
"    ],\n"
"  };\n"
"\n"
"  const price = selectedCells.length * 1000000000000000;\n"
"\n"
"  const tx1 = {\n"
"    contractAddress: ERC_20_ADDRESS,\n"
"    entrypoint: \"approve\",\n"
"    calldata: [STARKNET_HOMEPAGE_ERC721_ADDRESS, `${price}`, \"0\"],\n"
"  };\n"
"  return [tx1, tx2];\n"
"}, [startCell, newImage, newLink, width, height, selectedCells.length]);\n"
"\n"
"const { writeAsync: writeMulti } = useContractWrite({ calls });\n"
"```"
msgstr ""
"```typescript\n"
"const calls = useMemo(() => {\n"
"  const splitNewImage: string[] = shortString.splitLongString(newImage);\n"
"  const splitNewLink: string[] = shortString.splitLongString(newLink);\n"
"\n"
"  const tx2 = {\n"
"    contractAddress: STARKNET_HOMEPAGE_ERC721_ADDRESS,\n"
"    entrypoint: \"mint\",\n"
"    calldata: [\n"
"      startCell.col,\n"
"      startCell.row,\n"
"      width,\n"
"      height,\n"
"      splitNewImage,\n"
"      splitNewLink,\n"
"    ],\n"
"  };\n"
"\n"
"  const price = selectedCells.length * 1000000000000000;\n"
"\n"
"  const tx1 = {\n"
"    contractAddress: ERC_20_ADDRESS,\n"
"    entrypoint: \"approve\",\n"
"    calldata: [STARKNET_HOMEPAGE_ERC721_ADDRESS, `${price}`, \"0\"],\n"
"  };\n"
"  return [tx1, tx2];\n"
"}, [startCell, newImage, newLink, width, height, selectedCells.length]);\n"
"\n"
"const { writeAsync: writeMulti } = useContractWrite({ calls });\n"
"```"

#: src/ch02-07-01-02-million-dollar-homepage.md:372
msgid ""
"Another crucial aspect to point out is the `calldata` of the approve function for the ether transfer: calldata: `[STARKNET_HOMEPAGE_ERC721_ADDRESS, '${price}', \"0\"],`. The "
"amount argument is split into two parts because it's a `u256`, which is composed of two separate `felt252` values."
msgstr ""
"Otro aspecto crucial a destacar es el `calldata` de la función de aprobación para la transferencia de ether: calldata: `[STARKNET_HOMEPAGE_ERC721_ADDRESS, '${price}', \"0\"],"
"`. El argumento de la cantidad se divide en dos partes porque es un \"u256\", que se compone de dos valores \"felt252\" separados."

#: src/ch02-07-01-02-million-dollar-homepage.md:374
msgid "Once the multicall is prepared, the next step is to initiate the function and sign the transaction using the connected wallet."
msgstr "Una vez preparada la multillamada, el siguiente paso es iniciar la función y firmar la transacción utilizando la billetera conectada."

#: src/ch02-07-01-02-million-dollar-homepage.md:376
msgid ""
"```typescript\n"
"const handleMintClick = async (): Promise<void> => {\n"
"  setIsMintLoading(true);\n"
"  try {\n"
"    await writeMulti();\n"
"    setIsMintLoading(false);\n"
"    setState((prevState) => ({\n"
"      ...prevState,\n"
"      showPopup: false,\n"
"      selectedCells: [],\n"
"      mintPrice: undefined,\n"
"    }));\n"
"  } catch (error) {\n"
"    console.error(\"Error approving transaction:\", error);\n"
"  }\n"
"};\n"
"```"
msgstr ""
"```typescript\n"
"const handleMintClick = async (): Promise<void> => {\n"
"  setIsMintLoading(true);\n"
"  try {\n"
"    await writeMulti();\n"
"    setIsMintLoading(false);\n"
"    setState((prevState) => ({\n"
"      ...prevState,\n"
"      showPopup: false,\n"
"      selectedCells: [],\n"
"      mintPrice: undefined,\n"
"    }));\n"
"  } catch (error) {\n"
"    console.error(\"Error approving transaction:\", error);\n"
"  }\n"
"};\n"
"```"

#: src/ch02-07-01-02-million-dollar-homepage.md:394
msgid "### Conditional Multicall for Token Editing"
msgstr "### Multicall Condicional para Edición de Tokens"

#: src/ch02-07-01-02-million-dollar-homepage.md:396
msgid "Another instructive illustration of a conditional multicall setup is the modal used to modify the data associated with a token."
msgstr "Otro ejemplo instructivo de una configuración de multicall condicional es el modal utilizado para modificar los datos asociados con un token."

#: src/ch02-07-01-02-million-dollar-homepage.md:398
msgid "<img alt=\"homepage\" src=\"img/ch02-starknet-homepage-edit.jpg\" class=\"center\" style=\"width: 75%;\" />"
msgstr "<img alt=\"homepage\" src=\"img/ch02-starknet-homepage-edit.jpg\" class=\"center\" style=\"width: 75%;\" />"

#: src/ch02-07-01-02-million-dollar-homepage.md:400
msgid ""
"There are scenarios where the user may wish to alter just one attribute of the token, rather than both. Consequently, a conditional multicall configuration becomes "
"necessary. It's essential to recall that the token id in the Cairo contract is defined as a `u256`, implying it comprises two `felt252` values."
msgstr ""
"Hay escenarios en los que el usuario puede desear modificar solo un atributo del token, en lugar de ambos. En consecuencia, se hace necesaria una configuración de "
"multillamada condicional. Es esencial recordar que la identificación del token en el contrato de El Cairo se define como \"u256\", lo que implica que comprende dos valores "
"\"felt252\"."

#: src/ch02-07-01-02-million-dollar-homepage.md:402
msgid ""
"```typescript\n"
"const calls = useMemo(() => {\n"
"  const txs = [];\n"
"  const splitNewImage: string[] = shortString.splitLongString(newImage);\n"
"  const splitNewLink: string[] = shortString.splitLongString(newLink);\n"
"\n"
"  if (newImage !== \"\" && nft) {\n"
"    const tx1 = {\n"
"      contractAddress: STARKNET_HOMEPAGE_ERC721_ADDRESS,\n"
"      entrypoint: \"setTokenImg\",\n"
"      calldata: [nft.token_id, 0, splitNewImage],\n"
"    };\n"
"    txs.push(tx1);\n"
"  }\n"
"\n"
"  if (newLink !== \"\" && nft) {\n"
"    const tx2 = {\n"
"      contractAddress: STARKNET_HOMEPAGE_ERC721_ADDRESS,\n"
"      entrypoint: \"setTokenLink\",\n"
"      calldata: [nft.token_id, 0, splitNewLink],\n"
"    };\n"
"    txs.push(tx2);\n"
"  }\n"
"\n"
"  return txs;\n"
"}, [nft, newImage, newLink]);\n"
"```"
msgstr ""
"```typescript\n"
"const calls = useMemo(() => {\n"
"  const txs = [];\n"
"  const splitNewImage: string[] = shortString.splitLongString(newImage);\n"
"  const splitNewLink: string[] = shortString.splitLongString(newLink);\n"
"\n"
"  if (newImage !== \"\" && nft) {\n"
"    const tx1 = {\n"
"      contractAddress: STARKNET_HOMEPAGE_ERC721_ADDRESS,\n"
"      entrypoint: \"setTokenImg\",\n"
"      calldata: [nft.token_id, 0, splitNewImage],\n"
"    };\n"
"    txs.push(tx1);\n"
"  }\n"
"\n"
"  if (newLink !== \"\" && nft) {\n"
"    const tx2 = {\n"
"      contractAddress: STARKNET_HOMEPAGE_ERC721_ADDRESS,\n"
"      entrypoint: \"setTokenLink\",\n"
"      calldata: [nft.token_id, 0, splitNewLink],\n"
"    };\n"
"    txs.push(tx2);\n"
"  }\n"
"\n"
"  return txs;\n"
"}, [nft, newImage, newLink]);\n"
"```"

#: src/ch02-07-01-02-million-dollar-homepage.md:430
msgid "## Starknet Homepage Overview"
msgstr "## Starknet Homepage Overview"

#: src/ch02-07-01-02-million-dollar-homepage.md:432
msgid ""
"- **Grid Component**: Represents a 100x100 matrix, allowing users to select cells and mint corresponding tokens. It fetches existing tokens using the `getAllTokens` function "
"from the contract and displays them.\n"
"- **Modals**: Serve as the user interface for actions like wallet connection, token minting, and token editing.\n"
"- **Token Dropdown**: Displays tokens associated with a connected wallet. It retrieves these tokens using the `getTokensByOwner` function.\n"
"- **Multicall Contract Interaction**: Enables token minting and editing. This process utilizes conditional multicalls based on user preferences, especially for editing token "
"attributes."
msgstr ""
"- **Grid Component**: Representa una matriz de 100x100, que permite a los usuarios seleccionar celdas y acuñar los tokens correspondientes. Obtiene tokens existentes "
"utilizando la función `getAllTokens` del contrato y los muestra.\n"
"- **Modales**: Sirve como interfaz de usuario para acciones como conexión de billetera, acuñación de tokens y edición de tokens.\n"
"- **Desplegable de tokens**: Muestra los tokens asociados con una billetera conectada. Recupera estos tokens utilizando la función `getTokensByOwner`.\n"
"- **Interacción de contrato de Multicall**: Permite la acuñación y edición de tokens. Este proceso utiliza multicall condicionales basadas en las preferencias del usuario, "
"especialmente para editar atributos de token."

#: src/ch02-07-01-02-million-dollar-homepage.md:437
msgid ""
"Throughout the platform, string limitations in Cairo contracts require encoding lengthy strings into arrays of `felt252`s. The OpenZeppelin Cairo Contracts library "
"significantly expedites the development of the ERC721 contract for the Starknet Homepage."
msgstr ""
"En toda la plataforma, las limitaciones de cadenas en los contratos de Cairo requieren codificar cadenas largas en matrices de `felt252`s. La biblioteca OpenZeppelin Cairo "
"Contracts acelera significativamente el desarrollo del contrato ERC721 para la página de inicio de Starknet."

#: src/ch02-09-starknet-py.md:1
msgid "# Starknet-py: Python SDK 🚧"
msgstr "# Starknet-py: Python SDK 🚧"

#: src/ch02-10-starknet-rs.md:1
msgid "# Starknet-rs: Rust SDK 🚧"
msgstr "# Starknet-rs: Rust SDK 🚧"

#: src/ch02-11-foundry-cast.md:1
#, fuzzy
msgid "# Foundry Cast: Starknet CLI Interaction"
msgstr "# Foundry Cast: Interactuando con Starknet 🚧"

#: src/ch02-11-foundry-cast.md:3
#, fuzzy
msgid ""
"Cast provides the Command Line Interface (CLI) for starknet, while Forge addresses testing. Written in Rust, Cast utilizes starknet Rust and integrates with Scarb. This "
"integration allows for argument specification in `Scarb.toml`, streamlining the process."
msgstr ""
"Mientras Forge se encarga de las pruebas, Cast se centra en la interfaz de línea de comandos (CLI) para Starknet. Esta sencilla herramienta, escrita en Rust, aprovecha "
"Starknet Rust para sus operaciones y también está integrada con Scarb. Esta integración permite la especificación de argumentos en Scarb Toml, simplificando el proceso "
"general."

#: src/ch02-11-foundry-cast.md:5
msgid "`sncast` simplifies interaction with smart contracts, reducing the number of necessary commands compared to using `starkli` alone."
msgstr ""

#: src/ch02-11-foundry-cast.md:7
msgid "In this section, we'll delve into `sncast`."
msgstr ""

#: src/ch02-11-foundry-cast.md:9
#, fuzzy
msgid "## Step 1: Sample Smart Contract"
msgstr "## Introducción a los Smart Contracts de Starknet"

#: src/ch02-11-foundry-cast.md:11
msgid "The following code sample is sourced from `starknet foundry`. You can find the original [here](https://foundry-rs.github.io/starknet-foundry/testing/contracts.html)."
msgstr ""

#: src/ch02-11-foundry-cast.md:13
msgid ""
"```rust\n"
"#[starknet::interface]\n"
"trait IHelloStarknet<TContractState> {\n"
"    fn increase_balance(ref self: TContractState, amount: felt252);\n"
"    fn get_balance(self: @TContractState) -> felt252;\n"
"}\n"
"\n"
"#[starknet::contract]\n"
"mod HelloStarknet {\n"
"    #[storage]\n"
"    struct Storage {\n"
"        balance: felt252,\n"
"    }\n"
"\n"
"    #[external(v0)]\n"
"    impl HelloStarknetImpl of super::IHelloStarknet<ContractState> {\n"
"        fn increase_balance(ref self: ContractState, amount: felt252) {\n"
"            assert(amount != 0, 'amount cannot be 0');\n"
"            self.balance.write(self.balance.read() + amount);\n"
"        }\n"
"        fn get_balance(self: @ContractState) -> felt252 {\n"
"            self.balance.read()\n"
"        }\n"
"    }\n"
"}\n"
"```"
msgstr ""

#: src/ch02-11-foundry-cast.md:40
msgid "Before interacting with this sample smart contract, it's crucial to test its functionality using **`snforge`** to ensure its integrity."
msgstr ""

#: src/ch02-11-foundry-cast.md:42
msgid "Here are the associated tests:"
msgstr ""

#: src/ch02-11-foundry-cast.md:44
msgid ""
"```rust\n"
"#[cfg(test)]\n"
"mod tests {\n"
"    use learnsncast::IHelloStarknetDispatcherTrait;\n"
"    use snforge_std::{declare, ContractClassTrait};\n"
"    use super::{IHelloStarknetDispatcher};\n"
"\n"
"    #[test]\n"
"    fn call_and_invoke() {\n"
"        // Declare and deploy a contract\n"
"        let contract = declare('HelloStarknet');\n"
"        let contract_address = contract.deploy(@ArrayTrait::new()).unwrap();\n"
"\n"
"        // Create a Dispatcher object for interaction with the deployed contract\n"
"        let dispatcher = IHelloStarknetDispatcher { contract_address };\n"
"\n"
"        // Query a contract view function\n"
"        let balance = dispatcher.get_balance();\n"
"        assert(balance == 0, 'balance == 0');\n"
"\n"
"        // Invoke a contract function to mutate state\n"
"        dispatcher.increase_balance(100);\n"
"\n"
"        // Verify the transaction's effect\n"
"        let balance = dispatcher.get_balance();\n"
"        assert(balance == 100, 'balance == 100');\n"
"    }\n"
"}\n"
"```"
msgstr ""

#: src/ch02-11-foundry-cast.md:74
msgid "If needed, copy the provided code snippets into the `lib.cairo` file of your new scarb project."
msgstr ""

#: src/ch02-11-foundry-cast.md:76
#, fuzzy
msgid "To execute tests, follow the steps below:"
msgstr "Para instalar Starknet.js, siga estos pasos:"

#: src/ch02-11-foundry-cast.md:78
msgid ""
"1. Ensure `snforge` is listed as a dependency in your `Scarb.toml` file, positioned beneath the `starknet` dependency. Your dependencies section should appear as (make sure "
"to use the latest version of `snforge` and `starknet`):"
msgstr ""

#: src/ch02-11-foundry-cast.md:80
msgid ""
"```txt\n"
"starknet = \"2.1.0-rc2\"\n"
"snforge_std = { git = \"https://github.com/foundry-rs/starknet-foundry.git\", tag = \"v0.7.1\" }\n"
"```"
msgstr ""

#: src/ch02-11-foundry-cast.md:85
msgid "2. Run the command:"
msgstr ""

#: src/ch02-11-foundry-cast.md:87
#, fuzzy
msgid ""
"```sh\n"
"snforge\n"
"```"
msgstr ""
"```bash\n"
"vercel\n"
"```"

#: src/ch02-11-foundry-cast.md:91
msgid ""
"Note: Use `snforge` for testing instead of the `scarb test` command. The tests are set up to utilize functions from `snforge_std`. Running `scarb test` would cause errors."
msgstr ""

#: src/ch02-11-foundry-cast.md:93
#, fuzzy
msgid "## Step 2: Setting Up Starknet Devnet"
msgstr "## Implementación en Starknet Testnet"

#: src/ch02-11-foundry-cast.md:95
msgid ""
"For this guide, the focus is on using `starknet-devnet`. If you've been using `katana`, please be cautious as there might be inconsistencies. If you haven't configured "
"`devnet`, consider following this [guide](https://livesoftwaredeveloper.com/articles/9/how-to-set-up-starknet-devnet-and-frontend-for-smart-contract-development) for a quick "
"setup."
msgstr ""

#: src/ch02-11-foundry-cast.md:97
#, fuzzy
msgid "To launch `starknet devnet`, use the command:"
msgstr "Para inicializar un nodo Starknet local, ejecute el siguiente comando:"

#: src/ch02-11-foundry-cast.md:99
#, fuzzy
msgid ""
"```sh\n"
"starknet-devnet\n"
"```"
msgstr ""
"```bash\n"
"starkli --version\n"
"```"

#: src/ch02-11-foundry-cast.md:103
msgid "Upon successful startup, you should receive a response similar to:"
msgstr ""

#: src/ch02-11-foundry-cast.md:105
msgid ""
"```sh\n"
"Predeployed FeeToken\n"
"Address: 0x49d36570d4e46f48e99674bd3fcc84644ddd6b96f7c741b1562b82f9e004dc7\n"
"Class Hash: 0x6a22bf63c7bc07effa39a25dfbd21523d211db0100a0afd054d172b81840eaf\n"
"Symbol: ETH\n"
"\n"
"Account #0:\n"
"Address: 0x5fd5ef7f4b0e23a44a3670bd84f802f6cc37983c7766d562a8d4d72bb8360ba\n"
"Public key: 0x6bd5d1d46a7f603f1106824a3b276fdb52168f55b595ba7ff6b2ded390161cd\n"
"Private key: 0xc12927df61303656b3c066e65eda0acc\n"
"...\n"
"...\n"
"...\n"
" * Listening on http://127.0.0.1:5050/ (Press CTRL+C to quit)\n"
"```"
msgstr ""

#: src/ch02-11-foundry-cast.md:121
msgid "(Note: The abbreviated ... is just a placeholder for the detailed response. In your actual output, you'll see the full details.)"
msgstr ""

#: src/ch02-11-foundry-cast.md:123
msgid "Now, you have written a smart contract, tested it, and successfully initiated starknet devnet."
msgstr ""

#: src/ch02-11-foundry-cast.md:125
msgid "## Dive into `sncast`"
msgstr ""

#: src/ch02-11-foundry-cast.md:127
msgid "Let's unpack **`sncast`**."
msgstr ""

#: src/ch02-11-foundry-cast.md:129
msgid "As a multifunctional tool, the quickest way to discover its capabilities is via the command:"
msgstr ""

#: src/ch02-11-foundry-cast.md:131
#, fuzzy
msgid ""
"```sh\n"
"sncast --help\n"
"```"
msgstr ""
"```bash\n"
"    starkli declare --help\n"
"```"

#: src/ch02-11-foundry-cast.md:135
msgid "In the output, you'll notice distinct categories: `commands` and `options`. Each option offers both a concise (`short`) and a descriptive (`long`) variant."
msgstr ""

#: src/ch02-11-foundry-cast.md:137
msgid "> Tip: While both option variants are useful, we'll prioritize the long form in this guide. This choice aids clarity, especially when constructing intricate commands."
msgstr ""

#: src/ch02-11-foundry-cast.md:139
msgid "Delving deeper, to understand specific commands such as **`account`**, you can run:"
msgstr ""

#: src/ch02-11-foundry-cast.md:141
#, fuzzy
msgid ""
"```sh\n"
"sncast account help\n"
"```"
msgstr ""
"```bash\n"
"scarb build\n"
"```"

#: src/ch02-11-foundry-cast.md:145
msgid "Each account subcommand like `add`, `create`, and `deploy` can be further explored. For instance:"
msgstr ""

#: src/ch02-11-foundry-cast.md:147
#, fuzzy
msgid ""
"```sh\n"
"sncast account add --help\n"
"```"
msgstr ""
"```bash\n"
"    starkli declare --help\n"
"```"

#: src/ch02-11-foundry-cast.md:151
msgid ""
"The layered structure of `sncast` provides a wealth of information right at your fingertips. It's like having dynamic documentation. Make it a habit to explore, and you'll "
"always stay informed."
msgstr ""

#: src/ch02-11-foundry-cast.md:153
msgid "## Step 3: Using `sncast` for Account Management"
msgstr ""

#: src/ch02-11-foundry-cast.md:155
msgid "Let's delve into how to use `sncast` for interacting with the contract."
msgstr ""

#: src/ch02-11-foundry-cast.md:157
msgid ""
"By default, `starknet devnet` offers several `predeployed accounts`. These are accounts already registered with the node, loaded with test tokens (for gas fees and various "
"transactions). Developers can use them directly with any `contract` on the `local node` (i.e., starknet devnet)."
msgstr ""

#: src/ch02-11-foundry-cast.md:159
msgid "### How to Utilize Predeployed Accounts"
msgstr ""

#: src/ch02-11-foundry-cast.md:161
msgid "To employ a predeployed account with the smart contract, execute the `account add` command as shown below:"
msgstr ""

#: src/ch02-11-foundry-cast.md:163
msgid ""
"```sh\n"
"sncast [SNCAST_MAIN_OPTIONS] account add [SUBCOMMAND_OPTIONS] --name <NAME> --address <ADDRESS> --private-key <PRIVATE_KEY>\n"
"```"
msgstr ""

#: src/ch02-11-foundry-cast.md:167
msgid ""
"Although several options can accompany the `add` command (e.g., `--name, --address, --class-hash, --deployed, --private-key, --public-key, --salt, --add-profile`), we'll "
"focus on a select few for this illustration."
msgstr ""

#: src/ch02-11-foundry-cast.md:169
msgid "Choose an account from the **`starknet-devnet`**, for demonstration, we'll select account **`#0`**, and execute:"
msgstr ""

#: src/ch02-11-foundry-cast.md:171
msgid ""
"```sh\n"
"sncast --url http://localhost:5050/rpc account add  --name account1 --address 0x5f...60ba --private-key 0xc...0acc --add-profile\n"
"```"
msgstr ""

#: src/ch02-11-foundry-cast.md:175
msgid "Points to remember:"
msgstr ""

#: src/ch02-11-foundry-cast.md:177
msgid ""
"1. **`-name`** - Mandatory field.\n"
"2. **`-address`** - Necessary account address.\n"
"3. **`-private-key`** - Private key of the account.\n"
"4. **`-add-profile`** - Though optional, it's pivotal. By enabling **`sncast`** to include the account in your **`Scarb.toml`** file, you can manage multiple accounts, "
"facilitating transactions among them when working with your smart contract using sncast."
msgstr ""

#: src/ch02-11-foundry-cast.md:182
msgid "Now that we have familiarized ourselves with using a predeployed account, let's proceed to adding a new account."
msgstr ""

#: src/ch02-11-foundry-cast.md:184
#, fuzzy
msgid "### Creating and Deploying a New Account to Starknet Devnet"
msgstr "## Implementación en Starknet Testnet"

#: src/ch02-11-foundry-cast.md:186
msgid "Creating a new account involves a few more steps than using an existing one, but it's straightforward when broken down. Here are the steps:"
msgstr ""

#: src/ch02-11-foundry-cast.md:188
#, fuzzy
msgid "1. Account Creation"
msgstr "Abstracción de Cuenta"

#: src/ch02-11-foundry-cast.md:190
msgid "To create a new account, use (you can use `sncast account create --help` to see the available options):"
msgstr ""

#: src/ch02-11-foundry-cast.md:192
msgid ""
"```sh\n"
"sncast --url http://localhost:5050/rpc account create --name new_account --class-hash  0x19...8dd6 --add-profile\n"
"```"
msgstr ""

#: src/ch02-11-foundry-cast.md:196
msgid ""
"Wondering where the `--class-hash` comes from? It's visible in the output from the `starknet-devnet` command under the Predeclared Starknet CLI account section. For example:"
msgstr ""

#: src/ch02-11-foundry-cast.md:198
msgid ""
"```sh\n"
"Predeclared Starknet CLI account:\n"
"Class hash: 0x195c984a44ae2b8ad5d49f48c0aaa0132c42521dcfc66513530203feca48dd6\n"
"```"
msgstr ""

#: src/ch02-11-foundry-cast.md:203
msgid "2. Funding the Account"
msgstr ""

#: src/ch02-11-foundry-cast.md:205
msgid "To fund the new account, replace the address in the following command with your new one:"
msgstr ""

#: src/ch02-11-foundry-cast.md:207
msgid ""
"```sh\n"
"curl -d '{\"amount\":8646000000000, \"address\":\"0x6e...eadf\"}' -H \"Content-Type: application/json\" -X POST http://127.0.0.1:5050/mint\n"
"```"
msgstr ""

#: src/ch02-11-foundry-cast.md:211
msgid "Note: The **amount** is specified in the previous command's output."
msgstr ""

#: src/ch02-11-foundry-cast.md:213
msgid "A successful fund addition will return:"
msgstr ""

#: src/ch02-11-foundry-cast.md:215
msgid ""
"```sh\n"
"{\"new_balance\":8646000000000,\"tx_hash\":\"0x48...1919\",\"unit\":\"wei\"}\n"
"```"
msgstr ""

#: src/ch02-11-foundry-cast.md:219
msgid "3. Account Deployment"
msgstr ""

#: src/ch02-11-foundry-cast.md:221
msgid "Deploy the account to the **`starknet devnet`** local node to register it with the chain:"
msgstr ""

#: src/ch02-11-foundry-cast.md:223
msgid ""
"```sh\n"
"sncast --url http://localhost:5050/rpc account deploy --name new_account --max-fee 0x64a7168300\n"
"```"
msgstr ""

#: src/ch02-11-foundry-cast.md:227
msgid "A successful deployment provides a transaction hash. If it doesn't work, revisit your previous steps."
msgstr ""

#: src/ch02-11-foundry-cast.md:229
#, fuzzy
msgid "4. Setting a Default Profile"
msgstr "## Configurando un Nuevo Proyecto de React"

#: src/ch02-11-foundry-cast.md:231
msgid ""
"You can define a default profile for your **`sncast`** actions. To set one, edit the **`Scarb.toml`** file. To make the **`new_account`** the default profile, find the "
"section **`[tool.sncast.new_account]`** and change it to **`[tool.sncast]`**. This means **`sncast`** will default to using this profile unless instructed otherwise."
msgstr ""

#: src/ch02-11-foundry-cast.md:233
#, fuzzy
msgid "## Step 4: Declaring and Deploying our Contract"
msgstr "### Declarando su Contrato"

#: src/ch02-11-foundry-cast.md:235
msgid "By now, we've arrived at the crucial step of using `sncast` to declare and deploy our smart contracts."
msgstr ""

#: src/ch02-11-foundry-cast.md:237
#, fuzzy
msgid "### Declaring the Contract"
msgstr "### Declarando su Contrato"

#: src/ch02-11-foundry-cast.md:239
msgid "Recall that we drafted and tested the contract in **Step 1**. Here, we'll focus on two actions: building and declaring."
msgstr ""

#: src/ch02-11-foundry-cast.md:241
#, fuzzy
msgid "1. **Building the Contract**"
msgstr "## Implementación del Contrato ERC20"

#: src/ch02-11-foundry-cast.md:243
msgid "Execute the following to build the contract:"
msgstr ""

#: src/ch02-11-foundry-cast.md:245
#, fuzzy
msgid ""
"```sh\n"
"scarb build\n"
"```"
msgstr ""
"```bash\n"
"scarb build\n"
"```"

#: src/ch02-11-foundry-cast.md:249
msgid ""
"If you've successfully run tests using **`snforge`**, the **`scarb build`** should operate without issues. After the build completes, a new **`target`** folder will appear "
"at the root of your project."
msgstr ""

#: src/ch02-11-foundry-cast.md:251
msgid "Within the **`target`** folder, you'll find a **`dev`** sub-folder containing three files: **`*.casm.json`**, **`*.sierra.json`**, and **`*.starknet_artifacts.json`**."
msgstr ""

#: src/ch02-11-foundry-cast.md:253
msgid ""
"If these files aren't present, it's likely due to missing configurations in your **`Scarb.toml`** file. To address this, append the following lines after **`dependencies`**:"
msgstr ""

#: src/ch02-11-foundry-cast.md:255
msgid ""
"```toml\n"
"[[target.starknet-contract]]\n"
"sierra = true\n"
"casm = true\n"
"```"
msgstr ""

#: src/ch02-11-foundry-cast.md:261
msgid "These lines instruct the compiler to produce both `sierra` and `casm` outputs."
msgstr ""

#: src/ch02-11-foundry-cast.md:263
#, fuzzy
msgid "2. Declaring the Contract"
msgstr "### Declarando su Contrato"

#: src/ch02-11-foundry-cast.md:265
msgid "We will use the `sncast declare` command to declare the contract. Here's the format:"
msgstr ""

#: src/ch02-11-foundry-cast.md:267
msgid ""
"```shell\n"
"sncast declare [OPTIONS] --contract-name <CONTRACT>\n"
"```"
msgstr ""

#: src/ch02-11-foundry-cast.md:271
msgid "Given this, the correct command would be:"
msgstr ""

#: src/ch02-11-foundry-cast.md:273
msgid ""
"```\n"
"sncast --profile account1 declare --contract-name HelloStarknet\n"
"```"
msgstr ""

#: src/ch02-11-foundry-cast.md:277
msgid ""
"Note that we've omitted the **`--url`** option. Why? When using **`--profile`**, as seen here with **`account1`**, it's not necessary. Remember, earlier in this guide, we "
"discussed adding and creating new accounts. You can use either **`account1`** or **`new_account`** and achieve the desired result."
msgstr ""

#: src/ch02-11-foundry-cast.md:279
msgid ""
"> Hint: You can define a default profile for sncast actions. Modify the `Scarb.toml` file to set a default. For example, to make `new_account` the default, find `[tool."
"sncast.new_account]` and change it to `[tool.sncast]`. Then, there's no need to specify the profile for each call, simplifying your command to:"
msgstr ""

#: src/ch02-11-foundry-cast.md:281
msgid ""
"```sh\n"
"sncast declare --contract-name HelloStarknet\n"
"```"
msgstr ""

#: src/ch02-11-foundry-cast.md:285
msgid "The output will resemble:"
msgstr ""

#: src/ch02-11-foundry-cast.md:287
msgid ""
"```sh\n"
"command: declare\n"
"class_hash: 0x20fe30f3990ecfb673d723944f28202db5acf107a359bfeef861b578c00f2a0\n"
"transaction_hash: 0x7fbdcca80e7c666f1b5c4522fdad986ad3b731107001f7d8df5f3cb1ce8fd11\n"
"```"
msgstr ""

#: src/ch02-11-foundry-cast.md:293
msgid "Make sure to note the \\*\\*`class hash` as it will be essential in the subsequent step."
msgstr ""

#: src/ch02-11-foundry-cast.md:295
msgid ""
"> Note: If you encounter an error stating Class hash already declared, simply move to the next step. Redeclaring an already-declared contract isn't permissible. Use the "
"mentioned class hash for deployment."
msgstr ""

#: src/ch02-11-foundry-cast.md:297
#, fuzzy
msgid "### Deploying the Contract"
msgstr "## Implementación del Contrato ERC20"

#: src/ch02-11-foundry-cast.md:299
msgid ""
"With the contract successfully declared and a `class hash` obtained, we're ready to proceed to contract deployment. This step is straightforward. Replace `<class-hash>` in "
"the command below with your obtained class hash:"
msgstr ""

#: src/ch02-11-foundry-cast.md:301
msgid ""
"```sh\n"
"sncast deploy --class-hash 0x20fe30f3990ecfb673d723944f28202db5acf107a359bfeef861b578c00f2a0\n"
"```"
msgstr ""

#: src/ch02-11-foundry-cast.md:305
msgid "Executing this will likely yield:"
msgstr ""

#: src/ch02-11-foundry-cast.md:307
msgid ""
"```sh\n"
"command: deploy\n"
"contract_address: 0x7e3fc427c2f085e7f8adeaec7501cacdfe6b350daef18d76755ddaa68b3b3f9\n"
"transaction_hash: 0x6bdf6cfc8080336d9315f9b4df7bca5fb90135817aba4412ade6f942e9dbe60\n"
"```"
msgstr ""

#: src/ch02-11-foundry-cast.md:313
msgid "However, you may encounter some issues, such as:"
msgstr ""

#: src/ch02-11-foundry-cast.md:315
msgid "**Error: RPC url not passed nor found in Scarb.toml**. This indicates the absence of a default profile in the **`Scarb.toml`** file. To remedy this:"
msgstr ""

#: src/ch02-11-foundry-cast.md:317
msgid ""
"- Add the **`-profile`** option, followed by the desired profile name, as per the ones you've established.\n"
"- Alternatively, set a default profile as previously discussed in the \"Declaring the Contract\" section under \"Hint\" or as detailed in the \"Adding, Creating, and "
"Deploying Account\" subsection."
msgstr ""

#: src/ch02-11-foundry-cast.md:320
msgid "You've successfully deployed your contract with `sncast`! Now, let's explore how to interact with it."
msgstr ""

#: src/ch02-11-foundry-cast.md:322
#, fuzzy
msgid "## Interacting with the Contract"
msgstr "## Interacción con el Contrato"

#: src/ch02-11-foundry-cast.md:324
msgid "This section explains how to read and write information to the contract."
msgstr ""

#: src/ch02-11-foundry-cast.md:326
#, fuzzy
msgid "### Invoking Contract Functions"
msgstr "## Invocar una Función de Escritura"

#: src/ch02-11-foundry-cast.md:328
msgid "To write to the contract, invoke its functions. Here's a basic overview of the command:"
msgstr ""

#: src/ch02-11-foundry-cast.md:330
msgid ""
"```sh\n"
"Usage: sncast invoke [OPTIONS] --contract-address <CONTRACT_ADDRESS> --function <FUNCTION>\n"
"\n"
"Options:\n"
"  -a, --contract-address <CONTRACT_ADDRESS>  Address of the contract\n"
"  -f, --function <FUNCTION>                  Name of the function\n"
"  -c, --calldata <CALLDATA>                  Data for the function\n"
"  -m, --max-fee <MAX_FEE>                    Maximum transaction fee (auto-estimated if absent)\n"
"  -h, --help                                 Show help\n"
"```"
msgstr ""

#: src/ch02-11-foundry-cast.md:341
msgid ""
"To demonstrate, let's invoke the `increase_balance` method of our smart contract with a preset default profile. Not every option is always necessary; for instance, "
"sometimes, including the `--max-fee` might be essential."
msgstr ""

#: src/ch02-11-foundry-cast.md:343
msgid ""
"```sh\n"
"sncast invoke --contract-address 0x7e...b3f9 --function increase_balance --calldata 4\n"
"```"
msgstr ""

#: src/ch02-11-foundry-cast.md:347
#, fuzzy
msgid "If successful, you'll receive a transaction hash like this:"
msgstr "Si la verificación es exitosa, recibirás una confirmación en la consola."

#: src/ch02-11-foundry-cast.md:349
msgid ""
"```sh\n"
"command: invoke\n"
"transaction_hash: 0x33248e393d985a28826e9fbb143d2cf0bb3342f1da85483cf253b450973b638\n"
"```"
msgstr ""

#: src/ch02-11-foundry-cast.md:354
#, fuzzy
msgid "### Reading from the Contract"
msgstr "### Declarando su Contrato"

#: src/ch02-11-foundry-cast.md:356
msgid "To retrieve data from the contract, use the `sncast call` command. Here's how it works:"
msgstr ""

#: src/ch02-11-foundry-cast.md:358
#, fuzzy
msgid ""
"```sh\n"
"sncast call --help\n"
"```"
msgstr ""
"```bash\n"
"    starkli declare --help\n"
"```"

#: src/ch02-11-foundry-cast.md:362
msgid "Executing the command displays:"
msgstr ""

#: src/ch02-11-foundry-cast.md:364
msgid ""
"```sh\n"
"Usage: sncast call [OPTIONS] --contract-address <CONTRACT_ADDRESS> --function <FUNCTION>\n"
"\n"
"Options:\n"
"  -a, --contract-address <CONTRACT_ADDRESS>  Address of the contract (hex format)\n"
"  -f, --function <FUNCTION>                  Name of the function to call\n"
"  -c, --calldata <CALLDATA>                  Function arguments (list of hex values)\n"
"  -b, --block-id <BLOCK_ID>                  Block identifier for the call. Accepts: pending, latest, block hash (with a 0x prefix), or block number (u64). Default is "
"'pending'.\n"
"  -h, --help                                 Show help\n"
"```"
msgstr ""

#: src/ch02-11-foundry-cast.md:375 src/ch03-01-01-fee-mechanism.md:58
msgid "For instance:"
msgstr ""

#: src/ch02-11-foundry-cast.md:377 src/ch02-11-foundry-cast.md:489
msgid ""
"```sh\n"
"sncast call --contract-address 0x7e...b3f9 --function get_balance\n"
"```"
msgstr ""

#: src/ch02-11-foundry-cast.md:381
msgid "While not all options are used in the example, you might need to include options like `--calldata`, specifying it as a list or array."
msgstr ""

#: src/ch02-11-foundry-cast.md:383
msgid "A successful call returns:"
msgstr ""

#: src/ch02-11-foundry-cast.md:385
msgid ""
"```sh\n"
"command: call\n"
"response: [0x4]\n"
"```"
msgstr ""

#: src/ch02-11-foundry-cast.md:390
msgid "This indicates successful read and write operations on the contract."
msgstr ""

#: src/ch02-11-foundry-cast.md:392
msgid "### sncast Multicall Guide"
msgstr ""

#: src/ch02-11-foundry-cast.md:394
msgid "Use `sncast multicall` to simultaneously read and write to the contract. Let's explore how to effectively use this feature."
msgstr ""

#: src/ch02-11-foundry-cast.md:396
msgid "First, understand its basic usage:"
msgstr ""

#: src/ch02-11-foundry-cast.md:398
#, fuzzy
msgid ""
"```sh\n"
"sncast multicall --help\n"
"```"
msgstr ""
"```bash\n"
"    starkli declare --help\n"
"```"

#: src/ch02-11-foundry-cast.md:402
msgid "This command displays:"
msgstr ""

#: src/ch02-11-foundry-cast.md:404
msgid ""
"```sh\n"
"Execute multiple calls\n"
"\n"
"Usage: sncast multicall <COMMAND>\n"
"\n"
"Commands:\n"
"  run   Execute multicall using a .toml file\n"
"  new   Create a template for the multicall .toml file\n"
"  help  Display help for subcommand(s)\n"
"\n"
"Options:\n"
"  -h, --help  Show help\n"
"```"
msgstr ""

#: src/ch02-11-foundry-cast.md:418
msgid "To delve deeper, initiate the `new` subcommand:"
msgstr ""

#: src/ch02-11-foundry-cast.md:420
msgid ""
"```sh\n"
"Generate a template for the multicall .toml file\n"
"\n"
"Usage: sncast multicall new [OPTIONS]\n"
"\n"
"Options:\n"
"  -p, --output-path <OUTPUT_PATH>  File path for saving the template\n"
"  -o, --overwrite                  Overwrite file if it already exists at specified path\n"
"  -h, --help                       Display help\n"
"```"
msgstr ""

#: src/ch02-11-foundry-cast.md:431
msgid "Generate a template called `call1.toml`:"
msgstr ""

#: src/ch02-11-foundry-cast.md:433
msgid ""
"```sh\n"
"sncast multicall new --output-path ./call1.toml --overwrite\n"
"```"
msgstr ""

#: src/ch02-11-foundry-cast.md:437
msgid "This provides a basic template:"
msgstr ""

#: src/ch02-11-foundry-cast.md:439
msgid ""
"```toml\n"
"[[call]]\n"
"call_type = \"deploy\"\n"
"class_hash = \"\"\n"
"inputs = []\n"
"id = \"\"\n"
"unique = false\n"
"\n"
"[[call]]\n"
"call_type = \"invoke\"\n"
"contract_address = \"\"\n"
"function = \"\"\n"
"inputs = []\n"
"```"
msgstr ""

#: src/ch02-11-foundry-cast.md:454
msgid "Modify `call1.toml` to:"
msgstr ""

#: src/ch02-11-foundry-cast.md:456
msgid ""
"```toml\n"
"[[call]]\n"
"call_type = \"invoke\"\n"
"contract_address = \"0x7e3fc427c2f085e7f8adeaec7501cacdfe6b350daef18d76755ddaa68b3b3f9\"\n"
"function = \"increase_balance\"\n"
"inputs = ['0x4']\n"
"\n"
"[[call]]\n"
"call_type = \"invoke\"\n"
"contract_address = \"0x7e3fc427c2f085e7f8adeaec7501cacdfe6b350daef18d76755ddaa68b3b3f9\"\n"
"function = \"increase_balance\"\n"
"inputs = ['0x1']\n"
"```"
msgstr ""

#: src/ch02-11-foundry-cast.md:470
msgid "In multicalls, only `deploy` and `invoke` actions are allowed. For a detailed guide on these, refer to the earlier section."
msgstr ""

#: src/ch02-11-foundry-cast.md:472
msgid "> Note: Ensure inputs are in hexadecimal format. Strings work normally, but numbers require this format for accurate results."
msgstr ""

#: src/ch02-11-foundry-cast.md:474
msgid "To execute the multicall, use:"
msgstr ""

#: src/ch02-11-foundry-cast.md:476
msgid ""
"```sh\n"
"sncast multicall run --path call1.toml\n"
"```"
msgstr ""

#: src/ch02-11-foundry-cast.md:480
msgid "Upon success:"
msgstr ""

#: src/ch02-11-foundry-cast.md:482
msgid ""
"```sh\n"
"command: multicall run\n"
"transaction_hash: 0x1ae4122266f99a5ede495ff50fdbd927c31db27ec601eb9f3eaa938273d4d61\n"
"```"
msgstr ""

#: src/ch02-11-foundry-cast.md:487
#, fuzzy
msgid "Check the balance:"
msgstr "* Consulta de tu balance:"

#: src/ch02-11-foundry-cast.md:493
msgid "The response:"
msgstr ""

#: src/ch02-11-foundry-cast.md:495
msgid ""
"```shell\n"
"command: call\n"
"response: [0x9]\n"
"```"
msgstr ""

#: src/ch02-11-foundry-cast.md:500
msgid "The expected balance, `0x9`, is confirmed."
msgstr ""

#: src/ch02-11-foundry-cast.md:504
msgid ""
"This guide detailed the use of `sncast`, a robust command-line tool tailored for starknet smart contracts. Its purpose is to make interactions with starknet's smart "
"contracts effortless. Key functionalities include contract deployment, function invocation, and function calling."
msgstr ""

#: src/ch02-11-01-deployment-script.md:1
msgid "# Deployment Script Example"
msgstr ""

#: src/ch02-11-01-deployment-script.md:3
msgid ""
"This tutorial explains how to set up a test and deployment environment for smart contracts. The given script initializes accounts, runs tests, and carries out multicalls."
msgstr ""

#: src/ch02-11-01-deployment-script.md:5
msgid "Disclaimer: This is an example. Use it as a foundation for your own work, adjusting as needed."
msgstr ""

#: src/ch02-11-01-deployment-script.md:7 src/ch03-04-nodes.md:68
msgid "## Setup"
msgstr ""

#: src/ch02-11-01-deployment-script.md:9
msgid "### 1. Prepare the Script File"
msgstr ""

#: src/ch02-11-01-deployment-script.md:11
msgid ""
"- In your project's root folder, create a file named **`script.sh`**. This will house the script.\n"
"- Adjust permissions to make the file executable:"
msgstr ""

#: src/ch02-11-01-deployment-script.md:14
msgid ""
"```sh\n"
"chmod +x script.sh\n"
"```"
msgstr ""

#: src/ch02-11-01-deployment-script.md:18
msgid "### 2. Insert the Script"
msgstr ""

#: src/ch02-11-01-deployment-script.md:20
msgid "Below is the content for `script.sh`. It adheres to best practices for clarity, error management, and long-term support."
msgstr ""

#: src/ch02-11-01-deployment-script.md:22
msgid ""
"**Security Note**: Using environment variables is safer than hardcoding private keys in your scripts, but they're still accessible to any process on your machine and could "
"potentially be leaked in logs or error messages."
msgstr ""

#: src/ch02-11-01-deployment-script.md:24
msgid ""
"```sh\n"
"#!/usr/bin/env bash\n"
"\n"
"# Ensure the script stops on first error\n"
"set -e\n"
"\n"
"# Global variables\n"
"file_path=\"$HOME/.starknet_accounts/starknet_open_zeppelin_accounts.json\"\n"
"CONTRACT_NAME=\"HelloStarknet\"\n"
"PROFILE_NAME=\"account1\"\n"
"MULTICALL_FILE=\"multicall.toml\"\n"
"FAILED_TESTS=false\n"
"\n"
"# Addresses and Private keys as environment variables\n"
"ACCOUNT1_ADDRESS=${ACCOUNT1_ADDRESS:-\"0x7f61fa3893ad0637b2ff76fed23ebbb91835aacd4f743c2347716f856438429\"}\n"
"ACCOUNT2_ADDRESS=${ACCOUNT2_ADDRESS:-\"0x53c615080d35defd55569488bc48c1a91d82f2d2ce6199463e095b4a4ead551\"}\n"
"ACCOUNT1_PRIVATE_KEY=${ACCOUNT1_PRIVATE_KEY:-\"CHANGE_ME\"}\n"
"ACCOUNT2_PRIVATE_KEY=${ACCOUNT2_PRIVATE_KEY:-\"CHANGE_ME\"}\n"
"\n"
"# Utility function to log messages\n"
"function log_message() {\n"
"    echo -e \"\\n$1\"\n"
"}\n"
"\n"
"# Step 1: Clean previous environment\n"
"if [ -e \"$file_path\" ]; then\n"
"    log_message \"Removing existing accounts file...\"\n"
"    rm -rf \"$file_path\"\n"
"fi\n"
"\n"
"# Step 2: Define accounts for the smart contract\n"
"accounts_json=$(cat <<EOF\n"
"[\n"
"    {\n"
"        \"name\": \"account1\",\n"
"        \"address\": \"$ACCOUNT1_ADDRESS\",\n"
"        \"private_key\": \"$ACCOUNT1_PRIVATE_KEY\"\n"
"    },\n"
"    {\n"
"        \"name\": \"account2\",\n"
"        \"address\": \"$ACCOUNT2_ADDRESS\",\n"
"        \"private_key\": \"$ACCOUNT2_PRIVATE_KEY\"\n"
"    }\n"
"]\n"
"EOF\n"
")\n"
"\n"
"# Step 3: Run contract tests\n"
"echo -e \"\\nTesting the contract...\"\n"
"testing_result=$(snforge 2>&1)\n"
"if echo \"$testing_result\" | grep -q \"Failure\"; then\n"
"    echo -e \"Tests failed!\\n\"\n"
"    snforge\n"
"    echo -e \"\\nEnsure that your tests are passing before proceeding.\\n\"\n"
"    FAILED_TESTS=true\n"
"fi\n"
"\n"
"if [ \"$FAILED_TESTS\" != \"true\" ]; then\n"
"    echo \"Tests passed successfully.\"\n"
"\n"
"    # Step 4: Create new account(s)\n"
"    echo -e \"\\nCreating account(s)...\"\n"
"    for row in $(echo \"${accounts_json}\" | jq -c '.[]'); do\n"
"        name=$(echo \"${row}\" | jq -r '.name')\n"
"        address=$(echo \"${row}\" | jq -r '.address')\n"
"        private_key=$(echo \"${row}\" | jq -r '.private_key')\n"
"\n"
"        account_creation_result=$(sncast --url http://localhost:5050/rpc account add --name \"$name\" --address \"$address\" --private-key \"$private_key\" --add-profile "
"2>&1)\n"
"        if echo \"$account_creation_result\" | grep -q \"error:\"; then\n"
"            echo \"Account $name already exists.\"\n"
"        else\n"
"            echo \"Account $name created successfully.\"\n"
"        fi\n"
"    done\n"
"\n"
"    # Step 5: Build, declare, and deploy the contract\n"
"    echo -e \"\\nBuilding the contract...\"\n"
"    scarb build\n"
"\n"
"    echo -e \"\\nDeclaring the contract...\"\n"
"    declaration_output=$(sncast --profile \"$PROFILE_NAME\" --wait declare --contract-name \"$CONTRACT_NAME\" 2>&1)\n"
"\n"
"    if echo \"$declaration_output\" | grep -q \"error: Class with hash\"; then\n"
"        echo \"Class hash already declared.\"\n"
"        CLASS_HASH=$(echo \"$declaration_output\" | sed -n 's/.*Class with hash \\([^ ]*\\).*/\\1/p')\n"
"    else\n"
"        echo \"New class hash declaration.\"\n"
"        CLASS_HASH=$(echo \"$declaration_output\" | grep -o 'class_hash: 0x[^ ]*' | sed 's/class_hash: //')\n"
"    fi\n"
"\n"
"    echo \"Class Hash: $CLASS_HASH\"\n"
"\n"
"    echo -e \"\\nDeploying the contract...\"\n"
"    deployment_result=$(sncast --profile \"$PROFILE_NAME\" deploy --class-hash \"$CLASS_HASH\")\n"
"    CONTRACT_ADDRESS=$(echo \"$deployment_result\" | grep -o \"contract_address: 0x[^ ]*\" | awk '{print $2}')\n"
"    echo \"Contract address: $CONTRACT_ADDRESS\"\n"
"\n"
"    # Step 6: Create and execute multicalls\n"
"    echo -e \"\\nSetting up multicall...\"\n"
"    cat >\"$MULTICALL_FILE\" <<-EOM\n"
"[[call]]\n"
"call_type = 'invoke'\n"
"contract_address = '$CONTRACT_ADDRESS'\n"
"function = 'increase_balance'\n"
"inputs = ['0x1']\n"
"\n"
"[[call]]\n"
"call_type = 'invoke'\n"
"contract_address = '$CONTRACT_ADDRESS'\n"
"function = 'increase_balance'\n"
"inputs = ['0x2']\n"
"EOM\n"
"\n"
"    echo \"Executing multicall...\"\n"
"    sncast --profile \"$PROFILE_NAME\" multicall run --path \"$MULTICALL_FILE\"\n"
"\n"
"    # Step 7: Query the contract state\n"
"    echo -e \"\\nChecking balance...\"\n"
"    sncast --profile \"$PROFILE_NAME\" call --contract-address \"$CONTRACT_ADDRESS\" --function get_balance\n"
"\n"
"    # Step 8: Clean up temporary files\n"
"    echo -e \"\\nCleaning up...\"\n"
"    [ -e \"$MULTICALL_FILE\" ] && rm \"$MULTICALL_FILE\"\n"
"\n"
"    echo -e \"\\nScript completed successfully.\\n\"\n"
"fi\n"
"```"
msgstr ""

#: src/ch02-11-01-deployment-script.md:152
msgid "### 3. Adjust the Bash Path"
msgstr ""

#: src/ch02-11-01-deployment-script.md:154
msgid "The line `#!/usr/bin/env bash` indicates the path to the bash interpreter. If you require a different version or location of bash, determine its path using:"
msgstr ""

#: src/ch02-11-01-deployment-script.md:156
#, fuzzy
msgid ""
"```sh\n"
"which bash\n"
"```"
msgstr ""
"```bash\n"
"scarb build\n"
"```"

#: src/ch02-11-01-deployment-script.md:160
msgid "Then replace `#!/usr/bin/env` bash in the script with the resulting path, such as `#!/path/to/your/bash`."
msgstr ""

#: src/ch02-11-01-deployment-script.md:162
#, fuzzy
msgid "## Execution"
msgstr "### Leer Funciones"

#: src/ch02-11-01-deployment-script.md:164
msgid "When running the script, you'll need to provide the environment variables `ACCOUNT1_PRIVATE_KEY` and `ACCOUNT2_PRIVATE_KEY`."
msgstr ""

#: src/ch02-11-01-deployment-script.md:166 src/ch03-05-layer-3.md:9
msgid "Example:"
msgstr ""

#: src/ch02-11-01-deployment-script.md:168
msgid ""
"```sh\n"
"ACCOUNT1_PRIVATE_KEY=\"0x259f4329e6f4590b\" ACCOUNT2_PRIVATE_KEY=\"0xb4862b21fb97d\" ./script.sh\n"
"```"
msgstr ""

#: src/ch02-11-01-deployment-script.md:172 src/ch04-04-01-multicaller.md:83
msgid "## Considerations"
msgstr ""

#: src/ch02-11-01-deployment-script.md:174
msgid ""
"- The **`set -e`** directive in the script ensures it exits if any command fails, enhancing the reliability of the deployment and testing process.\n"
"- Always secure private keys and sensitive information. Keep them away from logs and visible outputs.\n"
"- For greater flexibility, consider moving hardcoded values like accounts or contract names to a configuration file. This approach simplifies updates and overall management."
msgstr ""

#: src/ch02-12-foundry-forge.md:1
#, fuzzy
msgid "# Foundry Forge: Testing"
msgstr "# Foundry Forge: Testing 🚧"

#: src/ch02-12-foundry-forge.md:3
msgid ""
"[Starknet Foundry](https://github.com/foundry-rs/starknet-foundry) is a tool designed for testing and developing Starknet contracts. It is an adaptation of the Ethereum "
"Foundry for Starknet, aiming to expedite the development process."
msgstr ""
"[Starknet Foundry](https://github.com/foundry-rs/starknet-foundry) es una herramienta diseñada para probar y desarrollar contratos Starknet. Es una adaptación de Ethereum "
"Foundry para Starknet, con el objetivo de acelerar el proceso de desarrollo."

#: src/ch02-12-foundry-forge.md:5
msgid "The project consists of two primary components:"
msgstr "El proyecto consta de dos componentes principales:"

#: src/ch02-12-foundry-forge.md:7
msgid ""
"- **Forge**: A testing tool specifically for Cairo contracts. This tool acts as a test runner and boasts features designed to enhance your testing process. Tests are written "
"directly in Cairo, eliminating the need for other programming languages. Additionally, the Forge implementation uses Rust, mirroring Ethereum Foundry's choice of language.\n"
"- **Cast**: This serves as a DevOps tool for StarkNet, initially supporting a series of commands to interface with StarkNet. In the future, Cast aims to offer deployment "
"scripts for contracts and other DevOps functions."
msgstr ""
"- **Forge**: Una herramienta de prueba específica para contratos de Cairo. Esta herramienta actúa como un ejecutor de pruebas y cuenta con funciones diseñadas para mejorar "
"su proceso de prueba. Las pruebas se escriben directamente en Cairo, lo que elimina la necesidad de otros lenguajes de programación. Además, la implementación de Forge "
"utiliza Rust, lo que refleja la elección de lenguaje de Ethereum Foundry.\n"
"- **Cast**: sirve como herramienta DevOps para Starknet y admite inicialmente una serie de comandos para interactuar con Starknet. En el futuro, Cast pretende ofrecer "
"scripts de implementación para contratos y otras funciones de DevOps."

#: src/ch02-12-foundry-forge.md:10
msgid "## Forge"
msgstr "## Forge"

#: src/ch02-12-foundry-forge.md:12
msgid ""
"Merely deploying contracts is not the end game. Many tools have offered this capability in the past. Forge sets itself apart by hosting a Cairo VM instance, enabling the "
"sequential execution of tests. It employs Scarb for contract compilation."
msgstr ""
"Simplemente desplegar contratos no es el objetivo final. Muchas herramientas han ofrecido esta capacidad en el pasado. Forge se distingue por alojar una instancia de Cairo "
"VM, lo que permite la ejecución secuencial de pruebas. Emplea Scarb para la compilación de contratos."

#: src/ch02-12-foundry-forge.md:14
msgid ""
"To utilize Forge, define test functions and label them with test attributes. Users can either test standalone Cairo functions or integrate contracts, dispatchers, and test "
"contract interactions on-chain."
msgstr ""
"Para utilizar Forge, defina funciones de prueba y etiquételas con atributos de prueba. Los usuarios pueden probar funciones independientes de Cairo o integrar contratos, "
"despachadores y probar interacciones de contratos en cadena."

#: src/ch02-12-foundry-forge.md:16
msgid "## `snForge` Command-Line Usage"
msgstr ""

#: src/ch02-12-foundry-forge.md:18
msgid "This section guides you through the Starknet Foundry `snforge` command-line tool. Learn how to set up a new project, compile the code, and execute tests."
msgstr ""

#: src/ch02-12-foundry-forge.md:20
msgid "To start a new project with Starknet Foundry, use the `--init` command and replace `project_name` with your project's name."
msgstr ""

#: src/ch02-12-foundry-forge.md:22
msgid ""
"```shell\n"
"snforge --init project_name\n"
"```"
msgstr ""

#: src/ch02-12-foundry-forge.md:26
msgid "Once you've set up the project, inspect its layout:"
msgstr ""

#: src/ch02-12-foundry-forge.md:28
msgid ""
"```shell\n"
"cd project_name\n"
"tree . -L 1\n"
"```"
msgstr ""

#: src/ch02-12-foundry-forge.md:33
msgid "The project structure is as follows:"
msgstr ""

#: src/ch02-12-foundry-forge.md:35
msgid ""
"```shell\n"
".\n"
"├── README.md\n"
"├── Scarb.toml\n"
"├── src\n"
"└── tests\n"
"```"
msgstr ""

#: src/ch02-12-foundry-forge.md:43
msgid ""
"- `src/` holds your contract source code.\n"
"- `tests/` is the location of your test files.\n"
"- `Scarb.toml` is for project and **`snforge`** configurations."
msgstr ""

#: src/ch02-12-foundry-forge.md:47
msgid "Ensure the CASM code generation is active in the `Scarb.toml` file:"
msgstr ""

#: src/ch02-12-foundry-forge.md:49
msgid ""
"```shell\n"
"# ...\n"
"[[target.starknet-contract]]\n"
"casm = true\n"
"# ...\n"
"```"
msgstr ""

#: src/ch02-12-foundry-forge.md:56
msgid "To run tests using `snforge`:"
msgstr ""

#: src/ch02-12-foundry-forge.md:58
msgid ""
"```shell\n"
"snforge\n"
"\n"
"Collected 2 test(s) from the `test_name` package\n"
"Running 0 test(s) from `src/`\n"
"Running 2 test(s) from `tests/`\n"
"[PASS] tests::test_contract::test_increase_balance\n"
"[PASS] tests::test_contract::test_cannot_increase_balance_with_zero_value\n"
"Tests: 2 passed, 0 failed, 0 skipped\n"
"```"
msgstr ""

#: src/ch02-12-foundry-forge.md:69
msgid "## Integrating `snforge` with Existing Scarb Projects"
msgstr ""

#: src/ch02-12-foundry-forge.md:71
msgid ""
"For those with an established Scarb project who wish to incorporate `snforge`, ensure the `snforge_std package` is declared as a dependency. Insert the line below in the "
"[dependencies] section of your `Scarb.toml`:"
msgstr ""

#: src/ch02-12-foundry-forge.md:73
#, fuzzy
msgid ""
"```shell\n"
"# ...\n"
"[dependencies]\n"
"snforge_std = { git = \"https://github.com/foundry-rs/starknet-foundry.git\", tag = \"[VERSION]\" }\n"
"```"
msgstr ""
"[dependencies]\n"
"    alexandria_math = { git = \"https://github.com/keep-starknet-strange/alexandria.git\", rev = \"81bb93c\" }"

#: src/ch02-12-foundry-forge.md:79
msgid "Ensure the tag version corresponds with your `snforge` version. To verify your `snforge` version:"
msgstr ""

#: src/ch02-12-foundry-forge.md:81
#, fuzzy
msgid ""
"```sh\n"
"snforge --version\n"
"```"
msgstr ""
"```bash\n"
"starkli --version\n"
"```"

#: src/ch02-12-foundry-forge.md:85
#, fuzzy
msgid "Or, add this dependency using the `scarb` command:"
msgstr "Para eliminar una dependencia, puede utilizar el comando `scarb rm`."

#: src/ch02-12-foundry-forge.md:87
msgid ""
"```shell\n"
"scarb add snforge_std --git https://github.com/foundry-rs/starknet-foundry.git --tag VERSION\n"
"```"
msgstr ""

#: src/ch02-12-foundry-forge.md:91
msgid "With these steps, your existing Scarb project is now **`snforge`**-ready."
msgstr ""

#: src/ch02-12-foundry-forge.md:93
msgid "## Testing with `snforge`"
msgstr ""

#: src/ch02-12-foundry-forge.md:95
msgid "Utilize Starknet Foundry's `snforge` command to efficiently run tests."
msgstr ""

#: src/ch02-12-foundry-forge.md:97
msgid "### Executing Tests"
msgstr ""

#: src/ch02-12-foundry-forge.md:99
msgid "Navigate to the package directory and issue this command to run tests:"
msgstr ""

#: src/ch02-12-foundry-forge.md:101
#, fuzzy
msgid ""
"```shell\n"
"snforge\n"
"```"
msgstr ""
"```bash\n"
"vercel login\n"
"```"

#: src/ch02-12-foundry-forge.md:105
msgid "Sample output might resemble:"
msgstr ""

#: src/ch02-12-foundry-forge.md:107
msgid ""
"```shell\n"
"Collected 3 test(s) from `package_name` package\n"
"Running 3 test(s) from `src/`\n"
"[PASS] package_name::executing\n"
"[PASS] package_name::calling\n"
"[PASS] package_name::calling_another\n"
"Tests: 3 passed, 0 failed, 0 skipped\n"
"```"
msgstr ""

#: src/ch02-12-foundry-forge.md:116
msgid "## Example: Testing a Simple Contract"
msgstr ""

#: src/ch02-12-foundry-forge.md:118
msgid "The example provided below demonstrates how to test a Starknet contract using `snforge`."
msgstr ""

#: src/ch02-12-foundry-forge.md:120
msgid ""
"```rust\n"
"#[starknet::interface]\n"
"trait IHelloStarknet<TContractState> {\n"
"    fn increase_balance(ref self: TContractState, amount: felt252);\n"
"    fn get_balance(self: @TContractState) -> felt252;\n"
"}\n"
"\n"
"#[starknet::contract]\n"
"mod HelloStarknet {\n"
"    #[storage]\n"
"    struct Storage {\n"
"        balance: felt252,\n"
"    }\n"
"\n"
"    #[external(v0)]\n"
"    impl HelloStarknetImpl of super::IHelloStarknet<ContractState> {\n"
"        // Increases the balance by the specified amount.\n"
"        fn increase_balance(ref self: ContractState, amount: felt252) {\n"
"            self.balance.write(self.balance.read() + amount);\n"
"        }\n"
"\n"
"        // Returns the balance.\n"
"\n"
"        fn get_balance(self: @ContractState) -> felt252 {\n"
"            self.balance.read()\n"
"        }\n"
"    }\n"
"}\n"
"```"
msgstr ""

#: src/ch02-12-foundry-forge.md:150
msgid "Remember, the identifier following `mod` signifies the contract name. Here, the contract name is `HelloStarknet`."
msgstr ""

#: src/ch02-12-foundry-forge.md:152
msgid "### Craft the Test"
msgstr ""

#: src/ch02-12-foundry-forge.md:154
msgid "Below is a test for the **`HelloStarknet`** contract. This test deploys **`HelloStarknet`** and interacts with its functions:"
msgstr ""

#: src/ch02-12-foundry-forge.md:156
msgid ""
"```rust\n"
"use snforge_std::{ declare, ContractClassTrait };\n"
"\n"
"#[test]\n"
"fn call_and_invoke() {\n"
"    // Declare and deploy the contract\n"
"    let contract = declare('HelloStarknet');\n"
"    let contract_address = contract.deploy(@ArrayTrait::new()).unwrap();\n"
"\n"
"    // Instantiate a Dispatcher object for contract interactions\n"
"    let dispatcher = IHelloStarknetDispatcher { contract_address };\n"
"\n"
"    // Invoke a contract's view function\n"
"    let balance = dispatcher.get_balance();\n"
"    assert(balance == 0, 'balance == 0');\n"
"\n"
"    // Invoke another function to modify the storage state\n"
"    dispatcher.increase_balance(100);\n"
"\n"
"    // Validate the transaction's effect\n"
"    let balance = dispatcher.get_balance();\n"
"    assert(balance == 100, 'balance == 100');\n"
"}\n"
"```"
msgstr ""

#: src/ch02-12-foundry-forge.md:181
msgid "To run the test, execute the `snforge` command. The expected output is:"
msgstr ""

#: src/ch02-12-foundry-forge.md:183
msgid ""
"```shell\n"
"Collected 1 test(s) from using_dispatchers package\n"
"Running 1 test(s) from src/\n"
"[PASS] using_dispatchers::call_and_invoke\n"
"Tests: 1 passed, 0 failed, 0 skipped\n"
"```"
msgstr ""

#: src/ch02-12-foundry-forge.md:190
#, fuzzy
msgid "## Example: Testing ERC20 Contract"
msgstr "## Implementación del Contrato ERC20"

#: src/ch02-12-foundry-forge.md:192
msgid ""
"There are several methods to test smart contracts, such as unit tests, integration tests, fuzz tests, fork tests, E2E tests, and using foundry cheatcodes. This section "
"discusses testing an ERC20 example contract from the `starknet-js` subchapter examples using unit and integration tests, filtering, foundry cheatcodes, and fuzz tests "
"through the `snforge` CLI."
msgstr ""

#: src/ch02-12-foundry-forge.md:194
#, fuzzy
msgid "## ERC20 Contract Example"
msgstr "## Implementación del Contrato ERC20"

#: src/ch02-12-foundry-forge.md:196
msgid ""
"After setting up your foundry project, add the following dependency to your `Scarb.toml` (in this case we are using version 0.7.0 of the OpenZeppelin Cairo contracts, but "
"you can use any version you want):"
msgstr ""

#: src/ch02-12-foundry-forge.md:198
msgid ""
"```shell\n"
"openzeppelin = { git = \"https://github.com/OpenZeppelin/cairo-contracts.git\", tag = \"v0.7.0\" }\n"
"```"
msgstr ""

#: src/ch02-12-foundry-forge.md:202
msgid "Here's a basic ERC20 contract:"
msgstr ""

#: src/ch02-12-foundry-forge.md:204
#, fuzzy
msgid ""
"```rust\n"
"use starknet::ContractAddress;\n"
"\n"
"#[starknet::interface]\n"
"trait Ierc20<TContractState> {\n"
"    fn balance_of(self: @TContractState, account: ContractAddress) -> u256;\n"
"    fn transfer(ref self: TContractState, recipient: ContractAddress, amount: u256) -> bool;\n"
"}\n"
"\n"
"#[starknet::contract]\n"
"mod erc20 {\n"
"    use starknet::ContractAddress;\n"
"    use openzeppelin::token::erc20::ERC20;\n"
"\n"
"    #[storage]\n"
"    struct Storage {}\n"
"\n"
"    #[constructor]\n"
"    fn constructor(\n"
"        ref self: ContractState,\n"
"        initial_supply: felt252,\n"
"        recipient: ContractAddress\n"
"    ) {\n"
"        let name = 'MyToken';\n"
"        let symbol = 'MTK';\n"
"\n"
"        let mut unsafe_state = ERC20::unsafe_new_contract_state();\n"
"        ERC20::InternalImpl::initializer(ref unsafe_state, name, symbol);\n"
"        ERC20::InternalImpl::_mint(ref unsafe_state, recipient, initial_supply.into());\n"
"    }\n"
"\n"
"    #[external(v0)]\n"
"    impl Ierc20Impl of super::Ierc20<ContractState> {\n"
"        fn balance_of(self: @ContractState, account: ContractAddress) -> u256 {\n"
"            let unsafe_state = ERC20::unsafe_new_contract_state();\n"
"            ERC20::ERC20Impl::balance_of(@unsafe_state, account)\n"
"        }\n"
"\n"
"        fn transfer(ref self: ContractState, recipient: ContractAddress, amount: u256) -> bool {\n"
"            let mut unsafe_state = ERC20::unsafe_new_contract_state();\n"
"            ERC20::ERC20Impl::transfer(ref unsafe_state, recipient, amount)\n"
"        }\n"
"    }\n"
"}\n"
"```"
msgstr ""
"```rust\n"
"#[starknet::contract]\n"
"mod erc20 {\n"
"    use starknet::ContractAddress;\n"
"    use openzeppelin::token::erc20::ERC20;\n"
"\n"
"    #[storage]\n"
"    struct Storage {}\n"
"\n"
"    #[constructor]\n"
"    fn constructor(\n"
"        ref self: ContractState,\n"
"        initial_supply: u256,\n"
"        recipient: ContractAddress\n"
"    ) {\n"
"        let name = 'MyToken';\n"
"        let symbol = 'MTK';\n"
"\n"
"        let mut unsafe_state = ERC20::unsafe_new_contract_state();\n"
"        ERC20::InternalImpl::initializer(ref unsafe_state, name, symbol);\n"
"        ERC20::InternalImpl::_mint(ref unsafe_state, recipient, initial_supply);\n"
"    }\n"
"\n"
"    #[external(v0)]\n"
"    #[generate_trait]\n"
"    impl Ierc20Impl of Ierc20 {\n"
"        fn balance_of(self: @ContractState, account: ContractAddress) -> u256 {\n"
"            let unsafe_state = ERC20::unsafe_new_contract_state();\n"
"            ERC20::ERC20Impl::balance_of(@unsafe_state, account)\n"
"        }\n"
"\n"
"        fn transfer(ref self: ContractState, recipient: ContractAddress, amount: u256) -> bool {\n"
"            let mut unsafe_state = ERC20::unsafe_new_contract_state();\n"
"            ERC20::ERC20Impl::transfer(ref unsafe_state, recipient, amount)\n"
"        }\n"
"    }\n"
"}\n"
"```"

#: src/ch02-12-foundry-forge.md:250
msgid "This contract allows minting tokens to a recipient during deployment, checking balances, and transferring tokens, relying on the openzeppelin ERC20 library."
msgstr ""

#: src/ch02-12-foundry-forge.md:252
msgid "### Test Preparation"
msgstr ""

#: src/ch02-12-foundry-forge.md:254
msgid "Organize your test file and include the required imports:"
msgstr ""

#: src/ch02-12-foundry-forge.md:256
msgid ""
"```rust\n"
"#[cfg(test)]\n"
"mod tests {\n"
"    use array::ArrayTrait;\n"
"    use result::ResultTrait;\n"
"    use option::OptionTrait;\n"
"    use traits::TryInto;\n"
"    use starknet::ContractAddress;\n"
"    use starknet::Felt252TryIntoContractAddress;\n"
"    use snforge_std::{declare, ContractClassTrait};\n"
"    // Additional code here.\n"
"}\n"
"```"
msgstr ""

#: src/ch02-12-foundry-forge.md:270
msgid "For testing, you'll need a helper function to deploy the contract instance. This function requires a `supply` amount and `recipient` address:"
msgstr ""

#: src/ch02-12-foundry-forge.md:272
msgid ""
"```rust\n"
"use snforge_std::{declare, ContractClassTrait};\n"
"\n"
"fn deploy_contract(name: felt252) -> ContractAddress {\n"
"    let recipient = starknet::contract_address_const::<0x01>();\n"
"    let supply: felt252 = 20000000;\n"
"    let contract = declare(name);\n"
"    let mut calldata = array![supply, recipient.into()];\n"
"    contract.deploy(@calldata).unwrap()\n"
"}\n"
"// Additional code here.\n"
"```"
msgstr ""

#: src/ch02-12-foundry-forge.md:285
msgid "Use `declare` and `ContractClassTrait` from `snforge_std`. Then, initialize the `supply` and `recipient`, declare the contract, compute the calldata, and deploy."
msgstr ""

#: src/ch02-12-foundry-forge.md:287
#, fuzzy
msgid "### Writing the Test Cases"
msgstr "### Actualización del Componente Wallet"

#: src/ch02-12-foundry-forge.md:289
msgid "#### Verifying the Balance After Deployment"
msgstr ""

#: src/ch02-12-foundry-forge.md:291
msgid "To begin, test the deployment helper function to confirm the recipient's balance:"
msgstr ""

#: src/ch02-12-foundry-forge.md:293
msgid ""
"```rust\n"
"    // ...\n"
"    use erc20_contract::erc20::Ierc20SafeDispatcher;\n"
"    use erc20_contract::erc20::Ierc20SafeDispatcherTrait;\n"
"\n"
"    #[test]\n"
"    #[available_gas(3000000000000000)]\n"
"    fn test_balance_of() {\n"
"        let contract_address = deploy_contract('erc20');\n"
"        let safe_dispatcher = Ierc20SafeDispatcher { contract_address };\n"
"        let recipient = starknet::contract_address_const::<0x01>();\n"
"        let balance = safe_dispatcher.balance_of(recipient).unwrap();\n"
"        assert(balance == 20000000, 'Invalid Balance');\n"
"    }\n"
"```"
msgstr ""

#: src/ch02-12-foundry-forge.md:309
msgid "Execute `snforge` to verify:"
msgstr ""

#: src/ch02-12-foundry-forge.md:311
msgid ""
"```shell\n"
"Collected 1 test from erc20_contract package\n"
"[PASS] tests::test_erc20::test_balance_of\n"
"```"
msgstr ""

#: src/ch02-12-foundry-forge.md:316
msgid "#### Utilizing Foundry Cheat Codes"
msgstr ""

#: src/ch02-12-foundry-forge.md:318
msgid ""
"When testing smart contracts, simulating different conditions is essential. `Foundry Cheat Codes` from the `snforge_std` library offer these simulation capabilities for "
"StarkNet smart contracts."
msgstr ""

#: src/ch02-12-foundry-forge.md:320
msgid ""
"These cheat codes consist of helper functions that adjust the smart contract's environment. They allow developers to modify parameters or conditions to examine contract "
"behavior in specific scenarios."
msgstr ""

#: src/ch02-12-foundry-forge.md:322
msgid ""
"Using `snforge_std`'s cheat codes, you can change elements like block numbers, timestamps, or even the caller of a function. This guide focuses on `start_prank` and "
"`stop_prank`."
msgstr ""

#: src/ch02-12-foundry-forge.md:324
msgid "Below is a transfer test example:"
msgstr ""

#: src/ch02-12-foundry-forge.md:326
msgid ""
"```rust\n"
"    use snforge_std::{declare, ContractClassTrait, start_prank, stop_prank};\n"
"\n"
"    #[test]\n"
"    #[available_gas(3000000000000000)]\n"
"    fn test_transfer() {\n"
"        let contract_address = deploy_contract('erc20');\n"
"        let safe_dispatcher = Ierc20SafeDispatcher { contract_address };\n"
"\n"
"        let sender = starknet::contract_address_const::<0x01>();\n"
"        let receiver = starknet::contract_address_const::<0x02>();\n"
"        let amount : felt252 = 10000000;\n"
"\n"
"        // Set the function's caller\n"
"        start_prank(contract_address, sender);\n"
"        safe_dispatcher.transfer(receiver.into(), amount.into());\n"
"\n"
"        let balance_after_transfer = safe_dispatcher.balance_of(receiver).unwrap();\n"
"        assert(balance_after_transfer == 10000000, 'Incorrect Amount');\n"
"\n"
"        // End the prank\n"
"        stop_prank(contract_address);\n"
"    }\n"
"```"
msgstr ""

#: src/ch02-12-foundry-forge.md:351
msgid "Executing `snforge` for the tests displays:"
msgstr ""

#: src/ch02-12-foundry-forge.md:353
msgid ""
"```shell\n"
"Collected 2 tests from erc20_contract package\n"
"[PASS] tests::test_erc20::test_balance_of\n"
"[PASS] tests::test_erc20::test_transfer\n"
"```"
msgstr ""

#: src/ch02-12-foundry-forge.md:359
msgid "In this example, `start_prank` determines the transfer function's caller, while `stop_prank` concludes the prank."
msgstr ""

#: src/ch02-12-foundry-forge.md:361
msgid ""
"<details>\n"
"<summary>Full `ERC20 test example` file</summary>\n"
"        #[cfg(test)]\n"
"        mod tests {\n"
"        use array::ArrayTrait;\n"
"        use result::ResultTrait;\n"
"        use option::OptionTrait;\n"
"        use traits::TryInto;\n"
"        use starknet::ContractAddress;\n"
"        use starknet::Felt252TryIntoContractAddress;"
msgstr ""

#: src/ch02-12-foundry-forge.md:372
msgid ""
"    use snforge_std::{declare, ContractClassTrait, start_prank, stop_prank};\n"
"        use erc20_contract::erc20::Ierc20SafeDispatcher;\n"
"        use erc20_contract::erc20::Ierc20SafeDispatcherTrait;\n"
"\n"
"        fn deploy_contract(name: felt252) -> ContractAddress {\n"
"            let recipient = starknet::contract_address_const::<0x01>();\n"
"            let supply : felt252 = 20000000;\n"
"            let contract = declare(name);\n"
"            let mut calldata = array![supply, recipient.into()];\n"
"            contract.deploy(@calldata).unwrap()\n"
"        }\n"
"\n"
"        #[test]\n"
"        #[available_gas(3000000000000000)]\n"
"        fn test_balance_of() {\n"
"            let contract_address = deploy_contract('erc20');\n"
"            let safe_dispatcher = Ierc20SafeDispatcher { contract_address };\n"
"            let recipient = starknet::contract_address_const::<0x01>();\n"
"            let balance = safe_dispatcher.balance_of(recipient).unwrap();\n"
"            assert(balance == 20000000, 'Invalid Balance');\n"
"        }\n"
"\n"
"        #[test]\n"
"        #[available_gas(3000000000000000)]\n"
"        fn test_transfer() {\n"
"            let contract_address = deploy_contract('erc20');\n"
"            let safe_dispatcher = Ierc20SafeDispatcher { contract_address };\n"
"\n"
"            let sender = starknet::contract_address_const::<0x01>();\n"
"            let receiver = starknet::contract_address_const::<0x02>();\n"
"            let amount : felt252 = 10000000;\n"
"\n"
"            start_prank(contract_address, sender);\n"
"            safe_dispatcher.transfer(receiver.into(), amount.into());\n"
"            let balance_after_transfer = safe_dispatcher.balance_of(receiver).unwrap();\n"
"            assert(balance_after_transfer == 10000000, 'Incorrect Amount');\n"
"            stop_prank(contract_address);\n"
"        }\n"
"        }"
msgstr ""

#: src/ch02-12-foundry-forge.md:412
msgid "</details>"
msgstr ""

#: src/ch02-12-foundry-forge.md:414
#, fuzzy
msgid "## Fuzz Testing"
msgstr "## Otras Lecturas"

#: src/ch02-12-foundry-forge.md:416
msgid ""
"Fuzz testing introduces random inputs to the code to identify vulnerabilities, security issues, and unforeseen behaviors. While you can manually provide these inputs, "
"automation is preferable when testing a broad set of values. See the example below in `test_fuzz.cairo`:"
msgstr ""

#: src/ch02-12-foundry-forge.md:418
msgid ""
"```rust\n"
"    fn mul(a: felt252, b: felt252) -> felt252 {\n"
"        return a * b;\n"
"    }\n"
"\n"
"    #[test]\n"
"    fn test_fuzz_sum(x: felt252, y: felt252) {\n"
"        assert(mul(x, y) == x * y, 'incorrect');\n"
"    }\n"
"```"
msgstr ""

#: src/ch02-12-foundry-forge.md:429
msgid "Running `snforge` produces:"
msgstr ""

#: src/ch02-12-foundry-forge.md:431
msgid ""
"```shell\n"
"    Collected 1 test(s) from erc20_contract package\n"
"    Running 0 test(s) from src/\n"
"    Running 1 test(s) from tests/\n"
"    [PASS] tests::test_fuzz::test_fuzz_sum (fuzzer runs = 256)\n"
"    Tests: 1 passed, 0 failed, 0 skipped\n"
"    Fuzzer seed: 6375310854403272271\n"
"```"
msgstr ""

#: src/ch02-12-foundry-forge.md:440
msgid "The fuzzer supports these types by November 2023:"
msgstr ""

#: src/ch02-12-foundry-forge.md:442
msgid ""
"- u8\n"
"- u16\n"
"- u32\n"
"- u64\n"
"- u128\n"
"- u256\n"
"- felt252"
msgstr ""

#: src/ch02-12-foundry-forge.md:450
msgid "`Fuzzer Configuration`"
msgstr ""

#: src/ch02-12-foundry-forge.md:452
msgid "You can set the number of runs and the seed for a test:"
msgstr ""

#: src/ch02-12-foundry-forge.md:454
msgid ""
"```rust\n"
"    #[test]\n"
"    #[fuzzer(runs: 100, seed: 38)]\n"
"    fn test_fuzz_sum(x: felt252, y: felt252) {\n"
"        assert(mul(x, y) == x * y, 'incorrect');\n"
"    }\n"
"```"
msgstr ""

#: src/ch02-12-foundry-forge.md:462
msgid "Or, use the command line:"
msgstr ""

#: src/ch02-12-foundry-forge.md:464
msgid ""
"```shell\n"
"    $ snforge --fuzzer-runs 500 --fuzzer-seed 4656\n"
"```"
msgstr ""

#: src/ch02-12-foundry-forge.md:468
msgid "Or in `scarb.toml`:"
msgstr ""

#: src/ch02-12-foundry-forge.md:470
msgid ""
"```shell\n"
"    # ...\n"
"    [tool.snforge]\n"
"    fuzzer_runs = 500\n"
"    fuzzer_seed = 4656\n"
"    # ...\n"
"```"
msgstr ""

#: src/ch02-12-foundry-forge.md:478
msgid "## Filter Tests"
msgstr ""

#: src/ch02-12-foundry-forge.md:480
msgid "To execute specific tests, use a filter string with the `snforge` command. Tests matching the filter based on their absolute module tree path will be executed."
msgstr ""

#: src/ch02-12-foundry-forge.md:482
msgid "For instance, to run all tests with the string 'test\\_' in their name:"
msgstr ""

#: src/ch02-12-foundry-forge.md:484
#, fuzzy
msgid ""
"```shell\n"
"snforge test_\n"
"```"
msgstr ""
"```shell\n"
"npx create-starknet\n"
"```"

#: src/ch02-12-foundry-forge.md:488
msgid "Expected output:"
msgstr ""

#: src/ch02-12-foundry-forge.md:490
msgid ""
"```shell\n"
"    Collected 3 test(s) from erc20_contract package\n"
"    Running 0 test(s) from src/\n"
"    Running 3 test(s) from tests/\n"
"    [PASS] tests::test_erc20::tests::test_balance_of\n"
"    [PASS] tests::test_erc20::tests::test_transfer\n"
"    [PASS] tests::test_fuzz::test_fuzz_sum (fuzzer runs = 256)\n"
"    Tests: 3 passed, 0 failed, 0 skipped\n"
"    Fuzzer seed: 10426315620495146768\n"
"```"
msgstr ""

#: src/ch02-12-foundry-forge.md:501
msgid "All the tests with the string 'test\\_' in their test name when through."
msgstr ""

#: src/ch02-12-foundry-forge.md:503
msgid "Another example: To filter and run `test_fuzz_sum` we can partially match the test name with the string 'fuzz_sum' like this:"
msgstr ""

#: src/ch02-12-foundry-forge.md:505
#, fuzzy
msgid ""
"```shell\n"
"snforge test_fuzz_sum\n"
"```"
msgstr ""
"```shell\n"
"npx create-starknet\n"
"```"

#: src/ch02-12-foundry-forge.md:509
msgid "To execute an exact test, combine the `--exact` flag with a fully qualified test name:"
msgstr ""

#: src/ch02-12-foundry-forge.md:511
msgid ""
"```shell\n"
"snforge package_name::test_name --exact\n"
"```"
msgstr ""

#: src/ch02-12-foundry-forge.md:515
msgid "To halt the test suite upon the first test failure, use the `--exit-first` flag:"
msgstr ""

#: src/ch02-12-foundry-forge.md:517
#, fuzzy
msgid ""
"```shell\n"
"snforge --exit-first\n"
"```"
msgstr ""
"```shell\n"
"npx create-starknet\n"
"```"

#: src/ch02-12-foundry-forge.md:521
msgid "If a test fails, the output will resemble:"
msgstr ""

#: src/ch02-12-foundry-forge.md:523
msgid ""
"```shell\n"
"    Collected 3 test(s) from erc20_contract package\n"
"    Running 0 test(s) from src/\n"
"    Running 3 test(s) from tests/\n"
"    [FAIL] tests::test_erc20::tests::test_balance_of\n"
"\n"
"    Failure data:\n"
"    original value: [381278114803728420489684244530881381], converted to a string: [Invalid Balance]\n"
"\n"
"    [SKIP] tests::test_erc20::tests::test_transfer\n"
"    [SKIP] tests::test_fuzz::test_fuzz_sum\n"
"    Tests: 0 passed, 1 failed, 2 skipped\n"
"\n"
"    Failures:\n"
"        tests::test_erc20::tests::test_balance_of\n"
"```"
msgstr ""

#: src/ch03-00-architecture.md:1
msgid "# Architecture"
msgstr ""

#: src/ch03-00-architecture.md:3
msgid ""
"This is an introduction to Starknet’s Layer 2 architecture, designed for\n"
"both beginners and experienced users. It focuses on the key components:\n"
"Sequencers, Provers, and nodes."
msgstr ""

#: src/ch03-00-architecture.md:7
msgid ""
"Starknet is a coordinated system, with each component—Sequencers,\n"
"Provers, and nodes—playing a specific yet interconnected role. Although\n"
"Starknet hasn’t fully decentralized yet, it’s actively moving toward\n"
"that goal. This understanding of the roles and interactions within the\n"
"system will help you better grasp the intricacies of the Starknet\n"
"ecosystem."
msgstr ""

#: src/ch03-00-architecture.md:14
msgid "## High-Level Overview"
msgstr ""

#: src/ch03-00-architecture.md:16
msgid ""
"Starknet’s operation begins when a transaction is received by a gateway,\n"
"which serves as the Mempool. This stage could also be managed by the\n"
"Sequencer. The transaction is initially marked as \"RECEIVED.\" The\n"
"Sequencer then incorporates the transaction into the network state and\n"
"tags it as \"ACCEPTED_ON_L2.\" The final step involves the Prover, which\n"
"executes the operating system on the new block, calculates its proof,\n"
"and submits it to the Layer 1 (L1) for verification."
msgstr ""

#: src/ch03-00-architecture.md:24
msgid "<img alt=\"Starknet Architecture\" src=\"img/ch03-architecture.png\" class=\"center\" style=\"width: 50%;\" />"
msgstr ""

#: src/ch03-00-architecture.md:26
msgid "<span class=\"caption\">Starknet architecture</span>"
msgstr ""

#: src/ch03-00-architecture.md:28
msgid "In essence, Starknet’s architecture involves multiple components:"
msgstr ""

#: src/ch03-00-architecture.md:30
msgid ""
"- The Sequencer is responsible for receiving transactions, ordering\n"
"  them, and producing blocks. It operates similarly to validators in\n"
"  Ethereum or Bitcoin.\n"
"\n"
"- The Prover is tasked with generating proofs for the created blocks\n"
"  and transactions. It uses Cairo’s Virtual Machine to run provable\n"
"  programs, thereby creating execution traces necessary for generating\n"
"  STARK proofs.\n"
"\n"
"- Layer 1 (L1), in this case Ethereum, hosts a smart contract capable\n"
"  of verifying these STARK proofs. If the proofs are valid, Starknet’s\n"
"  state root on L1 is updated."
msgstr ""

#: src/ch03-00-architecture.md:43
msgid ""
"Starknet’s state is a comprehensive snapshot maintained through Merkle\n"
"trees, much like in Ethereum. This establishes the architecture of the\n"
"validity roll-up and the roles of each component."
msgstr ""

#: src/ch03-00-architecture.md:47
msgid "For a more in-depth look at each component, read on."
msgstr ""

#: src/ch03-00-architecture.md:49
msgid ""
"After exploring the introductory overview of the different components,\n"
"delve deeper into their specific roles by referring to their dedicated\n"
"subchapters in this Chapter."
msgstr ""

#: src/ch03-00-architecture.md:53
msgid "## Sequencers"
msgstr ""

#: src/ch03-00-architecture.md:55
msgid ""
"Sequencers are the backbone of the Starknet network, akin to Ethereum’s\n"
"validators. They usher transactions into the system."
msgstr ""

#: src/ch03-00-architecture.md:58
msgid ""
"Validity rollups excel at offloading some network chores, like bundling\n"
"and processing transactions, to specialized players. This setup is\n"
"somewhat like how Ethereum and Bitcoin delegate security to miners.\n"
"Sequencing, like mining, demands hefty resources."
msgstr ""

#: src/ch03-00-architecture.md:63
msgid ""
"For networks like Starknet and other platforms utilizing Validity\n"
"rollups, a similar parallel is drawn. These networks outsource\n"
"transaction processing to specialized entities and then verify their\n"
"work. These specialized entities in the context of Validity rollups are\n"
"known as \"Sequencers.\""
msgstr ""

#: src/ch03-00-architecture.md:69
msgid ""
"Instead of providing security, as miners do, Sequencers provide\n"
"transaction capacity. They order (sequence) multiple transactions into a\n"
"single batch, executes them, and produce a block that will later be\n"
"proved by the Prover and submmited to the Layer 1 network as a single,\n"
"compact proof, known as a \"rollup.\" In other words, just as validators\n"
"in Ethereum and miners in Bitcoin are specialized actors securing the\n"
"network, Sequencers in Validity rollup-based networks are specialized\n"
"actors that provide transaction capacity."
msgstr ""

#: src/ch03-00-architecture.md:78
msgid ""
"This mechanism allows Validity (or ZK) rollups to handle a higher volume\n"
"of transactions while maintaining the security of the underlying\n"
"Ethereum network. It enhances scalability without compromising on\n"
"security."
msgstr ""

#: src/ch03-00-architecture.md:83
msgid "Sequencers follow a systematic method for transaction processing:"
msgstr ""

#: src/ch03-00-architecture.md:85
msgid ""
"1.  Sequencing: They collect transactions from users and order\n"
"    (sequence) them.\n"
"\n"
"2.  Executing: Sequencers then process these transactions.\n"
"\n"
"3.  Batching: Transactions are grouped together in batches or blocks for\n"
"    efficiency.\n"
"\n"
"4.  Block Production: Sequencers produce blocks that contain batches of\n"
"    processed transactions."
msgstr ""

#: src/ch03-00-architecture.md:96
msgid ""
"Sequencers must be reliable and highly available, as their role is\n"
"critical to the network’s smooth functioning. They need powerful and\n"
"well-connected machines to perform their role effectively, as they must\n"
"process transactions rapidly and continuously."
msgstr ""

#: src/ch03-00-architecture.md:101
msgid ""
"The current roadmap for Starknet includes decentralizing the Sequencer\n"
"role. This shift towards decentralization will allow more participants\n"
"to become Sequencers, contributing to the robustness of the network."
msgstr ""

#: src/ch03-00-architecture.md:105
msgid ""
"For more details in the Sequencer role, refer to the dedicated\n"
"subchapter in this Chapter."
msgstr ""

#: src/ch03-00-architecture.md:108
msgid "## Provers"
msgstr ""

#: src/ch03-00-architecture.md:110
msgid ""
"Provers serve as the second line of verification in the Starknet\n"
"network. Their main task is to validate the work of the Sequencers (when\n"
"they receive the block produced by the Sequencer) and to generate proofs\n"
"that these processes were correctly performed."
msgstr ""

#: src/ch03-00-architecture.md:115
msgid "The duties of a Prover include:"
msgstr ""

#: src/ch03-00-architecture.md:117
msgid ""
"1.  Receiving Blocks: Provers obtain blocks of processed transactions\n"
"    from Sequencers.\n"
"\n"
"2.  Processing: Provers process these blocks a second time, ensuring\n"
"    that all transactions within the block have been correctly handled.\n"
"\n"
"3.  Proof Generation: After processing, Provers generate a proof of\n"
"    correct transaction processing.\n"
"\n"
"4.  Sending Proof to Ethereum: Finally, the proof is sent to the\n"
"    Ethereum network for validation. If the proof is correct, the\n"
"    Ethereum network accepts the block of transactions."
msgstr ""

#: src/ch03-00-architecture.md:130
msgid ""
"Provers need even more computational power than Sequencers because they\n"
"have to calculate and generate proofs, a process that is computationally\n"
"heavy. However, the work of Provers can be split into multiple parts,\n"
"allowing for parallelism and efficient proof generation. The proof\n"
"generation process is asynchronous, meaning it doesn’t have to occur\n"
"immediately or in real-time. This flexibility allows for the workload to\n"
"be distributed among multiple Provers. Each Prover can work on a\n"
"different block, allowing for parallelism and efficient proof\n"
"generation."
msgstr ""

#: src/ch03-00-architecture.md:140
msgid ""
"The design of Starknet relies on these two types of actors — Sequencers\n"
"and Provers — working in tandem to ensure efficient processing and\n"
"secure verification of transactions."
msgstr ""

#: src/ch03-00-architecture.md:144
msgid ""
"For more details in the Prover role, refer to the dedicated subchapter\n"
"in this Chapter."
msgstr ""

#: src/ch03-00-architecture.md:147
msgid "## Optimizing Sequencers and Provers: Debunking Common Misconceptions"
msgstr ""

#: src/ch03-00-architecture.md:149
msgid ""
"The relationship between Sequencers and Provers in blockchain technology\n"
"often sparks debate. A common misunderstanding suggests that either the\n"
"Prover or the Sequencer is the main bottleneck. To set the record\n"
"straight, let’s discuss the optimization of both components."
msgstr ""

#: src/ch03-00-architecture.md:154
msgid ""
"Starknet, utilizing the Cairo programming language, currently supports\n"
"only sequential transactions. Plans are in place to introduce parallel\n"
"transactions in the future. However, as of now, the Sequencer operates\n"
"one transaction at a time, making it the bottleneck in the system."
msgstr ""

#: src/ch03-00-architecture.md:159
msgid ""
"In contrast, Provers operate asynchronously and can execute multiple\n"
"tasks in parallel. The use of proof recursion allows for task\n"
"distribution across multiple machines, making scalability less of an\n"
"issue for Provers."
msgstr ""

#: src/ch03-00-architecture.md:164
msgid ""
"Given the asynchronous and scalable nature of Provers, focus in Starknet\n"
"has shifted to enhancing the Sequencer’s efficiency. This explains why\n"
"current development efforts are primarily aimed at the sequencing side\n"
"of the equation."
msgstr ""

#: src/ch03-00-architecture.md:169
msgid "## Nodes"
msgstr ""

#: src/ch03-00-architecture.md:171
msgid ""
"When it comes to defining what nodes do in Bitcoin or Ethereum, people\n"
"often misinterpret their role as keeping track of every transaction\n"
"within the network. This, however, is not entirely accurate."
msgstr ""

#: src/ch03-00-architecture.md:175
msgid ""
"Nodes serve as auditors of the network, maintaining the state of the\n"
"network, such as how much Bitcoin each participant owns or the current\n"
"state of a specific smart contract. They accomplish this by processing\n"
"transactions and preserving a record of all transactions, but that’s a\n"
"means to an end, not the end itself."
msgstr ""

#: src/ch03-00-architecture.md:181
msgid ""
"In Validity rollups and specifically within Starknet, this concept is\n"
"somewhat reversed. Nodes don’t necessarily have to process transactions\n"
"to get the state. In contrast to Ethereum or Bitcoin, Starknet nodes\n"
"aren’t required to process all transactions to maintain the state of the\n"
"network."
msgstr ""

#: src/ch03-00-architecture.md:187
msgid ""
"There are two main ways to access network state data: via an API gateway\n"
"or using the RPC protocol to communicate with a node. Operating your own\n"
"node is typically faster than using a shared architecture, like the\n"
"gateway. Over time, Starknet plans to deprecate APIs and replace them\n"
"with a JSON RPC standard, making it even more beneficial to operate your\n"
"own node."
msgstr ""

#: src/ch03-00-architecture.md:194
msgid ""
"It’s worth noting that encouraging more people to run nodes increases\n"
"the resilience of the network and prevents server flooding, which has\n"
"been an issue in networks in other L2s."
msgstr ""

#: src/ch03-00-architecture.md:198
msgid ""
"Currently, there are primarily three methods for a node to keep track of\n"
"the network’s state and we can have nodes implement any of these\n"
"methods:"
msgstr ""

#: src/ch03-00-architecture.md:202
msgid ""
"1.  **Replaying Old Transactions**: Like Ethereum or Bitcoin, a node can\n"
"    take all the transactions and re-execute them. Although this\n"
"    approach is accurate, it isn’t scalable unless you have a powerful\n"
"    machine that’s capable of handling the load. If you can replay all\n"
"    transactions, you can become a Sequencer.\n"
"\n"
"2.  **Relying on L2 Consensus**: Nodes can trust the Sequencer(s) to\n"
"    execute the network correctly. When the Sequencer updates the state\n"
"    and adds a new block, nodes accept the update as accurate.\n"
"\n"
"3.  **Checking Proof Validation on L1**: Nodes can monitor the state of\n"
"    the network by observing L1 and ensuring that every time a proof is\n"
"    sent, they receive the updated state. This way, they don’t have to\n"
"    trust anyone and only need to keep track of the latest valid\n"
"    transaction for Starknet."
msgstr ""

#: src/ch03-00-architecture.md:218
msgid ""
"Each type of node setup comes with its own set of hardware requirements\n"
"and trust assumptions."
msgstr ""

#: src/ch03-00-architecture.md:221
msgid "### Nodes That Replay Transactions"
msgstr ""

#: src/ch03-00-architecture.md:223
msgid ""
"Nodes that replay transactions require powerful machines to track and\n"
"execute all transactions. These nodes don’t have trust assumptions; they\n"
"rely solely on the transactions they execute, guaranteeing that the\n"
"state at any given point is valid."
msgstr ""

#: src/ch03-00-architecture.md:228
msgid "### Nodes That Rely on L2 Consensus"
msgstr ""

#: src/ch03-00-architecture.md:230
msgid ""
"Nodes relying on L2 consensus require less computational power. They\n"
"need sufficient storage to keep the state but don’t need to process a\n"
"lot of transactions. The trade-off here is a trust assumption.\n"
"Currently, Starknet revolves around one Sequencer, so these nodes are\n"
"trusting Starkware not to disrupt the network. However, once a consensus\n"
"mechanism and leader election amongst Sequencers are in place, these\n"
"nodes will only need to trust that a Sequencer who staked their stake to\n"
"produce a block is not willing to lose it."
msgstr ""

#: src/ch03-00-architecture.md:239
msgid "### Nodes That Check Proof Validation on L1"
msgstr ""

#: src/ch03-00-architecture.md:241
msgid ""
"Nodes that only update their state based on proof validation on L1\n"
"require the least hardware. They have the same requirements as an\n"
"Ethereum node, and once Ethereum light nodes become a reality,\n"
"maintaining such a node could be as simple as using a smartphone. The\n"
"only trade-off is latency. Proofs are not sent to Ethereum every block\n"
"but intermittently, resulting in delayed state updates. Plans are in\n"
"place to produce proofs more frequently, even if they are not sent to\n"
"Ethereum immediately, allowing these nodes to reduce their latency.\n"
"However, this development is still a way off in the Starknet roadmap."
msgstr ""

#: src/ch03-00-architecture.md:253
msgid ""
"Through this chapter, we delve into Starknet’s structure, uncovering the\n"
"importance of Sequencers, Provers, and nodes. Each plays a unique role,\n"
"but together, they create a highly scalable, efficient, and secure\n"
"network that marks a significant step forward in Layer 2 solutions. As\n"
"Starknet evolves towards decentralization, understanding these roles\n"
"will provide valuable insight into the inner workings of this network."
msgstr ""

#: src/ch03-00-architecture.md:260
msgid ""
"As we venture further into the Starknet universe, our next stop will be\n"
"an exploration of the transaction lifecycle before we dive into the\n"
"heart of coding with Cairo."
msgstr ""

#: src/ch03-01-transactions.md:1
msgid "# Transactions"
msgstr ""

#: src/ch03-01-transactions.md:3
msgid ""
"The journey of a Starknet transaction, from its beginning to its conclusion, involves specific steps. Each phase ensures the accurate transmission, processing, and storage "
"of data within the network. This chapter discusses the Starknet transaction's path."
msgstr ""

#: src/ch03-01-transactions.md:5
#, fuzzy
msgid "## Transaction Creation"
msgstr "## Seguimiento de Transacciones"

#: src/ch03-01-transactions.md:7
msgid "A transaction starts with its preparation. The sender:"
msgstr ""

#: src/ch03-01-transactions.md:9
msgid ""
"1. Queries their account nonce, which acts as a unique identifier for the transaction.\n"
"2. Signs the transaction.\n"
"3. Sends it to their Node."
msgstr ""

#: src/ch03-01-transactions.md:13
msgid ""
"The Node, analogous to a post office, receives the transaction and broadcasts it on the Starknet network, primarily to the Sequencer. As the network evolves, the transaction "
"will be broadcasted to multiple Sequencers."
msgstr ""

#: src/ch03-01-transactions.md:15
msgid ""
"It is worth mentioning that before broadcasting the transaction to the Sequencer, the gateways perform some validations, such as checking that the max fee exceeds a minimum "
"fee and the account's balance is greater than the max fee. The transaction will be saved in the storage if the validation function passes."
msgstr ""

#: src/ch03-01-transactions.md:17
#, fuzzy
msgid "## The Sequencer's Role"
msgstr "Secuenciadores"

#: src/ch03-01-transactions.md:19
msgid "On receiving the transaction, the Sequencer acknowledges its receipt but hasn't processed it yet—similar to Ethereum's mempool state."
msgstr ""

#: src/ch03-01-transactions.md:21
#, fuzzy
msgid "Sequencer's Process:"
msgstr "Secuenciadores"

#: src/ch03-01-transactions.md:23
msgid ""
"1. Receive the transaction.\n"
"2. Validate it.\n"
"3. Execute it.\n"
"4. Update the state."
msgstr ""

#: src/ch03-01-transactions.md:28
msgid ""
"Remember, Starknet processes transactions sequentially. The nonce won't change until the Sequencer processes the transaction. This can complicate backend application "
"development, potentially causing errors if sending multiple transactions consecutively."
msgstr ""

#: src/ch03-01-transactions.md:30
msgid "## Acceptance on Layer-2 (L2)"
msgstr ""

#: src/ch03-01-transactions.md:32
msgid ""
"Once the Sequencer validates and executes a transaction, it updates the state without waiting for block creation. The transaction status changes from 'received' to 'accepted "
"on L2' at this stage."
msgstr ""

#: src/ch03-01-transactions.md:34
msgid ""
"Following the state update, the transaction is included in a block. However, the block isn't emitted immediately. The Sequencer decides the opportune moment to emit the "
"block, either when there are enough transactions to form a block or after a certain time has passed. When the block is emitted, the block becomes available for other Nodes "
"to query."
msgstr ""

#: src/ch03-01-transactions.md:36 src/ch03-01-transactions.md:48
msgid "Transaction Status Transition:"
msgstr ""

#: src/ch03-01-transactions.md:38
msgid "1. Received -> Accepted on L2"
msgstr ""

#: src/ch03-01-transactions.md:40
msgid "If a transaction fails during execution, it will be included in the block with the status 'reverted'."
msgstr ""

#: src/ch03-01-transactions.md:42
msgid ""
"It's essential to remember that at this stage, no proof has been generated, and the transaction relies on L2 consensus for security against censorship. There remains a slim "
"possibility of transaction reversal if all Sequencers collude. Therefore, these stages should be seen as different layers of transaction finality."
msgstr ""

#: src/ch03-01-transactions.md:44
msgid "## Acceptance on Layer-1 (L1)"
msgstr ""

#: src/ch03-01-transactions.md:46
msgid ""
"The final step in the transaction's lifecycle is its acceptance on Layer-1 (L1). A Prover receives the block containing the transaction, re-executes the block, generates a "
"proof, and sends it to Ethereum. Specifically, the proof is sent to a smart contract on Ethereum called the Verifier smart contract, which checks the proof's validity. If "
"valid, the transaction's status changes to 'accepted on L1', signifying the transaction's security by Ethereum consensus."
msgstr ""

#: src/ch03-01-transactions.md:50
msgid "1. Accepted on L2 -> Accepted on L1"
msgstr ""

#: src/ch03-01-transactions.md:52
msgid "## [Optional] Transaction Finality in Starknet"
msgstr ""

#: src/ch03-01-transactions.md:54
msgid ""
"Transaction finality refers to the point at which a transaction is considered irreversible and is no longer susceptible to being reversed or undone. It's the assurance that "
"once a transaction is committed, it can't be altered or rolled back, hence securing the integrity of the transaction and the system as a whole."
msgstr ""

#: src/ch03-01-transactions.md:56
msgid "Let's dive into the transaction finality in both Starknet and Ethereum, and how they compare."
msgstr ""

#: src/ch03-01-transactions.md:58
msgid "### Ethereum Transaction Finality"
msgstr ""

#: src/ch03-01-transactions.md:60
msgid ""
"Ethereum operates on a Proof of Stake (PoS) consensus mechanism. A transaction has the finality status when it is part of a block that can't change without a significant "
"amount of ETH getting burned. The number of blocks required to ensure that a transaction won't be rolled back is called 'blocks to finality', and the time to create those "
"blocks is called 'time to finality'."
msgstr ""

#: src/ch03-01-transactions.md:62
msgid ""
"It is considered to be an average of 6 blocks to reach the finality status; given that a new block is validated each 12 seconds, the average time to finality for a "
"transaction is 75 seconds."
msgstr ""

#: src/ch03-01-transactions.md:64
msgid "### Starknet Transaction Finality"
msgstr ""

#: src/ch03-01-transactions.md:66
msgid ""
"Starknet, a Layer-2 (L2) solution on Ethereum, has a two-step transaction finality process. The first step is when the transaction gets accepted on Layer-2 (Starknet), and "
"the second step is when the transaction gets accepted on Layer-1 (Ethereum)."
msgstr ""

#: src/ch03-01-transactions.md:68
msgid ""
"Accepted on L2: When a transaction is processed by the Sequencer and included in a block on Starknet, it reaches L2 finality. However, this finality relies on the L2 "
"consensus and comes with a slight risk of collusion among Sequencers leading to transaction reversal.\n"
"Accepted on L1: The absolute finality comes when the block containing the transaction gets a proof generated, the proof is validated by the Verifier contract on Ethereum, "
"and the state is updated on Ethereum. At this point, the transaction is as secure as the Ethereum's PoW consensus can provide, meaning it becomes computationally infeasible "
"to alter or reverse."
msgstr ""

#: src/ch03-01-transactions.md:71
msgid "### Comparison"
msgstr ""

#: src/ch03-01-transactions.md:73
msgid "The main difference between Ethereum and Starknet's transaction finality lies in the stages of finality and their reliance on consensus mechanisms."
msgstr ""

#: src/ch03-01-transactions.md:75
msgid ""
"Ethereum's transaction finality becomes increasingly unlikely to be reversed as more blocks are added.\n"
"Starknet's finality process is two-fold. The initial finality (L2) is quicker but relies on L2 consensus and carries a small risk of collusion. The ultimate finality (L1) is "
"slower, as it involves generation and validation of proofs and updates on Ethereum. However, once reached, it provides the same level of security as an Ethereum transaction."
msgstr ""

#: src/ch03-01-transactions.md:78
#, fuzzy
msgid "## Handling of Rejected Transactions"
msgstr "## Seguimiento de Transacciones"

#: src/ch03-01-transactions.md:80
msgid "In rare scenarios, a transaction can be rejected by the Sequencer if it's found to be invalid or erroneous, even if the gateways already validate it."
msgstr ""

#: src/ch03-01-transactions.md:82 src/ch03-01-transactions.md:92
#, fuzzy
msgid "Transaction Status Transition"
msgstr "## Seguimiento de Transacciones"

#: src/ch03-01-transactions.md:84
msgid "1. Received -> Rejected (if invalid or erroneous)"
msgstr ""

#: src/ch03-01-transactions.md:86
#, fuzzy
msgid "## Handling of Reverted Transactions"
msgstr "## Seguimiento de Transacciones"

#: src/ch03-01-transactions.md:88
msgid "A transaction can be reverted due to failed execution, the transaction will still be included in a block, and the account will be charged for the resources consumed."
msgstr ""

#: src/ch03-01-transactions.md:90
msgid ""
"This adds a trust assumption for the Sequencer to be honest and non-censoring. In later versions, there will be an OS change that will enable the Sequencer to prove that a "
"transaction failed and charge the correct amount of gas for it, thus making it censorship-resistant with provably failed transactions."
msgstr ""

#: src/ch03-01-transactions.md:94
msgid "1. Received -> Reverted"
msgstr ""

#: src/ch03-01-transactions.md:96
msgid "## Transaction Lifecycle Summary"
msgstr ""

#: src/ch03-01-transactions.md:98
msgid "The following outlines the various steps in a transaction's lifecycle:"
msgstr ""

#: src/ch03-01-transactions.md:100
#, fuzzy
msgid "<img alt=\"Transaction flow\" src=\"img/ch03-transaction_flow.png\" class=\"center\" style=\"width: 50%;\" />"
msgstr "<img alt=\"Starknet-js in your dapp\" src=\"img/ch02-starknet-js.png\" class=\"center\" style=\"width: 50%;\" />"

#: src/ch03-01-transactions.md:104
msgid ""
"The lifecycle of a Starknet transaction is a carefully curated journey, ensuring efficient, secure, and transparent transaction processing. It incorporates everything from "
"transaction creation, Sequencer processing, Layer-2 and Layer-1 validation, to handling rejected and reverted transactions. By comprehending this lifecycle, developers and "
"users can better navigate the Starknet ecosystem and leverage its capabilities to the fullest."
msgstr ""

#: src/ch03-01-01-fee-mechanism.md:1
msgid "# Fee Mechanism"
msgstr ""

#: src/ch03-01-01-fee-mechanism.md:3
msgid "**NOTE: This section is a work in progress. Contributions are welcome.**"
msgstr ""

#: src/ch03-01-01-fee-mechanism.md:5
msgid "Implementing a fee system enhances Starknet's performance. Without fees, the system risks becoming overwhelmed by numerous transactions, even with optimizations."
msgstr ""

#: src/ch03-01-01-fee-mechanism.md:7
msgid "## Fee Collection"
msgstr ""

#: src/ch03-01-01-fee-mechanism.md:9
msgid ""
"When a transaction occurs on Layer 2 (L2), Starknet collects the corresponding fee using ERC-20 tokens. The transaction submitter pays the fee, and the sequencer receives it."
msgstr ""

#: src/ch03-01-01-fee-mechanism.md:11
#, fuzzy
msgid "## Fee Calculation"
msgstr "# Instalación"

#: src/ch03-01-01-fee-mechanism.md:13
msgid "### Fee Measurement"
msgstr ""

#: src/ch03-01-01-fee-mechanism.md:15
msgid "Currently, fees are denominated in ETH. To determine the expected fee, multiply the transaction's gas estimate by the gas price:"
msgstr ""

#: src/ch03-01-01-fee-mechanism.md:17
msgid ""
"```\n"
"expected_fee = gas_estimate * gas_price;\n"
"```"
msgstr ""

#: src/ch03-01-01-fee-mechanism.md:21
#, fuzzy
msgid "### Fee Computation"
msgstr "### Componente de Balance"

#: src/ch03-01-01-fee-mechanism.md:23
msgid "To grasp fee computation, understand these terms:"
msgstr ""

#: src/ch03-01-01-fee-mechanism.md:25
msgid ""
"- **Built-In**: These are predefined operations in your code, simplifying common tasks or calculations. The following are built-ins:\n"
"\n"
"  - **Cairo Steps**: These building blocks in Cairo facilitate various program operations. Essential for running smart contracts and apps on blockchain platforms, the steps "
"used influence a program's cost and efficiency.\n"
"  - **Pedersen Hashes**: A method to convert data into a distinct code, similar to a data fingerprint, ensuring data integrity on blockchains.\n"
"  - **Range Checks**: Safety measures in programs, ensuring numbers or values stay within designated limits to avoid errors.\n"
"  - **Signature Verifications**: These confirm that a digital signature matches the anticipated one, verifying the sender's authenticity.\n"
"\n"
"- **Weight**: Indicates the significance or cost of an operation, showing how resource-intensive an action is in the program."
msgstr ""

#: src/ch03-01-01-fee-mechanism.md:34
#, fuzzy
msgid "### Computation"
msgstr "## Proceso de Compilación"

#: src/ch03-01-01-fee-mechanism.md:36
msgid "In Cairo, each execution trace is divided into distinct slots dedicated to specific built-in components, influencing fee calculation."
msgstr ""

#: src/ch03-01-01-fee-mechanism.md:38
msgid "Consider a trace containing the following component limits:"
msgstr ""

#: src/ch03-01-01-fee-mechanism.md:40
msgid ""
"| Component               | Limit       |\n"
"| ----------------------- | ----------- |\n"
"| Cairo Steps             | 200,000,000 |\n"
"| Pedersen Hashes         | 5,000,000   |\n"
"| Signature Verifications | 1,000,000   |\n"
"| Range Checks            | 2,500,000   |"
msgstr ""

#: src/ch03-01-01-fee-mechanism.md:47
msgid "When a component reaches its maximum, the proof is sent to Layer 1. It's imperative to set these component divisions beforehand as they cannot be adjusted dynamically."
msgstr ""

#: src/ch03-01-01-fee-mechanism.md:49
msgid ""
"Assuming a transaction utilizes 10,000 Cairo steps and 500 Pedersen hashes, it could accommodate 40,000 such transactions in this trace (given the calculation "
"20,000,000/500). The gas price becomes 1/40,000 of the proof submission cost. In this instance, the number of Cairo steps isn't the constraining factor, so it isn't factored "
"into our performance estimate."
msgstr ""

#: src/ch03-01-01-fee-mechanism.md:51
msgid "Typically, the sequencer determines a vector, `CairoResourceUsage`, for every transaction. This vector accounts for:"
msgstr ""

#: src/ch03-01-01-fee-mechanism.md:53
msgid ""
"1. The count of Cairo steps.\n"
"2. The application count of each Cairo built-in (like range checks and Pedersen hashes)."
msgstr ""

#: src/ch03-01-01-fee-mechanism.md:56
msgid "The sequencer then pairs this data with the `CairoResourceFeeWeights` vector, dictating the gas cost of each proof component."
msgstr ""

#: src/ch03-01-01-fee-mechanism.md:60
msgid ""
"> If a proof with 20,000,000 Pedersen hashes costs 5 million gas, then the Pedersen built-in has a weight of 0.25 gas per use (calculated as 5,000,000/20,000,000). "
"Sequencers set these weight values based on proof parameters."
msgstr ""

#: src/ch03-01-01-fee-mechanism.md:62
msgid "The fee is determined by the most restrictive component and is calculated as:"
msgstr ""

#: src/ch03-01-01-fee-mechanism.md:64
msgid ""
"```\n"
"maxk[CairoResourceUsagek * CairoResourceFeeWeightsk]\n"
"```"
msgstr ""

#: src/ch03-01-01-fee-mechanism.md:68
msgid "Where \"k\" denotes the Cairo resource elements, encompassing step numbers and built-ins. The weightings for these components are:"
msgstr ""

#: src/ch03-01-01-fee-mechanism.md:70
msgid ""
"| Component   | Gas Cost       | Range           |\n"
"| ----------- | -------------- | --------------- |\n"
"| Cairo Step  | 0.01 gwei/gas  | per step        |\n"
"| Pedersen    | 0.32 gwei/gas  | per application |\n"
"| Poseidon    | 0.32 gwei/gas  | per application |\n"
"| Range Check | 0.16 gwei/gas  | per application |\n"
"| ECDSA       | 20.48 gwei/gas | per application |\n"
"| Keccak      | 20.48 gwei/gas | per application |\n"
"| Bitwise     | 0.64 gwei/gas  | per application |\n"
"| EC_OP       | 10.24 gwei/gas | per application |"
msgstr ""

#: src/ch03-02-sequencers.md:1
msgid "# Sequencers"
msgstr ""

#: src/ch03-02-sequencers.md:3
msgid ""
"Before diving in, make sure to check out the [\"Understanding Starknet:\n"
"Sequencers, Provers, and\n"
"Nodes\"](https://book.starknet.io/chapter_3/topology.html) chapter for a\n"
"quick rundown of Starknet’s architecture."
msgstr ""

#: src/ch03-02-sequencers.md:8
msgid ""
"Three main layers exist in blockchain: data availability, ordering, and\n"
"execution. Sequencers have evolved within this evolving modular\n"
"landscape of blockchain technology. Most L1 blockchains, like Ethereum,\n"
"handle all these tasks. Initially, blockchains served as distributed\n"
"virtual machines focused on organizing and executing transactions. Even\n"
"roll-ups running on Ethereum today often centralize sequencing\n"
"(ordering) and execution while relying on Ethereum for data\n"
"availability. This is the current state of Starknet, which uses Ethereum\n"
"for data availability and a centralized Sequencer for ordering and\n"
"execution. However, it is possible to decentralize sequencing and\n"
"execution, as Starknet is doing."
msgstr ""

#: src/ch03-02-sequencers.md:20
msgid ""
"Each of these layers plays a crucial role in achieving consensus. First,\n"
"the data must be available. Second, it needs to be put in a specific\n"
"order. That’s the main job of a Sequencer, whether run by a single\n"
"computer or a decentralized protocol. Lastly, you execute transactions\n"
"in the order they’ve been sequenced. This final step, done by the\n"
"Sequencer too, determines the system’s current state and keeps all\n"
"connected clients on the same page."
msgstr ""

#: src/ch03-02-sequencers.md:28
msgid "## Introduction to Sequencers"
msgstr ""

#: src/ch03-02-sequencers.md:30
msgid ""
"The advent of Layer Two (L2) solutions like Roll-Ups has altered the\n"
"blockchain landscape, improving scalability and efficiency. But what\n"
"about transaction order? Is it still managed by the base layer (L1), or\n"
"is an external system involved? Enter Sequencers. They ensure\n"
"transactions are in the correct order, regardless of whether they’re\n"
"managed by L1 or another system."
msgstr ""

#: src/ch03-02-sequencers.md:37
msgid ""
"In essence, sequencing has two core tasks: sequencing (ordering) and\n"
"executing (validation). First, it orders transactions, determining the\n"
"canonical sequence of blocks for a given chain fork. It then appends new\n"
"blocks to this sequence. Second, it executes these transactions,\n"
"updating the system’s state based on a given function."
msgstr ""

#: src/ch03-02-sequencers.md:43
msgid ""
"To clarify, we see sequencing as the act of taking a group of unordered\n"
"transactions and producing an ordered block. Sequencers also confirm the\n"
"resulting state of the machine. However, the approach explained here\n"
"separates these tasks. While some systems handle both ordering and state\n"
"validation simultaneously, we advocate for treating them as distinct\n"
"steps."
msgstr ""

#: src/ch03-02-sequencers.md:50
msgid "<img alt=\"Sequencer role in the Starknet network\" src=\"img/ch03-sequencer.png\" class=\"center\" style=\"width: 50%;\" />"
msgstr ""

#: src/ch03-02-sequencers.md:52
msgid "<span class=\"caption\">Sequencer role in the Starknet network</span>"
msgstr ""

#: src/ch03-02-sequencers.md:54
msgid "## Sequencers in Starknet"
msgstr ""

#: src/ch03-02-sequencers.md:56
msgid ""
"Let’s delve into Sequencers by focusing on\n"
"[Madara](https://github.com/keep-starknet-strange/madara) and\n"
"[Kraken](https://github.com/lambdaclass/starknet_stack/tree/main/sequencer),\n"
"two high-performance Starknet Sequencers. A Sequencer must, at least, do\n"
"two things: order and execute transactions."
msgstr ""

#: src/ch03-02-sequencers.md:62
msgid ""
"- **Ordering**: Madara handles the sequencing process, supporting\n"
"  methods from simple FCFS and PGA to complex ones like Narwhall &\n"
"  Bullshark. It also manages the mempool, a critical data structure\n"
"  that holds unconfirmed transactions. Developers can choose the\n"
"  consensus protocol through Madara’s use of Substrate, which offers\n"
"  multiple built-in options.\n"
"\n"
"- **Execution**: Madara lets you choose between two execution crates:\n"
"  [Blockifier](https://github.com/starkware-libs/blockifier/tree/main)\n"
"  and\n"
"  [Starknet_in_Rust](https://github.com/lambdaclass/starknet_in_rust).\n"
"  Both use the [Cairo VM](https://github.com/lambdaclass/cairo-vm) for\n"
"  their framework."
msgstr ""

#: src/ch03-02-sequencers.md:76
msgid "We also have the Kraken Sequencer as another option."
msgstr ""

#: src/ch03-02-sequencers.md:78
msgid ""
"- **Ordering**: It employs Narwhall & Bullshark for mempool\n"
"  management. You can choose from multiple consensus methods, like\n"
"  Bullshark, Tendermint, or Hotstuff.\n"
"\n"
"- **Execution**: Runs on Starknet_in_Rust. Execution can be deferred\n"
"  to either [Cairo\n"
"  Native](https://github.com/lambdaclass/cairo_native) or [Cairo\n"
"  VM](https://github.com/lambdaclass/cairo-vm)."
msgstr ""

#: src/ch03-02-sequencers.md:87
msgid ""
"<table style=\"width:100%;\">\n"
"<colgroup>\n"
"<col style=\"width: 42%\" />\n"
"<col style=\"width: 28%\" />\n"
"<col style=\"width: 28%\" />\n"
"</colgroup>\n"
"<thead>\n"
"<tr class=\"header\">\n"
"<th style=\"text-align: left;\">Feature</th>\n"
"<th style=\"text-align: left;\"><a\n"
"href=\"https://github.com/keep-starknet-strange/madara\">Madara</a></th>\n"
"<th style=\"text-align: left;\"><a\n"
"href=\"https://github.com/lambdaclass/starknet_stack/tree/main/sequencer\">Kraken</a></th>\n"
"</tr>\n"
"</thead>\n"
"<tbody>\n"
"<tr class=\"odd\">\n"
"<td style=\"text-align: left;\"><p><strong>Ordering\n"
"Method</strong></p></td>\n"
"<td style=\"text-align: left;\"><p>FCFS, PGA, Narwhall &amp;\n"
"Bullshark</p></td>\n"
"<td style=\"text-align: left;\"><p>Narwhall &amp; Bullshark</p></td>\n"
"</tr>\n"
"<tr class=\"even\">\n"
"<td style=\"text-align: left;\"><p><strong>Mempool\n"
"Management</strong></p></td>\n"
"<td style=\"text-align: left;\"><p>Managed by Madara</p></td>\n"
"<td style=\"text-align: left;\"><p>Managed using Narwhall &amp;\n"
"Bullshark</p></td>\n"
"</tr>\n"
"<tr class=\"odd\">\n"
"<td style=\"text-align: left;\"><p><strong>Consensus\n"
"Options</strong></p></td>\n"
"<td style=\"text-align: left;\"><p>Developer’s choice through\n"
"Substrate</p></td>\n"
"<td style=\"text-align: left;\"><p>Bullshark, Tendermint or\n"
"Hotstuff</p></td>\n"
"</tr>\n"
"<tr class=\"even\">\n"
"<td style=\"text-align: left;\"><p><strong>Execution\n"
"Crates</strong></p></td>\n"
"<td style=\"text-align: left;\"><p><a\n"
"href=\"https://github.com/starkware-libs/blockifier/tree/main\">Blockifier</a>,\n"
"Starknet_in_rust</p></td>\n"
"<td style=\"text-align: left;\"><p>Starknet_in_rust</p></td>\n"
"</tr>\n"
"<tr class=\"odd\">\n"
"<td style=\"text-align: left;\"><p><strong>Execution\n"
"Framework</strong></p></td>\n"
"<td style=\"text-align: left;\"><p><a\n"
"href=\"https://github.com/lambdaclass/cairo-vm\">Cairo VM</a></p></td>\n"
"<td style=\"text-align: left;\"><p><a\n"
"href=\"https://github.com/lambdaclass/cairo_native\">Cairo Native</a> or\n"
"<a href=\"https://github.com/lambdaclass/cairo-vm\">Cairo VM</a></p></td>\n"
"</tr>\n"
"</tbody>\n"
"</table>"
msgstr ""

#: src/ch03-02-sequencers.md:145
msgid "### Understanding the Execution Layer"
msgstr ""

#: src/ch03-02-sequencers.md:147
msgid ""
"- [Blockifier](https://github.com/starkware-libs/blockifier/tree/main),\n"
"  a Rust component in Starknet Sequencers, generates state diffs and\n"
"  blocks. It uses [Cairo VM](https://github.com/lambdaclass/cairo-vm).\n"
"  Its goal is to become a full Starknet Sequencer.\n"
"\n"
"- Starknet_in_Rust is another Rust component for Starknet that also\n"
"  generates state diffs and blocks. It uses [Cairo\n"
"  VM](https://github.com/lambdaclass/cairo-vm).\n"
"\n"
"- [Cairo Native](https://github.com/lambdaclass/cairo_native) stands\n"
"  out by converting Cairo’s Sierra code to MLIR. See an example\n"
"  [here](https://github.com/lambdaclass/cairo_native/blob/main/examples/erc20.rs)."
msgstr ""

#: src/ch03-02-sequencers.md:160
msgid "## The Need for Decentralized Sequencers"
msgstr ""

#: src/ch03-02-sequencers.md:162
msgid ""
"For more details on the Decentralization of Starknet, refer to the\n"
"dedicated subchapter in this Chapter."
msgstr ""

#: src/ch03-02-sequencers.md:165
msgid ""
"Proving transactions doesn’t required to be decentralized (although in\n"
"the near future Starknet will operate with decentralized provers). Once\n"
"the order is set, anyone can submit a proof; it’s either correct or not.\n"
"However, the process that determines this order should be decentralized\n"
"to maintain a blockchain’s original qualities."
msgstr ""

#: src/ch03-02-sequencers.md:171
msgid ""
"In the context of Ethereum’s Layer 1 (L1), Sequencers can be likened to\n"
"Ethereum validators. They are responsible for creating and broadcasting\n"
"blocks. This role is divided under the concept of \"Proposer-Builder\n"
"Separation\" (PBS) ([Hasu,\n"
"2023](https://www.youtube.com/watch?v=6xS0xMzh9Tc)). Block builders form\n"
"blocks (order the transactions), while block proposers, unaware of the\n"
"block’s content, choose the most profitable one. This separation\n"
"prevents transaction censorship at the protocol level. Currently, most\n"
"Layer 2 (L2) Sequencers, including Starknet, perform both roles, which\n"
"can create issues."
msgstr ""

#: src/ch03-02-sequencers.md:182
msgid ""
"The drive toward centralized Sequencers mainly stems from performance\n"
"issues like high costs and poor user experience on Ethereum for both\n"
"data storage and transaction ordering. The challenge is scalability: how\n"
"to expand without sacrificing decentralization. Opting for\n"
"centralization risks turning the blockchain monopolistic, negating its\n"
"unique advantages like network-effect services without monopoly."
msgstr ""

#: src/ch03-02-sequencers.md:189
msgid ""
"With centralization, blockchain loses its core principles: credible\n"
"neutrality and resistance to monopolization. What’s wrong with a\n"
"centralized system? It raises the risks of censorship (via transaction\n"
"reordering)."
msgstr ""

#: src/ch03-02-sequencers.md:194
msgid "A centralized validity roll-up looks like this:"
msgstr ""

#: src/ch03-02-sequencers.md:196
msgid ""
"- User Interaction & Selection: Users send transactions to a\n"
"  centralized Sequencer, which selects and orders them.\n"
"\n"
"- Block Formation: The Sequencer packages these ordered transactions\n"
"  into a block.\n"
"\n"
"- Proof & Verification: The block is sent to a proving service, which\n"
"  generates a proof and posts it to Layer 1 (L1) for verification.\n"
"\n"
"- Verification: Once verified on L1, the transactions are considered\n"
"  finalized and integrated into the L1 blockchain."
msgstr ""

#: src/ch03-02-sequencers.md:208
msgid "<img alt=\"Centralized rollup\" src=\"img/ch03-centralized-rollup.png\" class=\"center\" style=\"width: 50%;\" />"
msgstr ""

#: src/ch03-02-sequencers.md:210
msgid "<span class=\"caption\">Centralized rollup</span>"
msgstr ""

#: src/ch03-02-sequencers.md:212
msgid ""
"While centralized roll-ups can provide L1 security, they come with a\n"
"significant downside: the risk of censorship. Hence, the push for\n"
"decentralization in roll-ups."
msgstr ""

#: src/ch03-02-sequencers.md:218
msgid ""
"This chapter has dissected the role of Sequencers in the complex\n"
"ecosystem of blockchain technology, focusing on Starknet’s current state\n"
"and future directions. Sequencers essentially serve two main functions:\n"
"ordering transactions and executing them. While these tasks may seem\n"
"straightforward, they are pivotal in achieving network consensus and\n"
"ensuring security."
msgstr ""

#: src/ch03-02-sequencers.md:225
msgid ""
"Given the evolving modular architecture of blockchain—with distinct\n"
"layers for data availability, transaction ordering, and\n"
"execution—Sequencers provide a crucial link. Their role gains more\n"
"significance in the context of Layer 2 solutions, where achieving\n"
"scalability without sacrificing decentralization is a pressing concern."
msgstr ""

#: src/ch03-02-sequencers.md:231
msgid ""
"In Starknet, Sequencers like Madara and Kraken demonstrate the potential\n"
"of high-performance, customizable solutions. These Sequencers allow for\n"
"a range of ordering methods and execution frameworks, proving that\n"
"there’s room for innovation even within seemingly rigid structures."
msgstr ""

#: src/ch03-02-sequencers.md:236
msgid ""
"The discussion on \"Proposer-Builder Separation\" (PBS) highlights the\n"
"need for role specialization to maintain a system’s integrity and thwart\n"
"transaction censorship. This becomes especially crucial when we\n"
"recognize that the current model of many L2 Sequencers, Starknet\n"
"included, performs both proposing and building, potentially exposing the\n"
"network to vulnerabilities."
msgstr ""

#: src/ch03-02-sequencers.md:243
msgid ""
"To reiterate, Sequencers aren’t just a mechanism for transaction\n"
"ordering and execution; they are a linchpin in blockchain’s\n"
"decentralized ethos. Whether centralized or decentralized, Sequencers\n"
"must strike a delicate balance between scalability, efficiency, and the\n"
"overarching principle of decentralization."
msgstr ""

#: src/ch03-02-sequencers.md:249
msgid ""
"As blockchain technology continues to mature, it’s worth keeping an eye\n"
"on how the role of Sequencers evolves. They hold the potential to either\n"
"strengthen or weaken the unique advantages that make blockchain\n"
"technology so revolutionary."
msgstr ""

#: src/ch03-03-provers.md:1
msgid "# Provers"
msgstr ""

#: src/ch03-03-provers.md:3
msgid ""
"SHARP is like public transportation for proofs on Starknet, aggregating\n"
"multiple Cairo programs to save costs and boost efficiency. It uses\n"
"recursive proofs, allowing parallelization and optimization, making it\n"
"more affordable for all users. Critical services like the gateway,\n"
"validator, and Prover work together with a stateless design for\n"
"flexibility. SHARP’s adoption by StarkEx, Starknet, and external users\n"
"(through the Cairo Playground) highlights its significance and potential\n"
"for future optimization."
msgstr ""

#: src/ch03-03-provers.md:12
msgid ""
"This chapter will discuss SHARP, how it has evolved to incorporate\n"
"recursive proofs, and its role in reducing costs and improving\n"
"efficiency within the Starknet network."
msgstr ""

#: src/ch03-03-provers.md:16
msgid "## What is SHARP?"
msgstr ""

#: src/ch03-03-provers.md:18
msgid ""
"SHARP, which stands for \"Shared Prover\", is a mechanism used in Starknet\n"
"that aggregates multiple Cairo programs from different users, each\n"
"containing different logic. These Cairo programs are then executed\n"
"together, generating a single proof common to all the programs. Rather\n"
"than sending the proof directly to the Solidity Verifier in Ethereum, it\n"
"is initially sent to a STARK Verifier program written in Cairo. The\n"
"STARK Verifier generates a new proof to confirm that the initial proofs\n"
"were verified, which can be sent back into SHARP and the STARK Verifier.\n"
"This recursive proof process will be discussed in more detail later in\n"
"this chapter. Ultimately, the last proof in the series is sent to the\n"
"Solidity Verifier on Ethereum. In other words, there are many proofs\n"
"generated until we reach Ethereum and the Solidity Verifier."
msgstr ""

#: src/ch03-03-provers.md:31
msgid ""
"The primary benefit of SHARP system lies in its ability to decrease\n"
"costs and enhance efficiency within the Starknet network. It achieves\n"
"this by aggregating multiple Cairo jobs, which are individual sets of\n"
"computations. This aggregation allows the protocol to leverage the\n"
"exponential amortization offered by STARK proofs."
msgstr ""

#: src/ch03-03-provers.md:37
msgid ""
"Exponential amortization means that as the computational load of the\n"
"proofs increases, the cost of verifying those proofs rises at a slower\n"
"logarithmic rate than the computation increase. In other words, the\n"
"computation itself grows slower than the verification cost. As a result,\n"
"the cost of each transaction within the aggregated set is significantly\n"
"reduced, making the overall process more cost-effective and accessible\n"
"for users."
msgstr ""

#: src/ch03-03-provers.md:45
msgid ""
"In SHARP and Cairo context, \"jobs\" refer to the individual Cairo\n"
"programs or tasks submitted by different users. These jobs contain\n"
"specific logic or computations that must be executed on the Starknet\n"
"network."
msgstr ""

#: src/ch03-03-provers.md:50
msgid ""
"Additionally, SHARP allows smaller users with limited computation to\n"
"benefit from joining other jobs and share the cost of generating the\n"
"proofs. This collaborative approach is similar to using public\n"
"transportation instead of a private car, where the cost is distributed\n"
"among all participants, making it more affordable for everyone."
msgstr ""

#: src/ch03-03-provers.md:56
msgid "## Recursive Proofs in SHARP"
msgstr ""

#: src/ch03-03-provers.md:58
msgid ""
"One of the most powerful features of SHARP is its use of recursive\n"
"proofs. Rather than directly sending the generated proofs to the\n"
"Solidity Verifier, they are first sent to a STARK Verifier program\n"
"written in Cairo. This Verifier, which is also a Cairo Program, receives\n"
"the proof and creates a new Cairo job that is sent to the Prover. The\n"
"Prover then generates a new proof to confirm that the initial proofs\n"
"were verified. These new proofs can be sent back into SHARP and the\n"
"STARK Verifier, restarting the process."
msgstr ""

#: src/ch03-03-provers.md:67
msgid ""
"This process continues recursively, with each new proof being sent to\n"
"the Cairo Verifier until a trigger is reached. At this point, the last\n"
"proof in the series is sent to the Solidity Verifier on Ethereum. This\n"
"approach allows for greater parallelization of the computation and\n"
"reduces the time and cost associated with generating and verifying\n"
"proofs."
msgstr ""

#: src/ch03-03-provers.md:74
msgid ""
"     Generated Proofs\n"
"                 |\n"
"                 V\n"
"    STARK Verifier program (in Cairo)\n"
"                 |\n"
"                 V\n"
"            Cairo Job\n"
"                 |\n"
"                 V\n"
"                Prover\n"
"                 |\n"
"                 V\n"
"      New Proof Generated\n"
"                 |\n"
"                 V\n"
"           Repeat Process\n"
"                 |\n"
"                 V\n"
"     Trigger Reached (last proof)\n"
"                 |\n"
"                 V\n"
"        Solidity Verifier"
msgstr ""

#: src/ch03-03-provers.md:97
msgid ""
"At first glance, recursive proofs may seem more complex and\n"
"time-consuming. However, there are several benefits to this approach:"
msgstr ""

#: src/ch03-03-provers.md:100
msgid ""
"1.  **Parallelization**: Recursive proofs allow for work\n"
"    parallelization, reducing user latency and improving SHARP\n"
"    efficiency.\n"
"\n"
"2.  **Cheaper on-chain costs**: Parallelization enables SHARP to create\n"
"    larger proofs, which would have previously been limited by the\n"
"    availability of large cloud machines (which are rare and limited).\n"
"    As a result, on-chain costs are reduced.\n"
"\n"
"3.  **Lower cloud costs**: Since each job is shorter, the required\n"
"    memory for processing is reduced, resulting in lower cloud costs.\n"
"\n"
"4.  **Optimization**: Recursive proofs enable SHARP to optimize for\n"
"    various factors, including latency, on-chain costs, and time to\n"
"    proof.\n"
"\n"
"5.  **Cairo support**: Recursive proofs only require support in Cairo,\n"
"    without the need to add support in the Solidity Verifier."
msgstr ""

#: src/ch03-03-provers.md:119
msgid ""
"Latency in Starknet encompasses the time taken for processing,\n"
"confirming, and including transactions in a block. It is affected by\n"
"factors like network congestion, transaction fees, and system\n"
"efficiency. Minimizing latency ensures faster transaction processing and\n"
"user feedback."
msgstr ""

#: src/ch03-03-provers.md:125
msgid ""
"Time to proof, however, specifically pertains to the duration required\n"
"to generate and verify cryptographic proofs for transactions or\n"
"operations."
msgstr ""

#: src/ch03-03-provers.md:129
msgid "## SHARP Backend Architecture and Data Pipeline"
msgstr ""

#: src/ch03-03-provers.md:131
msgid ""
"SHARP back end architecture consists of several services that work\n"
"together to process Cairo jobs and generate proofs. These services\n"
"include:"
msgstr ""

#: src/ch03-03-provers.md:135
msgid ""
"1.  **Gateway**: Cairo jobs enter SHARP through the gateway.\n"
"\n"
"2.  **Job Creator**: It prevents job duplication and ensures that the\n"
"    system operates consistently, regardless of multiple identical\n"
"    requests.\n"
"\n"
"3.  **Validator**: This is the first important step. The validator\n"
"    service runs validation checks on each job, ensuring they meet the\n"
"    requirements and can fit within the prover machines. Invalid jobs\n"
"    are tagged as such and do not proceed to the Prover.\n"
"\n"
"4.  **Scheduler**: The scheduler service creates \"trains\" that aggregate\n"
"    jobs and send them to the Prover. Recursive jobs are paired and sent\n"
"    to the Prover together.\n"
"\n"
"5.  **Cairo Runner**: This service runs Cairo for the Prover’s needs.\n"
"    The Cairo Runner service runs Cairo programs, executing the\n"
"    necessary computations and generating the execution trace as an\n"
"    intermediate result. The Prover then uses this execution trace.\n"
"\n"
"6.  **Prover**: The Prover computes the proofs for each train (that\n"
"    contains a few jobs).\n"
"\n"
"7.  **Dispatcher**: The Dispatcher serves two functions in the SHARP\n"
"    system.\n"
"\n"
"    1.  In the case of a recursive proof, the Dispatcher runs the Cairo\n"
"        Verifier program on the proof it has received from the Prover,\n"
"        resulting in a new Cairo job that goes back to the Validator.\n"
"\n"
"    2.  In the case of a proof that needs to go on chain (e.g., to\n"
"        Ethereum), the Dispatcher creates \"packages\" from the proof,\n"
"        which can then be sent to the Blockchain Writer.\n"
"\n"
"8.  **Blockchain Writer**: Once the packages have been created by the\n"
"    Dispatcher, they are sent to the Blockchain Writer. The Blockchain\n"
"    Writer is responsible for sending the packages to the appropriate\n"
"    blockchain (e.g., Ethereum) for verification. This is an important\n"
"    step in the SHARP system, as it ensures that the proofs are properly\n"
"    verified and that the transactions are securely recorded on the\n"
"    blockchain.\n"
"\n"
"9.  **Catcher**: The Catcher monitors blockchain (e.g., Ethereum)\n"
"    transactions to ensure that they have been accepted. While the\n"
"    Catcher is relevant for internal monitoring purposes, it is\n"
"    important to note that if a transaction fails, the fact won’t be\n"
"    registered on-chain in the fact registry. As a result, the soundness\n"
"    of the system is still preserved even without the catcher."
msgstr ""

#: src/ch03-03-provers.md:184
msgid ""
"SHARP is designed to be stateless (each Cairo job is executed in its own\n"
"context and has no dependency on other jobs), allowing for greater\n"
"flexibility in processing jobs."
msgstr ""

#: src/ch03-03-provers.md:188
msgid "## Current SHARP Users"
msgstr ""

#: src/ch03-03-provers.md:190
msgid "Currently, the primary users of SHARP include:"
msgstr ""

#: src/ch03-03-provers.md:192
msgid ""
"- StarkEx\n"
"\n"
"- Starknet\n"
"\n"
"- External users who use the Cairo Playground"
msgstr ""

#: src/ch03-03-provers.md:198
msgid "## Challenges and Optimization"
msgstr ""

#: src/ch03-03-provers.md:200
msgid ""
"Optimizing the Prover involves numerous challenges and potential\n"
"projects on which the Starkware team and the community are currently\n"
"working:"
msgstr ""

#: src/ch03-03-provers.md:204
msgid ""
"- Exploring more efficient hash functions: SHARP is constantly\n"
"  exploring more efficient hash functions for Cairo, the Prover, and\n"
"  Solidity.\n"
"\n"
"- Investigating smaller fields: Investigating smaller fields for\n"
"  recursive proof steps could lead to more efficient computations.\n"
"\n"
"- Adjusting various parameters: SHARP is continually adjusting various\n"
"  parameters of the STARK protocol, such as FRI parameters and block\n"
"  factors.\n"
"\n"
"- Optimizing the Cairo code: SHARP is optimizing the Cairo code to\n"
"  make it faster, resulting in a faster recursive prover.\n"
"\n"
"- Developing dynamic layouts: This will allow Cairo programs to scale\n"
"  resources depending on their needs.\n"
"\n"
"- Improving scheduling algorithm: This is another optimization path\n"
"  that can be taken. It is not within the Prover itself."
msgstr ""

#: src/ch03-03-provers.md:224
msgid ""
"In particular, dynamic layouts (you can learn more about layouts here\n"
"(TODO)) will allow Cairo programs to scale resources depending on their\n"
"needs. This can lead to more efficient computation and better\n"
"utilization of resources. Dynamic layouts allow SHARP to determine the\n"
"required resources for a specific job and adjust the layout accordingly\n"
"instead of relying on predefined layouts with fixed resources. This\n"
"approach can provide tailored solutions for each job, improving overall\n"
"efficiency."
msgstr ""

#: src/ch03-03-provers.md:245
msgid ""
"In conclusion, SHARP is a critical component of Starknet’s architecture,\n"
"providing a more efficient and cost-effective solution for processing\n"
"Cairo programs and verifying their proofs. By leveraging the power of\n"
"STARK technology and incorporating recursive proofs, SHARP plays a vital\n"
"role in improving the overall performance and scalability of the\n"
"Starknet network. The stateless nature of SHARP and the reliance on the\n"
"cryptographic soundness of the STARK proving system make it an\n"
"innovative and valuable addition to the blockchain ecosystem."
msgstr ""

#: src/ch03-04-nodes.md:1
msgid "# Nodes"
msgstr ""

#: src/ch03-04-nodes.md:3
msgid ""
"This chapter will guide you through setting up and running a Starknet\n"
"node, illustrating the layered tech stack concept, and explaining how to\n"
"operate these protocols locally. Starknet, as a Layer 2 Validity Rollup,\n"
"operates on top of Ethereum Layer 1, creating a protocol stack that each\n"
"addresses different functionalities, similar to the OSI model for\n"
"internet connections. This chapter is an edit of\n"
"[drspacemn](https://medium.com/starknet-edu/the-starknet-stack-7b0d70a7e1d4)'s\n"
"blog."
msgstr ""

#: src/ch03-04-nodes.md:12
msgid ""
"CONTRIBUTE: This guide shows how to run a Starknet node locally with a\n"
"particular setup. You can contribute to this guide by adding more\n"
"options for hardware and software, as well as other ways to run a\n"
"Starknet nod (for example using\n"
"[Beerus](https://github.com/keep-starknet-strange/beerus)). You can also\n"
"contribute by adding more information about the Starknet stack and the\n"
"different layers. Feel free to [open a\n"
"PR](https://github.com/starknet-edu/starknetbook)."
msgstr ""

#: src/ch03-04-nodes.md:21
msgid "## What is a Node in the Context of Ethereum and Blockchain?"
msgstr ""

#: src/ch03-04-nodes.md:23
msgid ""
"In the context of Ethereum and blockchain, a node is an integral part of\n"
"the network that validates and relays transactions. Nodes download a\n"
"copy of the entire blockchain and are interconnected with other nodes to\n"
"maintain and update the blockchain state. There are different types of\n"
"nodes, such as full nodes, light nodes, and mining nodes, each having\n"
"different roles and responsibilities within the network."
msgstr ""

#: src/ch03-04-nodes.md:30
msgid "## Overview of Starknet Technology"
msgstr ""

#: src/ch03-04-nodes.md:32
msgid ""
"Starknet is a permissionless, zk-STARK-based Layer-2 network, aiming for\n"
"full decentralization. It enables developers to build scalable\n"
"decentralized applications (dApps) and utilizes Ethereum’s Layer 1 for\n"
"proof verification and data availability. Key aspects of Starknet\n"
"include:"
msgstr ""

#: src/ch03-04-nodes.md:38
msgid ""
"- **Cairo execution environment**: Cairo, the execution environment of\n"
"  Starknet, facilitates writing and execution of complex smart\n"
"  contracts.\n"
"\n"
"- **Scalability**: Starknet achieves scalability through zk-STARK\n"
"  proofs, minimizing the data needed to be posted on-chain.\n"
"\n"
"- **Node network**: The Starknet network comprises nodes that\n"
"  synchronize and process transactions, contributing to the network’s\n"
"  overall security and decentralization."
msgstr ""

#: src/ch03-04-nodes.md:49
msgid "## Starknet Stack"
msgstr ""

#: src/ch03-04-nodes.md:51
msgid ""
"The Starknet stack can be divided into various layers, similar to OSI or\n"
"TCP/IP models. The most appropriate model depends on your understanding\n"
"and requirements. A simplified version of the modular blockchain stack\n"
"might look like this:"
msgstr ""

#: src/ch03-04-nodes.md:56
msgid ""
"- Layer 1: Data Layer\n"
"\n"
"- Layer 2: Execution Layer\n"
"\n"
"- Layer 3: Application Layer\n"
"\n"
"- Layer 4: Transport Layer"
msgstr ""

#: src/ch03-04-nodes.md:64
msgid "<img alt=\"Modular blockchain layers\" src=\"img/ch03-modular-blockcahain-layers.png\" class=\"center\" style=\"width: 50%;\" />"
msgstr ""

#: src/ch03-04-nodes.md:66
msgid "<span class=\"caption\">Modular blockchain layers</span>"
msgstr ""

#: src/ch03-04-nodes.md:70
msgid ""
"There are various hardware specifications, including packaged options,\n"
"that will enable you to run an Ethereum node from home. The goal here is\n"
"to build the most cost-efficient Starknet stack possible ([see here more\n"
"options](https://github.com/rocket-pool/docs.rocketpool.net/blob/main/src/guides/node/local/hardware.md))."
msgstr ""

#: src/ch03-04-nodes.md:75
msgid "**Minimum Requirements:**"
msgstr ""

#: src/ch03-04-nodes.md:77
msgid ""
"- CPU: 2+ cores\n"
"\n"
"- RAM: 4 GB\n"
"\n"
"- Disk: 600 GB\n"
"\n"
"- Connection Speed: 8 mbps/sec"
msgstr ""

#: src/ch03-04-nodes.md:85
msgid "**Recommended Specifications:**"
msgstr ""

#: src/ch03-04-nodes.md:87
msgid ""
"- CPU: 4+ cores\n"
"\n"
"- RAM: 16 GB+\n"
"\n"
"- Disk 2 TB\n"
"\n"
"- Connection Speed: 25+ mbps/sec"
msgstr ""

#: src/ch03-04-nodes.md:95
msgid "**You can refer to these links for the hardware:**"
msgstr ""

#: src/ch03-04-nodes.md:97
msgid ""
"- [CPU](https://a.co/d/iAWpTzQ) — $193\n"
"\n"
"- [Board](https://a.co/d/cTUk9Kd) (can attempt w/ Raspberry Pi) — $110\n"
"\n"
"- [Disk](https://a.co/d/0US61Y5) — $100\n"
"\n"
"- [RAM](https://a.co/d/br867sk) — $60\n"
"\n"
"- [PSU](https://a.co/d/2k3Gn40) — $40\n"
"\n"
"- [Case](https://a.co/d/apCBGwF) — $50"
msgstr ""

#: src/ch03-04-nodes.md:109
msgid "Total — $553"
msgstr ""

#: src/ch03-04-nodes.md:111
msgid ""
"Recommended operating system and software: Ubuntu LTS,\n"
"[Docker](https://docs.docker.com/engine/install/ubuntu), and [Docker\n"
"Compose](https://docs.docker.com/compose/install/linux). Ensure you have\n"
"the necessary tools installed with:"
msgstr ""

#: src/ch03-04-nodes.md:116
msgid "sudo apt install -y jq curl net-tools"
msgstr ""

#: src/ch03-04-nodes.md:118
msgid "## Layer 1: Data Layer"
msgstr ""

#: src/ch03-04-nodes.md:120
msgid ""
"The bottom-most layer of the stack is the data layer. Here, Starknet’s\n"
"L2 leverages Ethereum’s L1 for proof verification and data availability.\n"
"Starknet utilizes Ethereum as its L1, so the first step is setting up an\n"
"Ethereum Full Node. As this is the data layer, the hardware bottleneck\n"
"is usually the disk storage. It’s crucial to have a high capacity I/O\n"
"SSD over an HDD because Ethereum Nodes require both an Execution Client\n"
"and a Consensus Client for communication."
msgstr ""

#: src/ch03-04-nodes.md:128
msgid ""
"Ethereum provides several options for Execution and Consensus clients.\n"
"Execution clients include Geth, Erigon, Besu (used here), Nethermind,\n"
"and Akula. Consensus clients include Prysm, Lighthouse (used here),\n"
"Lodestar, Nimbus, and Teku."
msgstr ""

#: src/ch03-04-nodes.md:133
msgid ""
"Your Besu/Lighthouse node will take approximately 600 GB of disk space.\n"
"Navigate to a partition on your machine with sufficient capacity and run\n"
"the following commands:"
msgstr ""

#: src/ch03-04-nodes.md:137
msgid ""
"git clone https://github.com/starknet-edu/starknet-stack.git\n"
"    cd starknet-stack\n"
"    docker-compose -f dc-l1.yaml up -d"
msgstr ""

#: src/ch03-04-nodes.md:141
msgid ""
"This will begin the fairly long process of spinning up our Consensus\n"
"Client, Execution Client, and syncing them to the current state of the\n"
"Goerli Testnet. If you would like to see the logs from either process\n"
"you can run:"
msgstr ""

#: src/ch03-04-nodes.md:146
msgid ""
"# tail besu logs\n"
"    docker container logs -f $(docker ps | grep besu | awk '{print $1}')\n"
"\n"
"    # tail lighthouse logs\n"
"    docker container logs -f $(docker ps | grep lighthouse | awk '{print $1}')"
msgstr ""

#: src/ch03-04-nodes.md:152
msgid "Lets make sure that everything that should be listening is listening:"
msgstr ""

#: src/ch03-04-nodes.md:154
msgid ""
"# should see all ports in command output\n"
"\n"
"    # besu ports\n"
"    sudo netstat -lpnut | grep -E '30303|8551|8545'\n"
"\n"
"    # lighthouse ports\n"
"    sudo netstat -lpnut | grep -E '5054|9000'"
msgstr ""

#: src/ch03-04-nodes.md:162
msgid ""
"We’ve used docker to abstract a lot of the nuance of running an Eth L1\n"
"node, but the important things to note are how the two processes EL/CL\n"
"point to each other and communicate via JSON-RPC:"
msgstr ""

#: src/ch03-04-nodes.md:166
msgid ""
"services:\n"
"      lighthouse:\n"
"          image: sigp/lighthouse:latest\n"
"          container_name: lighthouse\n"
"          volumes:\n"
"            - ./l1_consensus/data:/root/.lighthouse\n"
"            - ./secret:/root/secret\n"
"          network_mode: \"host\"\n"
"          command:\n"
"            - lighthouse\n"
"            - beacon\n"
"            - --network=goerli\n"
"            - --metrics\n"
"            - --checkpoint-sync-url=https://goerli.beaconstate.info\n"
"            - --execution-endpoint=http://127.0.0.1:8551\n"
"            - --execution-jwt=/root/secret/jwt.hex\n"
"\n"
"      besu:\n"
"        image: hyperledger/besu:latest\n"
"        container_name: besu\n"
"        volumes:\n"
"          - ./l1_execution/data:/var/lib/besu\n"
"          - ./secret:/var/lib/besu/secret\n"
"        network_mode: \"host\"\n"
"        command:\n"
"          - --network=goerli\n"
"          - --rpc-http-enabled=true\n"
"          - --data-path=/var/lib/besu\n"
"          - --data-storage-format=BONSAI\n"
"          - --sync-mode=X_SNAP\n"
"          - --engine-rpc-enabled=true\n"
"          - --engine-jwt-enabled=true\n"
"          - --engine-jwt-secret=/var/lib/besu/secret/jwt.hex"
msgstr ""

#: src/ch03-04-nodes.md:200
msgid ""
"Once this is done, your Ethereum node should be up and running, and it\n"
"will start syncing with the Ethereum network."
msgstr ""

#: src/ch03-04-nodes.md:203
msgid "## Layer 2: Execution Layer"
msgstr ""

#: src/ch03-04-nodes.md:205
msgid ""
"The next layer in our Starknet stack is the Execution Layer. This layer\n"
"is responsible for running the Cairo VM, which executes Starknet smart\n"
"contracts. The Cairo VM is a deterministic virtual machine that allows\n"
"developers to write complex smart contracts in the Cairo language.\n"
"Starknet uses a similar [JSON-RPC\n"
"spec](https://github.com/starkware-libs/starknet-specs) as\n"
"[Ethereum](https://ethereum.org/en/developers/docs/apis/json-rpc) in\n"
"order to interact with the execution layer."
msgstr ""

#: src/ch03-04-nodes.md:214
msgid ""
"In order to stay current with the propagation of the Starknet blockchain\n"
"we need a client similar to Besu that we are using for L1. The efforts\n"
"to provide full nodes for the Starknet ecosystem are:\n"
"[Pathfinder](https://github.com/eqlabs/pathfinder) (used here),\n"
"[Papyrus](https://github.com/starkware-libs/papyrus), and\n"
"[Juno](https://github.com/NethermindEth/juno). However, different\n"
"implementations are still in development and not yet ready for\n"
"production."
msgstr ""

#: src/ch03-04-nodes.md:223
msgid "Check that your L1 has completed its sync:"
msgstr ""

#: src/ch03-04-nodes.md:225
msgid ""
"# check goerli etherscan to make sure you have the latest block https://goerli.etherscan.io\n"
"\n"
"    curl --location --request POST 'http://localhost:8545' \\\n"
"    --header 'Content-Type: application/json' \\\n"
"    --data-raw '{\n"
"        \"jsonrpc\":\"2.0\",\n"
"        \"method\":\"eth_blockNumber\",\n"
"        \"params\":[],\n"
"        \"id\":83\n"
"    }'\n"
"\n"
"    # Convert the result, which is hex (remove 0x) to decimal. Example:\n"
"    echo $(( 16#246918 ))"
msgstr ""

#: src/ch03-04-nodes.md:239
msgid ""
"Start your L2 Execution Client and note that we are syncing Starknet’s\n"
"state from our LOCAL ETH L1 NODE!"
msgstr ""

#: src/ch03-04-nodes.md:242
msgid "PATHFINDER_ETHEREUM_API_URL=http://127.0.0.1:8545"
msgstr ""

#: src/ch03-04-nodes.md:244
msgid ""
"# from starknet-stack project root\n"
"    docker-compose -f dc-l2.yaml up -d"
msgstr ""

#: src/ch03-04-nodes.md:247
msgid "To follow the sync:"
msgstr ""

#: src/ch03-04-nodes.md:249
msgid "docker container logs -f $(docker ps | grep pathfinder | awk '{print $1}')"
msgstr ""

#: src/ch03-04-nodes.md:251
msgid ""
"Starknet [Testnet_1](https://testnet.starkscan.co) currently comprises\n"
"800,000+ blocks so this will take some time (days) to sync fully. To\n"
"check L2 sync:"
msgstr ""

#: src/ch03-04-nodes.md:255
msgid ""
"# compare `current_block_num` with `highest_block_num`\n"
"\n"
"    curl --location --request POST 'http://localhost:9545' \\\n"
"    --header 'Content-Type: application/json' \\\n"
"    --data-raw '{\n"
"     \"jsonrpc\":\"2.0\",\n"
"     \"method\":\"starknet_syncing\",\n"
"     \"params\":[],\n"
"     \"id\":1\n"
"    }'"
msgstr ""

#: src/ch03-04-nodes.md:266
msgid "To check data sizes:"
msgstr ""

#: src/ch03-04-nodes.md:268
msgid "sudo du -sh ./* | sort -rh"
msgstr ""

#: src/ch03-04-nodes.md:270
msgid "## Layer 3: Application Layer"
msgstr ""

#: src/ch03-04-nodes.md:272
msgid ""
"We see the same need for data refinement as we did in the OSI model. On\n"
"L1 packets come over the wire in a raw stream of bytes and are then\n"
"processed and filtered by higher-level protocols. When designing a\n"
"decentralized application Bob will need to be cognizant of interactions\n"
"with his contract on chain, but doesn’t need to be aware of all the\n"
"information occurring on Starknet."
msgstr ""

#: src/ch03-04-nodes.md:279
msgid ""
"This is the role of an indexer. To process and filter useful information\n"
"for an application. Information that an application MUST be opinionated\n"
"about and the underlying layer MUST NOT be opinionated about."
msgstr ""

#: src/ch03-04-nodes.md:283
msgid ""
"Indexers provide applications flexibility as they can be written in any\n"
"programming language and have any data layout that suits the\n"
"application."
msgstr ""

#: src/ch03-04-nodes.md:287
msgid ""
"To start our toy\n"
"[indexer](https://github.com/starknet-edu/starknet-stack/blob/main/indexer/indexer.sh)\n"
"run:"
msgstr ""

#: src/ch03-04-nodes.md:291
msgid "./indexer/indexer.sh"
msgstr ""

#: src/ch03-04-nodes.md:293
msgid ""
"Again notice that we don’t need to leave our local setup for these\n"
"interactions (<http://localhost:9545>)."
msgstr ""

#: src/ch03-04-nodes.md:296
msgid "## Layer 4: Transport Layer"
msgstr ""

#: src/ch03-04-nodes.md:298
msgid ""
"The transport layer comes into play when the application has parsed and\n"
"indexed critical information, often leading to some state change based\n"
"on this information. This is where the application communicates the\n"
"desired state change to the Layer 2 sequencer to get that change into a\n"
"block. This is achieved using the same full-node/RPC spec\n"
"implementation, in our case, Pathfinder."
msgstr ""

#: src/ch03-04-nodes.md:305
msgid ""
"When working with our local Starknet stack, invoking a transaction\n"
"locally might look like this:"
msgstr ""

#: src/ch03-04-nodes.md:308
msgid ""
"curl --location --request POST 'http://localhost:9545' \\\n"
"    --header 'Content-Type: application/json' \\\n"
"    --data-raw '{\n"
"        \"jsonrpc\": \"2.0\",\n"
"        \"method\": \"starknet_addInvokeTransaction\",\n"
"        \"params\": {\n"
"            \"invoke_transaction\": {\n"
"                \"type\": \"INVOKE\",\n"
"                \"max_fee\": \"0x4f388496839\",\n"
"                \"version\": \"0x0\",\n"
"                \"signature\": [\n"
"                    \"0x7dd3a55d94a0de6f3d6c104d7e6c88ec719a82f4e2bbc12587c8c187584d3d5\",\n"
"                    \"0x71456dded17015d1234779889d78f3e7c763ddcfd2662b19e7843c7542614f8\"\n"
"                ],\n"
"                \"contract_address\": \"0x23371b227eaecd8e8920cd429d2cd0f3fee6abaacca08d3ab82a7cdd\",\n"
"                \"calldata\": [\n"
"                    \"0x1\",\n"
"                    \"0x677bb1cdc050e8d63855e8743ab6e09179138def390676cc03c484daf112ba1\",\n"
"                    \"0x362398bec32bc0ebb411203221a35a0301193a96f317ebe5e40be9f60d15320\",\n"
"                    \"0x0\",\n"
"                    \"0x1\",\n"
"                    \"0x1\",\n"
"                    \"0x2b\",\n"
"                    \"0x0\"\n"
"                ],\n"
"                \"entry_point_selector\": \"0x15d40a3d6ca2ac30f4031e42be28da9b056fef9bb7357ac5e85627ee876e5ad\"\n"
"            }\n"
"        },\n"
"        \"id\": 0\n"
"    }'"
msgstr ""

#: src/ch03-04-nodes.md:339
msgid ""
"However, this process involves setting up a local wallet and signing the\n"
"transaction. For simplicity, we will use a browser wallet and StarkScan."
msgstr ""

#: src/ch03-04-nodes.md:342
msgid "Steps:"
msgstr ""

#: src/ch03-04-nodes.md:344
msgid ""
"1.  Navigate to the contract on StarkScan and connect to your wallet.\n"
"\n"
"2.  Enter a new value and write the transaction:"
msgstr ""

#: src/ch03-04-nodes.md:348
msgid "<img alt=\"Starkscan block explorer\" src=\"img/ch03-starkscan-block-explorer.png\" class=\"center\" style=\"width: 50%;\" />"
msgstr ""

#: src/ch03-04-nodes.md:350
msgid "<span class=\"caption\">Starkscan block explorer</span>"
msgstr ""

#: src/ch03-04-nodes.md:352
msgid ""
"Once the transaction is accepted on the Layer 2 execution layer, the\n"
"event data should come through our application layer indexer."
msgstr ""

#: src/ch03-04-nodes.md:355
msgid "Example Indexer Output:"
msgstr ""

#: src/ch03-04-nodes.md:357
msgid ""
"Pulled Block #: 638703\n"
"    Found transaction: 0x2053ae75adfb4a28bf3a01009f36c38396c904012c5fc38419f4a7f3b7d75a5\n"
"    Events to Index:\n"
"    [\n"
"      {\n"
"        \"from_address\": \"0x806778f9b06746fffd6ca567e0cfea9b3515432d9ba39928201d18c8dc9fdf\",\n"
"        \"keys\": [\n"
"          \"0x1fee98324df9b8703ae8de6de3068b8a8dce40c18752c3b550c933d6ac06765\"\n"
"        ],\n"
"        \"data\": [\n"
"          \"0xa\"\n"
"        ]\n"
"      },\n"
"      {\n"
"        \"from_address\": \"0x126dd900b82c7fc95e8851f9c64d0600992e82657388a48d3c466553d4d9246\",\n"
"        \"keys\": [\n"
"          \"0x5ad857f66a5b55f1301ff1ed7e098ac6d4433148f0b72ebc4a2945ab85ad53\"\n"
"        ],\n"
"        \"data\": [\n"
"          \"0x2053ae75adfb4a28bf3a01009f36c38396c904012c5fc38419f4a7f3b7d75a5\",\n"
"          \"0x0\"\n"
"        ]\n"
"      },\n"
"      {\n"
"        \"from_address\": \"0x49d36570d4e46f48e99674bd3fcc84644ddd6b96f7c741b1562b82f9e004dc7\",\n"
"        \"keys\": [\n"
"          \"0x99cd8bde557814842a3121e8ddfd433a539b8c9f14bf31ebf108d12e6196e9\"\n"
"        ],\n"
"        \"data\": [\n"
"          \"0x126dd900b82c7fc95e8851f9c64d0600992e82657388a48d3c466553d4d9246\",\n"
"          \"0x46a89ae102987331d369645031b49c27738ed096f2789c24449966da4c6de6b\",\n"
"          \"0x17c1e31c270\",\n"
"          \"0x0\"\n"
"        ]\n"
"      }\n"
"    ]"
msgstr ""

#: src/ch03-04-nodes.md:394
msgid ""
"Once the transaction is accepted on Layer 1, we can query the Starknet\n"
"Core Contracts from our Layer 1 node to see the storage keys that have\n"
"been updated on our data layer!"
msgstr ""

#: src/ch03-04-nodes.md:398
msgid ""
"You have successfully navigated through the entire Starknet stack, from\n"
"setting up your node, through executing and monitoring a transaction, to\n"
"inspecting its effects on the data layer. This journey has equipped you\n"
"with the understanding and the skills to interact with Starknet on a\n"
"deeper level."
msgstr ""

#: src/ch03-04-nodes.md:404
msgid "## Conclusion: Understanding the Modular Nature of Starknet"
msgstr ""

#: src/ch03-04-nodes.md:406
msgid ""
"Conceptual models, such as the ones used in this guide, are incredibly\n"
"useful in helping us understand complex systems. They can be refactored,\n"
"reformed, and nested to provide a clear and comprehensive view of how a\n"
"platform like Starknet operates. For instance, the OSI Model, a\n"
"foundational model for understanding network interactions, underpins our\n"
"modular stack."
msgstr ""

#: src/ch03-04-nodes.md:413
msgid ""
"A key concept to grasp is _Fractal Scaling._ This concept allows us to\n"
"extend our model to include additional layers beyond Layer 2, such as\n"
"Layer 3. In this extended model, the entire stack recurs above our\n"
"existing stack, as shown in the following diagram:"
msgstr ""

#: src/ch03-04-nodes.md:418
msgid "<img alt=\"Fractal scaling in a modular blockchain environment\" src=\"img/ch03-fractal-scaling.png\" class=\"center\" style=\"width: 50%;\" />"
msgstr ""

#: src/ch03-04-nodes.md:420
msgid "<span class=\"caption\">Fractal scaling in a modular blockchain environment</span>"
msgstr ""

#: src/ch03-04-nodes.md:422
msgid ""
"Just as Layer 2 compresses its transaction throughput into a proof and\n"
"state change that is written to Layer 1, we can apply the same\n"
"compression principle at Layer 3, proving and writing to Layer 2. This\n"
"not only gives us more control over the protocol rules but also allows\n"
"us to achieve higher compression ratios, enhancing the scalability of\n"
"our applications."
msgstr ""

#: src/ch03-04-nodes.md:429
msgid ""
"In essence, Starknet’s modular and layered design, combined with the\n"
"power of Fractal Scaling, offers a robust and scalable framework for\n"
"building decentralized applications. Understanding this structure is\n"
"fundamental to effectively leveraging Starknet’s capabilities and\n"
"contributing to its ecosystem."
msgstr ""

#: src/ch03-04-nodes.md:435
msgid ""
"This concludes our journey into running a Starknet node and traversing\n"
"its layered architecture. We hope that you now feel equipped to explore,\n"
"experiment with, and innovate within the Starknet ecosystem."
msgstr ""

#: src/ch03-05-layer-3.md:1
msgid "# Layer 3 (App Chains)"
msgstr ""

#: src/ch03-05-layer-3.md:3
msgid ""
"Appchains let you create a blockchain designed precisely for your\n"
"application’s needs. These specialized blockchains allow customization\n"
"in various aspects, such as hash functions and consensus algorithms.\n"
"Moreover, they inherit the security features of the Layer 1 or Layer 2\n"
"blockchains they are built upon."
msgstr ""

#: src/ch03-05-layer-3.md:11
msgid ""
"Layer 3 blockchains can exist on top of Layer 2 blockchains. You can\n"
"even build additional layers (Layer 4 and so on) on top of Layer 3 for\n"
"more complex solutions. A sample layout is shown in the following\n"
"diagram."
msgstr ""

#: src/ch03-05-layer-3.md:16
msgid "<img alt=\"Example of an environment with a Layers 3 and 4\" src=\"img/ch03-layer-3-ecosystem.png\" class=\"center\" style=\"width: 50%;\" />"
msgstr ""

#: src/ch03-05-layer-3.md:18
msgid "<span class=\"caption\">Example of an environment with a Layers 3 and 4</span>"
msgstr ""

#: src/ch03-05-layer-3.md:20
msgid "In this example ecosystem, Layer 3 options include:"
msgstr ""

#: src/ch03-05-layer-3.md:22
msgid ""
"- The Public Starknet (L2), which is a general-purpose blockchain for\n"
"  decentralized applications.\n"
"\n"
"- A L3 Starknet optimized for cost-sensitive applications.\n"
"\n"
"- Customized L3 Starknet systems designed for enhanced performance,\n"
"  using specific storage structures or data compression techniques.\n"
"\n"
"- StarkEx systems used by platforms like dYdX and Sorare, offering\n"
"  proven scalability through data availability solutions like Validium\n"
"  or Rollup.\n"
"\n"
"- Privacy-focused Starknet instances, which could also function as a\n"
"  Layer 4, for conducting transactions without including them in\n"
"  public Starknets."
msgstr ""

#: src/ch03-05-layer-3.md:38
msgid "## Benefits of Layer 3"
msgstr ""

#: src/ch03-05-layer-3.md:40
msgid ""
"Layer 3 app chains (with\n"
"[Madara](https://github.com/keep-starknet-strange/madara) as an apt\n"
"sequencer or other option), offer a variety of advantages due to its\n"
"modularity and flexibility. Here’s an overview of the key benefits:"
msgstr ""

#: src/ch03-05-layer-3.md:45
msgid ""
"- **Quick Iteration**: App chains enable rapid protocol changes,\n"
"  freeing you from the constraints of the public Layer 2 roadmap. For\n"
"  example, you could rapidly deploy new DeFi algorithms tailored to\n"
"  your user base.\n"
"\n"
"- **Governance Independence**: You maintain complete control over\n"
"  feature development and improvements, avoiding the need for\n"
"  decentralized governance consensus. This enables, for example, quick\n"
"  implementation of user-suggested features.\n"
"\n"
"- **Cost Efficiency**: Layer 3 offers substantial cost reductions,\n"
"  potentially up to 1 million times compared to Layer 1, making it\n"
"  economically feasible to run more complex applications.\n"
"\n"
"- **Security**: While there may be some trade-offs, such as reduced\n"
"  censorship resistance, the core security mechanisms remain strong.\n"
"\n"
"- **Congestion Avoidance**: App chains are shielded from network\n"
"  congestion, providing a more stable transaction environment, crucial\n"
"  for real-time applications like gaming.\n"
"\n"
"- **Privacy Enhancements**: Layer 3 can serve as a testing ground for\n"
"  privacy-centric features, which could include anonymous transactions\n"
"  or encrypted messaging services.\n"
"\n"
"- **Innovation Platform**: App chains act as experimental fields where\n"
"  novel features can be developed and tested. For instance, they could\n"
"  serve as a testbed for new consensus algorithms before these are\n"
"  considered for Layer 2."
msgstr ""

#: src/ch03-05-layer-3.md:75
msgid ""
"In summary, Layer 3 provides the flexibility, cost-efficiency, and\n"
"environment conducive for innovation, without significant compromise on\n"
"security."
msgstr ""

#: src/ch03-05-layer-3.md:79
msgid "## Madara as a Sequencer for Layer 3 App Chains"
msgstr ""

#: src/ch03-05-layer-3.md:81
msgid ""
"[Madara](https://github.com/keep-starknet-strange/madara) is a\n"
"specialized sequencer developed to execute transactions and group them\n"
"into batches. Created by the StarkWare Exploration Team, it functions as\n"
"a starting point for building Layer 3 Starknet appchains. This expands\n"
"the possibilities for innovation within the Starknet ecosystem."
msgstr ""

#: src/ch03-05-layer-3.md:87
msgid ""
"Madara’s flexibility allows for the creation of Layer 3 appchains\n"
"optimized for various needs, foe example:"
msgstr ""

#: src/ch03-05-layer-3.md:90
msgid ""
"- Cost-Efficiency: Create an appchain for running a decentralized\n"
"  exchange (DEX) with lower fees compared to the public Starknet.\n"
"\n"
"- Performance: Build an appchain to operate a DEX with faster\n"
"  transaction times.\n"
"\n"
"- Privacy: Design an appchain to facilitate anonymous transactions or\n"
"  encrypted messaging services."
msgstr ""

#: src/ch03-05-layer-3.md:99
msgid ""
"For more information on Madara, refer to the subchapter with the same\n"
"title."
msgstr ""

#: src/ch03-06-solidity-verifier.md:1
msgid "# Solidity Verifier 🚧"
msgstr ""

#: src/ch03-07-decentralization.md:1
msgid "# Decentralization 🚧"
msgstr ""

#: src/ch04-00-account-abstraction.md:1
msgid "# Account Abstraction"
msgstr ""

#: src/ch04-00-account-abstraction.md:3
msgid ""
"Account Abstraction (AA) is a paradigm shift in how accounts and\n"
"transactions are managed in blockchain networks. To break it down, AA\n"
"refers to two intertwined notions:"
msgstr ""

#: src/ch04-00-account-abstraction.md:7
msgid ""
"1.  Transaction Flexibility: This gives the power to each smart contract\n"
"    to validate its transactions, rather than enforcing a\n"
"    one-size-fits-all validation process. This can lead to a variety of\n"
"    potential benefits such as enabling smart contracts to pay for gas\n"
"    fees, allowing multiple signers for a single account, and even\n"
"    introducing advanced cryptographic signatures.\n"
"\n"
"2.  User Experience Optimization: AA provides a more intuitive\n"
"    experience for end-users. It allows developers to create a more\n"
"    flexible security model, for instance, allowing different keys for\n"
"    everyday use and high-value transactions. Additionally, it\n"
"    eliminates, if wished, the need for seed phrases, instead opting for\n"
"    easier recovery methods."
msgstr ""

#: src/ch04-00-account-abstraction.md:21
msgid ""
"At a technical level, AA replaces Externally Owned Accounts (EOA) with a\n"
"generalized concept of accounts. Under this model, accounts can be\n"
"represented by a smart contract that dictates their specific rules and\n"
"behaviors. This means the user or contract account could dictate rules\n"
"about transaction ordering, signatures, access controls, and more,\n"
"providing a high level of customization."
msgstr ""

#: src/ch04-00-account-abstraction.md:28
msgid "Here are two commonly cited definitions of AA:"
msgstr ""

#: src/ch04-00-account-abstraction.md:30
msgid ""
"> Definition 1: Account Abstraction (AA) is when a **smart contract can\n"
"> pay for its own transactions** (Martin Triay, Devcon 6)\\[1\\]. In other\n"
"> words, abstract contracts (or account smart contracts) can pay for\n"
"> transactions. This is a departure from the traditional Externally\n"
"> Owned Accounts or Smart Wallets."
msgstr ""

#: src/ch04-00-account-abstraction.md:36
msgid ""
"> Definition 2: AA is **validation abstraction**. Instead of relying on\n"
"> a single method of transaction validation, as with Ethereum’s Layer 1,\n"
"> AA enables an abstraction of the validation process. This implies the\n"
"> possibility of using different types of signatures, cryptographic\n"
"> primitives, execution processes, etc. (lightclient, Devcon 6)\\[3\\]."
msgstr ""

#: src/ch04-00-account-abstraction.md:42
msgid ""
"AA is positioned as the cornerstone of the next generation blockchain\n"
"technologies, with significant improvements in scalability, user\n"
"experience, and security. It is currently being pioneered by Layer 2\n"
"solutions, including Starknet, as they aim to revolutionize the way we\n"
"approach security, user experience, and self-custody in the crypto\n"
"space."
msgstr ""

#: src/ch04-00-account-abstraction.md:49
msgid "## Applications of Account Abstraction"
msgstr ""

#: src/ch04-00-account-abstraction.md:51
msgid ""
"Having defined Account Abstraction, let’s delve into its practical\n"
"applications. Account Abstraction aims to improve both the accessibility\n"
"and security of self-custody. Here are a few of the key features that AA\n"
"enables:"
msgstr ""

#: src/ch04-00-account-abstraction.md:56
msgid ""
"1.  **Hardware Signer:** With AA, you could sign transactions using a\n"
"    key generated and safeguarded by your smartphone’s secure enclave.\n"
"    This use of biometric identity makes the process more secure and\n"
"    user-friendly (Starkware)\\[4\\], (Braavos)\\[7\\].\n"
"\n"
"2.  **Social recovery:** With the integration of AA, if you lose or\n"
"    compromise your key, you could securely replace it, thus eliminating\n"
"    the need for seed phrases. This change not only enhances security\n"
"    but also simplifies the user experience (Julien Niset, 2022)\\[5\\].\n"
"\n"
"3.  **Key rotation:** If a key controlling your account is compromised,\n"
"    you can easily replace it, negating the need to transfer your\n"
"    assets.\n"
"\n"
"4.  **Session keys:** AA can enhance the usability of web3 applications\n"
"    by allowing a _sign in once_ feature. This would enable websites to\n"
"    execute transactions on your behalf, reducing the need for\n"
"    continuous approvals.\n"
"\n"
"5.  **Custom transaction validation schemes:** AA enables the use of\n"
"    various signature schemes, multisignatures, and other security\n"
"    rules. This flexibility allows for customizable security measures to\n"
"    meet individual user’s needs (Martin Triay, Devcon 6)\\[1\\], (Julien\n"
"    Niset, 2022)\\[5\\], (Motty Lavie)\\[7\\]."
msgstr ""

#: src/ch04-00-account-abstraction.md:81
msgid "Moreover, AA provides enhanced security in several ways:"
msgstr ""

#: src/ch04-00-account-abstraction.md:83
msgid ""
"1.  **Improved key management:** With AA, you can associate multiple\n"
"    devices with your wallet, so if one device is lost, you still have\n"
"    access to your account.\n"
"\n"
"2.  **Various signature and validation schemes:** AA supports additional\n"
"    security measures, like two-factor authentication for large\n"
"    transactions, providing a more secure environment that adapts to\n"
"    individual user’s needs.\n"
"\n"
"3.  **Custom security policies:** Tailor security schemes to suit\n"
"    different types of users or devices and adapt good practices from\n"
"    the banking and web2 sectors."
msgstr ""

#: src/ch04-00-account-abstraction.md:96
msgid ""
"AA opens up new possibilities for both developers and users in the\n"
"Ethereum ecosystem. It offers a promising pathway for a more secure,\n"
"user-friendly experience and lays the groundwork for widespread\n"
"adoption."
msgstr ""

#: src/ch04-00-account-abstraction.md:101
msgid "## Ethereum Account System"
msgstr ""

#: src/ch04-00-account-abstraction.md:103
msgid ""
"To fully understand the benefits of Account Abstraction (AA), let’s\n"
"delve into Ethereum’s current account system. The system is split into\n"
"two types of accounts:"
msgstr ""

#: src/ch04-00-account-abstraction.md:107
msgid ""
"- **Externally Owned Accounts** (EOAs)\n"
"\n"
"- **Contract Accounts** (CAs)."
msgstr ""

#: src/ch04-00-account-abstraction.md:111
msgid ""
"EOAs are the accounts used by individuals, wallets, or any entity\n"
"external to the Ethereum network. These accounts are identified by their\n"
"address, which is derived from the public key of an associated\n"
"cryptographic object called a signer. This signer, or keypair, consists\n"
"of a private key and a public key."
msgstr ""

#: src/ch04-00-account-abstraction.md:117
msgid ""
"The private key, also known as the secret key, is used to digitally sign\n"
"transactions or messages, establishing proof of ownership. The\n"
"corresponding public key is used to verify this signature, ensuring it\n"
"was indeed signed by the respective private key."
msgstr ""

#: src/ch04-00-account-abstraction.md:122
msgid ""
"This means, in order to modify the state of an account, a transaction\n"
"must be initiated and signed by the corresponding private key of the\n"
"account’s EOA. This design choice ensures security by associating each\n"
"account with a unique cryptographic identity."
msgstr ""

#: src/ch04-00-account-abstraction.md:127
msgid ""
"On the other hand, CAs are smart contracts living on the Ethereum\n"
"blockchain. Unlike EOAs, they do not have a private key. They are\n"
"triggered through transactions or messages initiated by EOAs, and their\n"
"behavior is determined by their associated code."
msgstr ""

#: src/ch04-00-account-abstraction.md:132
msgid "However, the current account model presents some challenges:"
msgstr ""

#: src/ch04-00-account-abstraction.md:134
msgid ""
"1.  **Key Management:** The loss of a private key is catastrophic. Given\n"
"    that the private key represents the ownership of the account, if it\n"
"    is lost, all the assets within the account are lost too. Similarly,\n"
"    if it gets stolen, the perpetrator gains full control over the\n"
"    account and its assets.\n"
"\n"
"2.  **User Experience:** Currently, the Ethereum account model lacks\n"
"    user-friendly methods for key recovery or account recovery, which\n"
"    can discourage non-technical users. Additionally, user interfaces,\n"
"    such as crypto wallets, can be overwhelming and difficult to use,\n"
"    presenting barriers for wider adoption.\n"
"\n"
"3.  **Lack of Flexibility:** The traditional model doesn’t allow for\n"
"    custom transaction validation schemes, limiting the possible\n"
"    security and access control improvements."
msgstr ""

#: src/ch04-00-account-abstraction.md:150
msgid ""
"Account Abstraction proposes to improve upon these limitations, offering\n"
"new possibilities in terms of security, scalability, and user\n"
"experience."
msgstr ""

#: src/ch04-00-account-abstraction.md:154
msgid "## The Need for Account Abstraction"
msgstr ""

#: src/ch04-00-account-abstraction.md:156
msgid ""
"As the crypto ecosystem matures and attracts a broader user base, it\n"
"faces pivotal challenges that demand innovative solutions. Among these,\n"
"the question of Account Abstraction (AA) has taken center stage.\n"
"Ethereum, one of the leading platforms for smart contracts and\n"
"Decentralized Applications (dApps), is in a precarious position: it must\n"
"embrace Account Abstraction or risk its position in the crypto world."
msgstr ""

#: src/ch04-00-account-abstraction.md:163
msgid ""
"Without AA, Ethereum’s ability to provide a seamless, empowering, and\n"
"secure experience for its users is hampered. This could lead to users\n"
"abandoning the platform for centralized exchanges and wallets, a trend\n"
"that would undermine the very ethos of decentralization that\n"
"cryptocurrency and blockchain technology espouse."
msgstr ""

#: src/ch04-00-account-abstraction.md:169
msgid ""
"There are several compelling reasons why Ethereum, and the larger crypto\n"
"ecosystem, need Account Abstraction:"
msgstr ""

#: src/ch04-00-account-abstraction.md:172
msgid ""
"- **Risk of Centralization:** The inefficiencies and limitations of\n"
"  the current account model may push users towards centralized\n"
"  exchanges and wallets. These entities defy the principles of\n"
"  decentralization, presenting familiar risks such as censorship,\n"
"  discrimination, and potential abuse of power. Account Abstraction,\n"
"  by enabling easier and more secure account management, can help\n"
"  uphold the principles of decentralization.\n"
"\n"
"- **Quantum Threat:** Quantum computing poses a potential threat to\n"
"  cryptographic systems, with its ability to break traditional\n"
"  security measures. Account Abstraction can address this by enabling\n"
"  the use of different signature schemes, including quantum-resistant\n"
"  ones, enhancing the security of assets on the blockchain.\n"
"\n"
"- **Scaling Self-Custody:** As the next billion users approach the\n"
"  crypto ecosystem, the importance of scaling self-custody becomes\n"
"  paramount. AA can improve the scalability of self-custody, which is\n"
"  essential for onboarding these new users.\n"
"\n"
"- **User Experience:** Simplifying the onboarding process and user\n"
"  experience is essential for widespread adoption. The complexity\n"
"  associated with current wallets and key management systems can be\n"
"  daunting for newcomers. Account Abstraction promises to simplify\n"
"  these aspects, paving the way for a more intuitive user experience."
msgstr ""

#: src/ch04-00-account-abstraction.md:197
msgid ""
"Starknet is currently leading the efforts to implement Account\n"
"Abstraction at the protocol level. Many consider it to be the \"proving\n"
"ground\" for the future of AA. With numerous experts from different\n"
"organizations collaborating, Starknet aims to redefine the approach to\n"
"security, user experience, and self-custody in the crypto space."
msgstr ""

#: src/ch04-00-account-abstraction.md:203
msgid ""
"The stakes are high. The future of Ethereum, and by extension, the\n"
"crypto ecosystem, is deeply intertwined with the success of Account\n"
"Abstraction. If Ethereum cannot adapt, it risks losing its prominence to\n"
"other, more adaptable platforms."
msgstr ""

#: src/ch04-00-account-abstraction.md:208
msgid "## Why Isn’t Account Abstraction Implemented in Ethereum’s Layer 1 Yet?"
msgstr ""

#: src/ch04-00-account-abstraction.md:210
msgid ""
"Ethereum’s Layer 1 (L1) doesn’t yet support Account Abstraction (AA) at\n"
"a protocol level, not due to lack of desire or understanding of its\n"
"importance, but rather due to the complexity of its implementation."
msgstr ""

#: src/ch04-00-account-abstraction.md:214
msgid ""
"The most prominent roadblock in integrating AA is the entrenched nature\n"
"of Externally Owned Accounts (EOAs) in Ethereum’s architecture. These\n"
"accounts, as fundamental elements of the Ethereum core protocol, would\n"
"need significant alteration to support AA, an undertaking that becomes\n"
"more daunting as the value secured by Ethereum continues to rise."
msgstr ""

#: src/ch04-00-account-abstraction.md:220
msgid ""
"One key aspect that complicates the integration of AA into Ethereum’s L1\n"
"is the Ethereum Virtual Machine (EVM). The EVM, as the runtime\n"
"environment for smart contracts in Ethereum, has limitations that hinder\n"
"the implementation of AA. While there have been several proposals for AA\n"
"since Ethereum’s inception, they have been consistently delayed due to\n"
"other pressing updates and improvements to the Ethereum network."
msgstr ""

#: src/ch04-00-account-abstraction.md:227
msgid ""
"However, the emergence of Layer 2 (L2) solutions provides a new pathway\n"
"for the implementation of AA. With their focus on scalability and\n"
"performance enhancements, these new virtual machines can better\n"
"accommodate AA. Starknet and ZKSync are examples of platforms that have\n"
"native AA inspired by EIP4337 – a proposal deemed superior by industry\n"
"experts like Argent’s Julien Niset."
msgstr ""

#: src/ch04-00-account-abstraction.md:234
msgid ""
"The repeated postponements and challenges in implementing AA on\n"
"Ethereum’s L1 have led many proponents, including Niset, to shift their\n"
"focus. Instead of hoping for EOAs to be phased out and AA integrated at\n"
"Ethereum’s core, they are now advocating for the broad adoption of AA\n"
"through L2 solutions like Starknet. This strategy could bring the\n"
"benefits of AA to users sooner and help the Ethereum network remain\n"
"competitive in the rapidly evolving crypto landscape."
msgstr ""

#: src/ch04-00-account-abstraction.md:244
msgid ""
"To bring it all home, imagine the Ethereum account system as a kind of\n"
"multifunctional Swiss Army knife, currently under renovation. What we’re\n"
"doing with Account Abstraction is swapping out a few tools - while it\n"
"was once a knife and a corkscrew, we’re making it into a magnifying\n"
"glass and a set of tweezers."
msgstr ""

#: src/ch04-00-account-abstraction.md:250
msgid ""
"Why the change? The original tools served us well, but they didn’t fit\n"
"every task we found ourselves up against. Some jobs required precision;\n"
"others needed a broader lens. That’s where Account Abstraction shines.\n"
"It expands Ethereum’s capabilities, adjusting and adapting to our\n"
"ever-evolving requirements."
msgstr ""

#: src/ch04-00-account-abstraction.md:256
msgid ""
"Remember the complications of Ethereum’s current account system? Account\n"
"Abstraction seeks to transform those by offering more flexible,\n"
"personalized, and safer solutions. It’s like tailoring the tools of your\n"
"Swiss Army knife to your unique needs."
msgstr ""

#: src/ch04-00-account-abstraction.md:261
msgid ""
"However, it’s not yet implemented into Ethereum’s Layer 1. And why? The\n"
"kitchen is bustling, and the chefs are wary of spilling the soup. The\n"
"implementation process has its challenges, it’s true. But the cook who\n"
"never dropped a pan never learned to make an omelette. That’s why\n"
"research and development continue relentlessly."
msgstr ""

#: src/ch04-00-account-abstraction.md:267
msgid ""
"Through the lens of Account Abstraction, we see Ethereum’s\n"
"future—secure, accessible, flexible. It’s an exciting, transformative\n"
"prospect that’s redefining what we thought possible. And though the path\n"
"may be fraught with complexities and risks, it’s a journey well worth\n"
"taking."
msgstr ""

#: src/ch04-00-account-abstraction.md:273
msgid ""
"After all, the Swiss Army knife was once just a knife. Imagine what it\n"
"could become next."
msgstr ""

#: src/ch04-00-account-abstraction.md:276
msgid "# References:"
msgstr ""

#: src/ch04-00-account-abstraction.md:278
msgid ""
"- \\[1\\] Martin Triay, Devcon 6:\n"
"  <https://www.youtube.com/watch?v=Osc_gwNW3Fw>\n"
"\n"
"- \\[2\\] Julien Niset: <https://www.youtube.com/watch?v=OwppworJGzs>\n"
"\n"
"- \\[3\\] lightclient, Devcon 6:\n"
"  <https://app.devcon.org/schedule/9mvqce>\n"
"\n"
"- \\[4\\] Starkware:\n"
"  <https://medium.com/@starkware/how-starknet-is-revolutionizing-crypto-signing-ba3724077a79>\n"
"\n"
"- \\[5\\] Julien Niset, 2022:\n"
"  <https://www.argent.xyz/blog/part-2-wtf-is-account-abstraction/>\n"
"\n"
"- \\[6\\] Yoav, Devcon 6: <https://app.devcon.org/schedule/9mvqce>\n"
"\n"
"- \\[7\\] Motty Lavie, 2023:\n"
"  <https://www.youtube.com/watch?v=FrxAdJYhSY8>"
msgstr ""

#: src/ch04-01-accounts.md:1
msgid "# Account Contracts"
msgstr ""

#: src/ch04-01-accounts.md:3
msgid "With a clearer understanding of the AA concept, let's proceed to code it in Starknet."
msgstr ""

#: src/ch04-01-accounts.md:5
msgid "## Account Contract Interface"
msgstr ""

#: src/ch04-01-accounts.md:7
msgid ""
"Account contracts, being a type of smart contracts, are distinguished by specific methods. A smart contract becomes an account contract when it follows the public interface "
"outlined in SNIP-6 ([StarkNet Improvement Proposal-6: Standard Account Interface](https://github.com/ericnordelo/SNIPs/blob/feat/standard-account/SNIPS/snip-6.md)). This "
"standard draws inspiration from SRC-6 and SRC-5, similar to Ethereum's ERCs, which establish application conventions and contract standards."
msgstr ""

#: src/ch04-01-accounts.md:9
msgid ""
"```rust\n"
"/// @title Represents a call to a target contract\n"
"/// @param to The target contract address\n"
"/// @param selector The target function selector\n"
"/// @param calldata The serialized function parameters\n"
"struct Call {\n"
"    to: ContractAddress,\n"
"    selector: felt252,\n"
"    calldata: Array<felt252>\n"
"}\n"
"\n"
"/// @title SRC-6 Standard Account\n"
"trait ISRC6 {\n"
"    /// @notice Execute a transaction through the account\n"
"    /// @param calls The list of calls to execute\n"
"    /// @return The list of each call's serialized return value\n"
"    fn __execute__(calls: Array<Call>) -> Array<Span<felt252>>;\n"
"\n"
"    /// @notice Assert whether the transaction is valid to be executed\n"
"    /// @param calls The list of calls to execute\n"
"    /// @return The string 'VALID' represented as felt when is valid\n"
"    fn __validate__(calls: Array<Call>) -> felt252;\n"
"\n"
"    /// @notice Assert whether a given signature for a given hash is valid\n"
"    /// @param hash The hash of the data\n"
"    /// @param signature The signature to validate\n"
"    /// @return The string 'VALID' represented as felt when the signature is valid\n"
"    fn is_valid_signature(hash: felt252, signature: Array<felt252>) -> felt252;\n"
"}\n"
"\n"
"/// @title SRC-5 Standard Interface Detection\n"
"trait ISRC5 {\n"
"    /// @notice Query if a contract implements an interface\n"
"    /// @param interface_id The interface identifier, as specified in SRC-5\n"
"    /// @return `true` if the contract implements `interface_id`, `false` otherwise\n"
"    fn supports_interface(interface_id: felt252) -> bool;\n"
"}\n"
"\n"
"```"
msgstr ""

#: src/ch04-01-accounts.md:49
msgid "From the proposal, an account contract should have the `__execute__`, `__validate__`, and `is_valid_signature` methods from the `ISRC6` trait."
msgstr ""

#: src/ch04-01-accounts.md:51
msgid "The provided functions serve these purposes:"
msgstr ""

#: src/ch04-01-accounts.md:53
msgid ""
"- `__validate__`: Validates a list of calls intended for execution based on the contract's rules. Instead of a boolean, it returns a short string like 'VALID' within a "
"`felt252` to convey validation results. In Cairo, this short string is the ASCII representation of a single felt. If verification fails, any felt other than 'VALID' can be "
"returned. Often, `0` is chosen.\n"
"- `is_valid_signature`: Confirms the authenticity of a transaction's signature. It takes a transaction data hash and a signature, and compares it against a public key or "
"another method chosen by the contract's author. The result is a short 'VALID' string within a `felt252`.\n"
"- `__execute__`: After validation, `__execute__` carries out a series of contract calls (as `Call` structs). It gives back an array of `Span<felt252>` structs, showing the "
"return values of those calls."
msgstr ""

#: src/ch04-01-accounts.md:57
msgid ""
"Moreover, the `SNIP-5` (Standard Interface Detection) trait needs to be\n"
"defined with a function called `supports_interface`. This function\n"
"verifies whether a contract supports a specific interface, receiving an\n"
"interface ID and returning a boolean."
msgstr ""

#: src/ch04-01-accounts.md:62
msgid ""
"```rust\n"
"    trait ISRC5 {\n"
"        fn supports_interface(interface_id: felt252) -> bool;\n"
"    }\n"
"```"
msgstr ""

#: src/ch04-01-accounts.md:68
msgid ""
"In essence, when a user dispatches an `invoke` transaction, the protocol initiates by invoking the `__validate__` method. This verifies the associated signer's authenticity. "
"For security reasons, particularly to safeguard the Sequencer from Denial of Service (DoS) attacks [1], there are constraints on the operations within the `__validate__` "
"method. If the signature is verified, the method yields a `'VALID'` `felt252` value. If not, it returns 0."
msgstr ""

#: src/ch04-01-accounts.md:70
msgid ""
"After the protocol verifies the signer, it proceeds to invoke the `__execute__` function, passing an array of all desired operations—referred to as \"calls\"—as an argument. "
"Each of these calls specifies a target smart contract address (`to`), the method to be executed (`selector`), and the arguments this method requires (`calldata`)."
msgstr ""

#: src/ch04-01-accounts.md:72
msgid ""
"```rust\n"
"struct Call {\n"
"    to: ContractAddress,\n"
"    selector: felt252,\n"
"    calldata: Array<felt252>\n"
"}\n"
"\n"
"trait ISRC6 {\n"
"\n"
"    ....\n"
"\n"
"    fn __execute__(calls: Array<Call>) -> Array<Span<felt252>>;\n"
"\n"
"    ....\n"
"\n"
"}\n"
"```"
msgstr ""

#: src/ch04-01-accounts.md:90
msgid ""
"Executing a `Call` may yield a return value from the target smart contract. Whether it's a felt252, boolean, or a more intricate data structure like a struct or array, "
"Starknet protocol serializes the return using `Span<felt252>`. Since `Span` captures a segment of an Array [2], the `__execute__` function outputs an array of "
"`Span<felt252>` elements. This array signifies the serialized feedback from every operation in the multicall."
msgstr ""

#: src/ch04-01-accounts.md:92
msgid ""
"The `is_valid_signature` method isn't mandated or employed by the Starknet protocol. Instead, it's a convention within the Starknet developer community. Its purpose is to "
"facilitate user authentication in web3 applications. For instance, consider a user attempting to log into an NFT marketplace using their digital wallet. The web application "
"prompts the user to sign a message, then it uses the `is_valid_signature` function to confirm the authenticity of the associated wallet address."
msgstr ""

#: src/ch04-01-accounts.md:94
msgid ""
"To ensure other smart contracts recognize the compliance of an account contract with the SNIP-6 public interface, developers should incorporate the `supports_interface` "
"method from the `ISRC5` introspection trait. This method requires the Interface ID of SNIP-6 as its argument."
msgstr ""

#: src/ch04-01-accounts.md:96
msgid ""
"```rust\n"
"struct Call {\n"
"    to: ContractAddress,\n"
"    selector: felt252,\n"
"    calldata: Array<felt252>\n"
"}\n"
"\n"
"trait ISRC6 {\n"
"    // Implementations for __execute__, __validate__, and is_valid_signature go here.\n"
"}\n"
"\n"
"trait ISRC5 {\n"
"    fn supports_interface(interface_id: felt252) -> bool;\n"
"}\n"
"```"
msgstr ""

#: src/ch04-01-accounts.md:112
msgid ""
"The `interface_id` corresponds to the aggregated hash of the trait's selectors, as detailed in Ethereum's ERC165 [3]. Developers can either compute the ID using the `src5-"
"rs` utility [4] or rely on the pre-calculated ID: `1270010605630597976495846281167968799381097569185364931397797212080166453709`."
msgstr ""

#: src/ch04-01-accounts.md:114
msgid "The fundamental structure for the account contract, aligning with the SNIP-G Interface standard, looks like this:"
msgstr ""

#: src/ch04-01-accounts.md:116
msgid ""
"```rust\n"
"struct Call {\n"
"    to: ContractAddress,\n"
"    selector: felt252,\n"
"    calldata: Array<felt252>\n"
"}\n"
"\n"
"trait ISRC6 {\n"
"    fn __execute__(calls: Array<Call>) -> Array<Span<felt252>>;\n"
"    fn __validate__(calls: Array<Call>) -> felt252;\n"
"    fn is_valid_signature(hash: felt252, signature: Array<felt252>) -> felt252;\n"
"}\n"
"\n"
"trait ISRC5 {\n"
"    fn supports_interface(interface_id: felt252) -> bool;\n"
"}\n"
"```"
msgstr ""

#: src/ch04-01-accounts.md:134
msgid "## Expanding the Interface"
msgstr ""

#: src/ch04-01-accounts.md:136
msgid ""
"While the components mentioned earlier lay the foundation for an account contract in alignment with the SNIP-6 standard, developers can introduce more features to enhance "
"the contract's capabilities."
msgstr ""

#: src/ch04-01-accounts.md:138
msgid ""
"For example, integrate the `__validate_declare__` function if the contract declares other contracts and handles the corresponding gas fees. This offers a way to authenticate "
"the contract declaration. For those keen on counterfactual smart contract deployment, the `__validate_deploy__` function can be included."
msgstr ""

#: src/ch04-01-accounts.md:140
msgid ""
"Counterfactual deployment lets developers set up an account contract without depending on another account contract for gas fees. This method is valuable when there's no "
"desire to link a new account contract with its deploying address, ensuring a fresh start."
msgstr ""

#: src/ch04-01-accounts.md:142
msgid "This approach involves:"
msgstr ""

#: src/ch04-01-accounts.md:144
msgid ""
"1. Locally determining the potential address of our account contract without actual deployment, feasible with the Starkli [5] tool.\n"
"2. Transferring sufficient ETH to the predicted address to cover the deployment costs.\n"
"3. Sending a `deploy_account` transaction to Starknet containing our contract's compiled code. The sequencer then activates the account contract at the estimated address, "
"compensating its gas fees from the transferred ETH. No `declare` action is needed beforehand."
msgstr ""

#: src/ch04-01-accounts.md:148
msgid ""
"For better compatibility with tools like Starkli later on, expose the signer's `public_key` through a view function in the public interface. Below is the augmented account "
"contract interface:"
msgstr ""

#: src/ch04-01-accounts.md:150
msgid ""
"```rust\n"
"/// @title IAccountAddon - Extended account contract interface\n"
"trait IAccountAddon {\n"
"    /// @notice Validates if a declare transaction can proceed\n"
"    /// @param class_hash Hash of the smart contract under declaration\n"
"    /// @return 'VALID' string as felt, if valid\n"
"    fn __validate_declare__(class_hash: felt252) -> felt252;\n"
"\n"
"    /// @notice Validates if counterfactual deployment can proceed\n"
"    /// @param class_hash Hash of the account contract under deployment\n"
"    /// @param salt Modifier for account address\n"
"    /// @param public_key Account signer's public key\n"
"    /// @return 'VALID' string as felt, if valid\n"
"    fn __validate_deploy__(class_hash: felt252, salt: felt252, public_key: felt252) -> felt252;\n"
"\n"
"    /// @notice Fetches the signer's public key\n"
"    /// @return Public key\n"
"    fn public_key() -> felt252;\n"
"}\n"
"```"
msgstr ""

#: src/ch04-01-accounts.md:171
msgid "In conclusion, a comprehensive account contract incorporates the **SNIP-5**, **SNIP-6**, and the Addon interfaces."
msgstr ""

#: src/ch04-01-accounts.md:173
msgid ""
"```rust\n"
"// Cheat sheet\n"
"\n"
"struct Call {\n"
"    to: ContractAddress,\n"
"    selector: felt252,\n"
"    calldata: Array<felt252>\n"
"}\n"
"\n"
"trait ISRC6 {\n"
"    fn __execute__(calls: Array<Call>) -> Array<Span<felt252>>;\n"
"    fn __validate__(calls: Array<Call>) -> felt252;\n"
"    fn is_valid_signature(hash: felt252, signature: Array<felt252>) -> felt252;\n"
"}\n"
"\n"
"trait ISRC5 {\n"
"    fn supports_interface(interface_id: felt252) -> bool;\n"
"}\n"
"\n"
"trait IAccountAddon {\n"
"    fn __validate_declare__(class_hash: felt252) -> felt252;\n"
"    fn __validate_deploy__(class_hash: felt252, salt: felt252, public_key: felt252) -> felt252;\n"
"    fn public_key() -> felt252;\n"
"}\n"
"\n"
"```"
msgstr ""

#: src/ch04-01-accounts.md:200
msgid "## Recap"
msgstr ""

#: src/ch04-01-accounts.md:202
msgid "We've broken down the distinctions between account contracts and basic smart contracts, particularly focusing on the methods laid out in SNIP-6."
msgstr ""

#: src/ch04-01-accounts.md:204
msgid ""
"- Introduced the `ISRC6` trait, spotlighting essential functions:\n"
"\n"
"  - `__validate__`: Validates transactions.\n"
"  - `is_valid_signature`: Verifies signatures.\n"
"  - `__execute__`: Executes contract calls.\n"
"\n"
"- Discussed the `ISRC5` trait and highlighted the importance of the `supports_interface` function in confirming interface support.\n"
"\n"
"- Detailed the `Call` struct to represent a single contract call, explaining its components: `to`, `selector`, and `calldata`.\n"
"\n"
"- Touched on advanced features for account contracts, such as the `__validate_declare__` and `__validate_deploy__` functions."
msgstr ""

#: src/ch04-01-accounts.md:216
msgid "Coming up, we'll craft a basic account contract and deploy it on Starknet, offering hands-on insight into their functionality and interactions."
msgstr ""

#: src/ch04-02-hello-account.md:1
msgid "# Hello World Account Contract"
msgstr ""

#: src/ch04-02-hello-account.md:3 src/ch04-03-standard-account.md:3 src/ch04-04-01-multicaller.md:3 src/ch04-04-02-multisig.md:3
msgid ""
"**NOTE:**\n"
"**THIS CHAPTER NEEDS TO BE UPDATED TO REFLECT THE NEW SYNTAX FOR ACCOUNT CONTRACTS. PLEASE DO NOT USE THIS CHAPTER AS A REFERENCE UNTIL THIS NOTE IS REMOVED.**"
msgstr ""

#: src/ch04-02-hello-account.md:6 src/ch04-03-standard-account.md:6 src/ch04-04-01-multicaller.md:6 src/ch04-04-02-multisig.md:6
msgid ""
"**CONTRIBUTE: This subchapter is missing an example of declaration, deployment and interaction with the contract. We would love to see your contribution! Please submit a PR."
"**"
msgstr ""

#: src/ch04-02-hello-account.md:8
msgid ""
"In this chapter, we will explore the fundamentals of account contracts\n"
"in Starknet using an example \"Hello World\" account contract written in\n"
"Cairo language. You can find it in the contracts directory of this\n"
"chapter in the Book’s repository (TODO: add link)."
msgstr ""

#: src/ch04-02-hello-account.md:13
msgid ""
"```rust\n"
"    // Import necessary modules\n"
"    #[account_contract]\n"
"    mod HelloAccount {\n"
"        use starknet::ContractAddress;\n"
"        use core::felt252;\n"
"        use array::ArrayTrait;\n"
"        use array::SpanTrait;\n"
"\n"
"        // Validate deployment of the contract.\n"
"        // Returns starknet::VALIDATED to confirm successful validation.\n"
"        #[external]\n"
"        fn __validate_deploy__(\n"
"            class_hash: felt252, contract_address_salt: felt252, public_key_: felt252\n"
"        ) -> felt252 {\n"
"            starknet::VALIDATED\n"
"        }\n"
"\n"
"        // Validate declaration of transactions using this Account.\n"
"        // This function enforces that transactions now require accounts to pay fees.\n"
"        // Returns starknet::VALIDATED to confirm successful validation.\n"
"        #[external]\n"
"        fn __validate_declare__(class_hash: felt252) -> felt252 {\n"
"            starknet::VALIDATED\n"
"        }\n"
"\n"
"        // Validate transaction before execution.\n"
"        // This function is called by the account contract upon receiving a transaction.\n"
"        // If the validation is successful, it returns starknet::VALIDATED.\n"
"        #[external]\n"
"        fn __validate__(\n"
"            contract_address: ContractAddress, entry_point_selector: felt252, calldata: Array::<felt252>\n"
"        ) -> felt252 {\n"
"            starknet::VALIDATED\n"
"        }\n"
"\n"
"        // Execute transaction.\n"
"        // If the '__validate__' function is successful, this '__execute__' function will be called.\n"
"        // It forwards the call to the target contract using starknet::call_contract_syscall.\n"
"        #[external]\n"
"        #[raw_output]\n"
"        fn __execute__(\n"
"            contract_address: ContractAddress, entry_point_selector: felt252, calldata: Array::<felt252>\n"
"        ) -> Span::<felt252> {\n"
"            starknet::call_contract_syscall(\n"
"                address: contract_address,\n"
"                entry_point_selector: entry_point_selector,\n"
"                calldata: calldata.span()\n"
"            ).unwrap_syscall()\n"
"        }\n"
"    }\n"
"```"
msgstr ""

#: src/ch04-02-hello-account.md:66
msgid "## External Functions"
msgstr ""

#: src/ch04-02-hello-account.md:68
msgid ""
"The account contract includes several external functions to handle the\n"
"validation and execution of transactions. These functions are:"
msgstr ""

#: src/ch04-02-hello-account.md:71
msgid ""
"1.  `__validate_deploy__`: Validates the deployment of the contract.\n"
"\n"
"2.  `__validate_declare__`: Validates the declaration of transactions\n"
"    using the account.\n"
"\n"
"3.  `__validate__`: Validates a transaction before execution.\n"
"\n"
"4.  `__execute__`: Executes a transaction after successful validation."
msgstr ""

#: src/ch04-02-hello-account.md:80
msgid "### _validate_deploy_"
msgstr ""

#: src/ch04-02-hello-account.md:82
msgid ""
"This function is responsible for validating the deployment of the\n"
"account contract. It returns `starknet::VALIDATED` to confirm successful\n"
"validation."
msgstr ""

#: src/ch04-02-hello-account.md:86
msgid ""
"```rust\n"
"    #[external]\n"
"    fn __validate_deploy__(\n"
"        class_hash: felt252, contract_address_salt: felt252, public_key_: felt252\n"
"    ) -> felt252 {\n"
"        starknet::VALIDATED\n"
"    }\n"
"```"
msgstr ""

#: src/ch04-02-hello-account.md:95
msgid "### _validate_declare_"
msgstr ""

#: src/ch04-02-hello-account.md:97
msgid ""
"This function enforces that transactions now require accounts to pay\n"
"fees. It returns `starknet::VALIDATED` to confirm successful validation."
msgstr ""

#: src/ch04-02-hello-account.md:100
msgid ""
"```rust\n"
"    #[external]\n"
"    fn __validate_declare__(class_hash: felt252) -> felt252 {\n"
"        starknet::VALIDATED\n"
"    }\n"
"```"
msgstr ""

#: src/ch04-02-hello-account.md:107
msgid "### _validate_"
msgstr ""

#: src/ch04-02-hello-account.md:109
msgid ""
"This function is called by the account contract upon receiving a\n"
"transaction. If the validation is successful, it returns\n"
"`starknet::VALIDATED`."
msgstr ""

#: src/ch04-02-hello-account.md:113
msgid ""
"```rust\n"
"    #[external]\n"
"    fn __validate__(\n"
"        contract_address: ContractAddress, entry_point_selector: felt252, calldata: Array::<felt252>\n"
"    ) -> felt252 {\n"
"        starknet::VALIDATED\n"
"    }\n"
"```"
msgstr ""

#: src/ch04-02-hello-account.md:122
msgid "### _execute_"
msgstr ""

#: src/ch04-02-hello-account.md:124
msgid ""
"If the `__validate__` function is successful, this `__execute__`\n"
"function will be called. It forwards the call to the target contract\n"
"using `starknet::call_contract_syscall`."
msgstr ""

#: src/ch04-02-hello-account.md:128
msgid ""
"```rust\n"
"    #[external]\n"
"    #[raw_output]\n"
"    fn __execute__(\n"
"        contract_address: ContractAddress, entry_point_selector: felt252, calldata: Array::<felt252>\n"
"    ) -> Span::<felt252> {\n"
"        starknet::call_contract_syscall(\n"
"            address: contract_address,\n"
"            entry_point_selector: entry_point_selector,\n"
"            calldata: calldata.span()\n"
"        ).unwrap_syscall()\n"
"    }\n"
"```"
msgstr ""

#: src/ch04-02-hello-account.md:142 src/ch04-03-standard-account.md:295
msgid "## Declaring and Deploying the Hello World Account Contract"
msgstr ""

#: src/ch04-02-hello-account.md:144
msgid ""
"The declaring and deploying process is the same as with other contracts.\n"
"Before declaring and deploying the Hello World account contract, you\n"
"must first have an account contract set up to manage the deployment\n"
"process. To learn more about deploying an account contract, refer to the\n"
"subchapter on deploying in Chapter 2 of the Book."
msgstr ""

#: src/ch04-02-hello-account.md:150
msgid ""
"Remember to compile using `scarb build` (refer to the Scarb subchapter\n"
"in Chapter 2 of the Book). Then follow the steps below to declare and\n"
"deploy the Hello World account contract:"
msgstr ""

#: src/ch04-02-hello-account.md:154 src/ch04-03-standard-account.md:303
msgid "- Export the required environment variables:"
msgstr ""

#: src/ch04-02-hello-account.md:158 src/ch04-03-standard-account.md:307
msgid ""
"export STARKNET_NETWORK=alpha-goerli\n"
"    export STARKNET_WALLET=starkware.starknet.wallets.open_zeppelin.OpenZeppelinAccount"
msgstr ""

#: src/ch04-02-hello-account.md:161 src/ch04-03-standard-account.md:310
msgid ""
"- Declare the contract (since the contract is already declared, you\n"
"  can skip this step. If you want to declare it anyway, run the\n"
"  following command but you will receive an error):"
msgstr ""

#: src/ch04-02-hello-account.md:167
msgid "starknet declare --contract target/release/starknetbook_chapter_7_HelloAccount.json --account my_account --max_fee 100000000000000000"
msgstr ""

#: src/ch04-02-hello-account.md:169
msgid ""
"The class hash is:\n"
"0x07e813097812d58afbb4fb015e683f2b84e4f008cbecc60fa6dece7734a2cdfe"
msgstr ""

#: src/ch04-02-hello-account.md:172 src/ch04-03-standard-account.md:321
msgid "- Deploy the contract:"
msgstr ""

#: src/ch04-02-hello-account.md:176
msgid "starknet deploy --class_hash 0x07e813097812d58afbb4fb015e683f2b84e4f008cbecc60fa6dece7734a2cdfe --account my_account --max_fee 100000000000000000"
msgstr ""

#: src/ch04-02-hello-account.md:178
msgid ""
"After completing these steps, you will have successfully declared and\n"
"deployed the Hello World account contract on Starknet. [Here is a\n"
"deployed\n"
"version](https://testnet.starkscan.co/contract/0x01e6d7698ca76788c8f9c1091ec3d6d3f7167a9effe520402d832ca9894eba4a#overview)."
msgstr ""

#: src/ch04-02-hello-account.md:183 src/ch04-03-standard-account.md:363
msgid "## Summary"
msgstr ""

#: src/ch04-02-hello-account.md:185
msgid ""
"In this subchapter, we delved into the details of a basic account\n"
"contract in Starknet using a \"Hello World\" example."
msgstr ""

#: src/ch04-02-hello-account.md:188
msgid ""
"We also outlined the steps to declare and deploy the Hello World account\n"
"contract on the Starknet network. The deployment process involves\n"
"exporting the required environment variables, declaring the contract,\n"
"and deploying it using the class hash."
msgstr ""

#: src/ch04-02-hello-account.md:193
msgid ""
"As we progress in our exploration of Starknet account contracts, the\n"
"next subchapter will introduce a standard account contract, drawing\n"
"parallels with the standard account contract defined by Open Zeppelin\n"
"and Starkware. This will further strengthen our understanding of how\n"
"account contracts operate within the Starknet ecosystem."
msgstr ""

#: src/ch04-03-standard-account.md:1
msgid "# Standard Account Contract"
msgstr ""

#: src/ch04-03-standard-account.md:8
msgid ""
"In this chapter, we build upon our exploration of account contracts in\n"
"Starknet by introducing a more complex account contract. This Standard\n"
"Account Contract includes additional features such as signature\n"
"validation, providing a more robust example of an account contract in\n"
"Cairo language. You can find the full code for this contract in the Book\n"
"repository (todo: add link). You can interact and compile the contract\n"
"using Scarb (review the Scarb subchapter in Chapter 2 of the Book for\n"
"more information)."
msgstr ""

#: src/ch04-03-standard-account.md:17
msgid ""
"```rust\n"
"    // Import necessary modules and traits\n"
"    use serde::Serde;\n"
"    use starknet::ContractAddress;\n"
"    use array::ArrayTrait;\n"
"    use array::SpanTrait;\n"
"    use option::OptionTrait;\n"
"\n"
"    // Define the Account contract\n"
"    #[account_contract]\n"
"    mod Account {\n"
"        use array::ArrayTrait;\n"
"        use array::SpanTrait;\n"
"        use box::BoxTrait;\n"
"        use ecdsa::check_ecdsa_signature;\n"
"        use option::OptionTrait;\n"
"        use super::Call;\n"
"        use starknet::ContractAddress;\n"
"        use zeroable::Zeroable;\n"
"        use serde::ArraySerde;\n"
"\n"
"        // Define the contract's storage variables\n"
"        struct Storage {\n"
"            public_key: felt252\n"
"        }\n"
"\n"
"        // Constructor function for initializing the contract\n"
"        #[constructor]\n"
"        fn constructor(public_key_: felt252) {\n"
"            public_key::write(public_key_);\n"
"        }\n"
"\n"
"        // Internal function to validate the transaction signature\n"
"        fn validate_transaction() -> felt252 {\n"
"            let tx_info = starknet::get_tx_info().unbox(); // Unbox transaction info\n"
"            let signature = tx_info.signature; // Extract signature\n"
"            assert(signature.len() == 2_u32, 'INVALID_SIGNATURE_LENGTH'); // Check signature length\n"
"\n"
"            // Verify ECDSA signature\n"
"            assert(\n"
"                check_ecdsa_signature(\n"
"                    message_hash: tx_info.transaction_hash,\n"
"                    public_key: public_key::read(),\n"
"                    signature_r: *signature[0_u32],\n"
"                    signature_s: *signature[1_u32],\n"
"                ),\n"
"                'INVALID_SIGNATURE',\n"
"            );\n"
"\n"
"            starknet::VALIDATED // Return validation status\n"
"        }\n"
"\n"
"        // Validate contract deployment\n"
"        #[external]\n"
"        fn __validate_deploy__(\n"
"            class_hash: felt252, contract_address_salt: felt252, public_key_: felt252\n"
"        ) -> felt252 {\n"
"            validate_transaction()\n"
"        }\n"
"\n"
"        // Validate contract declaration\n"
"        #[external]\n"
"        fn __validate_declare__(class_hash: felt252) -> felt252 {\n"
"            validate_transaction()\n"
"        }\n"
"\n"
"        // Validate contract execution\n"
"        #[external]\n"
"        fn __validate__(\n"
"            contract_address: ContractAddress, entry_point_selector: felt252, calldata: Array<felt252>\n"
"        ) -> felt252 {\n"
"            validate_transaction()\n"
"        }\n"
"\n"
"        // Execute a contract call\n"
"        #[external]\n"
"        #[raw_output]\n"
"        fn __execute__(mut calls: Array<Call>) -> Span<felt252> {\n"
"            // Validate caller\n"
"            assert(starknet::get_caller_address().is_zero(), 'INVALID_CALLER');\n"
"\n"
"            let tx_info = starknet::get_tx_info().unbox(); // Unbox transaction info\n"
"            assert(tx_info.version != 0, 'INVALID_TX_VERSION');\n"
"\n"
"            assert(calls.len() == 1_u32, 'MULTI_CALL_NOT_SUPPORTED'); // Only single calls are supported\n"
"            let Call{to, selector, calldata } = calls.pop_front().unwrap();\n"
"\n"
"            // Call the target contract\n"
"            starknet::call_contract_syscall(\n"
"                address: to, entry_point_selector: selector, calldata: calldata.span()\n"
"            ).unwrap_syscall()\n"
"        }\n"
"    }\n"
"\n"
"    // Define the Call struct\n"
"    #[derive(Drop, Serde)]\n"
"    struct Call {\n"
"        to: ContractAddress,\n"
"        selector: felt252,\n"
"        calldata: Array<felt252>\n"
"    }\n"
"```"
msgstr ""

#: src/ch04-03-standard-account.md:120
msgid "## Grasping ECDSA Signature"
msgstr ""

#: src/ch04-03-standard-account.md:122
msgid ""
"Elliptic Curve Digital Signature Algorithm (ECDSA) is a cryptographic\n"
"protocol extensively utilized across various blockchains to ensure data\n"
"integrity and verify the sender’s authenticity. As a variant of the\n"
"Digital Signature Algorithm (DSA), ECDSA leverages elliptic curve\n"
"cryptography, offering superior security with shorter keys than the\n"
"traditional DSA."
msgstr ""

#: src/ch04-03-standard-account.md:129
msgid ""
"An ECDSA signature comprises two components, commonly referred to as _r_\n"
"and _s_. These two values, generated using the signer’s private key and\n"
"the hash of the message (or transaction) being signed, collectively form\n"
"the signature for a given input."
msgstr ""

#: src/ch04-03-standard-account.md:134
msgid "### Deciphering signature_r and signature_s"
msgstr ""

#: src/ch04-03-standard-account.md:136
msgid ""
"Within the context of the Standard Account Contract, _signature_r_ and\n"
"_signature_s_ represent the two constituents of the ECDSA signature.\n"
"These are utilized in the _check_ecdsa_signature_ function to\n"
"authenticate the transaction’s legitimacy."
msgstr ""

#: src/ch04-03-standard-account.md:141
msgid ""
"- `signature_r (r)`: A random number generated during the signing\n"
"  process, unique for each signature. Reusing _r_ across different\n"
"  messages may lead to private key exposure.\n"
"\n"
"- `signature_s (s)`: This is computed using _r_, the private key, and\n"
"  the hash of the message. Like _r_, _s_ is also unique for each\n"
"  signature."
msgstr ""

#: src/ch04-03-standard-account.md:149
msgid ""
"The function _check_ecdsa_signature_ takes these two values, the\n"
"public key of the signer, and the hash of the message to authenticate\n"
"the signature. A valid signature indicates that the message was indeed\n"
"signed by the private key owner and remains unaltered."
msgstr ""

#: src/ch04-03-standard-account.md:154
msgid ""
"```rust\n"
"            assert(\n"
"                check_ecdsa_signature(\n"
"                    message_hash: tx_info.transaction_hash,\n"
"                    public_key: public_key::read(),\n"
"                    signature_r: *signature[0_u32],\n"
"                    signature_s: *signature[1_u32],\n"
"                ),\n"
"                'INVALID_SIGNATURE',\n"
"            );\n"
"```"
msgstr ""

#: src/ch04-03-standard-account.md:166
msgid ""
"The above code snippet employs _check_ecdsa_signature_ function to\n"
"assert the legitimacy of the transaction signature. If the signature is\n"
"not valid, the assertion fails, returning _INVALID_SIGNATURE_."
msgstr ""

#: src/ch04-03-standard-account.md:170
msgid "## Contract Anatomy"
msgstr ""

#: src/ch04-03-standard-account.md:172
msgid "### Storage"
msgstr ""

#: src/ch04-03-standard-account.md:174
msgid ""
"In the standard account contract, we declare a single storage variable:\n"
"_public_key_. This assists in transaction signature validation. The\n"
"public key, stored as a _felt252_ (a 252-bit unsigned integer), is\n"
"written to the storage in the constructor function and is accessed from\n"
"the storage in the _validate_transaction_ function."
msgstr ""

#: src/ch04-03-standard-account.md:180
msgid ""
"```rust\n"
"    struct Storage {\n"
"        public_key: felt252\n"
"    }\n"
"```"
msgstr ""

#: src/ch04-03-standard-account.md:186
msgid "### Constructor"
msgstr ""

#: src/ch04-03-standard-account.md:188
msgid ""
"The constructor function serves to initialize the contract, storing the\n"
"supplied public key in the contract’s storage."
msgstr ""

#: src/ch04-03-standard-account.md:191
msgid ""
"```rust\n"
"    #[constructor]\n"
"    fn constructor(public_key_: felt252) {\n"
"        public_key::write(public_key_);\n"
"    }\n"
"```"
msgstr ""

#: src/ch04-03-standard-account.md:198
msgid "### `validate_transaction`"
msgstr ""

#: src/ch04-03-standard-account.md:200
msgid ""
"This internal function validates the transaction signature. It retrieves\n"
"the signature from the transaction info, checks its length, and verifies\n"
"the ECDSA signature. If the signature is legitimate, it returns\n"
"starknet::VALIDATED, otherwise an error. This function is invoked by\n"
"**validate_deploy**, **validate_declare**, and **validate** functions."
msgstr ""

#: src/ch04-03-standard-account.md:206
msgid ""
"The inclusion of this function is optional. If transaction signature\n"
"validation is not required, it can be omitted. However, its inclusion in\n"
"your account contract is advised to ensure transaction validity and to\n"
"facilitate its reuse in all three validation functions."
msgstr ""

#: src/ch04-03-standard-account.md:211
msgid ""
"```rust\n"
"    fn validate_transaction() -> felt252 {\n"
"            let tx_info = starknet::get_tx_info().unbox(); // Unbox transaction info\n"
"            let signature = tx_info.signature; // Extract signature\n"
"            assert(signature.len() == 2_u32, 'INVALID_SIGNATURE_LENGTH'); // Check signature length\n"
"\n"
"            // Verify ECDSA signature\n"
"            assert(\n"
"                check_ecdsa_signature(\n"
"                    message_hash: tx_info.transaction_hash,\n"
"                    public_key: public_key::read(),\n"
"                    signature_r: *signature[0_u32],\n"
"                    signature_s: *signature[1_u32],\n"
"                ),\n"
"                'INVALID_SIGNATURE',\n"
"            );\n"
"\n"
"            starknet::VALIDATED // Return validation status\n"
"        }\n"
"```"
msgstr ""

#: src/ch04-03-standard-account.md:232
msgid "### Call Struct"
msgstr ""

#: src/ch04-03-standard-account.md:234
msgid ""
"The Call struct outlines the parameters required for a contract call.\n"
"These parameters comprise the target contract address (to), the function\n"
"to be called (selector), and the function’s arguments (calldata). The\n"
"Call struct is utilized in the _execute_ function."
msgstr ""

#: src/ch04-03-standard-account.md:239
msgid ""
"```rust\n"
"    #[derive(Drop, Serde)]\n"
"    struct Call {\n"
"        to: ContractAddress,\n"
"        selector: felt252,\n"
"        calldata: Array<felt252>\n"
"    }\n"
"```"
msgstr ""

#: src/ch04-03-standard-account.md:248
msgid "### execute"
msgstr ""

#: src/ch04-03-standard-account.md:250
msgid ""
"This external function triggers a transaction post successful\n"
"validation. It ensures the caller’s validity, checks for a non-zero\n"
"transaction version, and supports only single calls. Post validation, it\n"
"forwards the call to the target contract. The contract creator can\n"
"incorporate multiple calls to different contracts or the same contract\n"
"(multicall) within this function. The function returns the output from\n"
"the target contract."
msgstr ""

#: src/ch04-03-standard-account.md:258
msgid ""
"```rust\n"
"        #[external]\n"
"        #[raw_output]\n"
"        fn __execute__(mut calls: Array<Call>) -> Span<felt252> {\n"
"            // Validate caller\n"
"            assert(starknet::get_caller_address().is_zero(), 'INVALID_CALLER');\n"
"\n"
"            let tx_info = starknet::get_tx_info().unbox(); // Unbox transaction info\n"
"            assert(tx_info.version != 0, 'INVALID_TX_VERSION');\n"
"\n"
"            assert(calls.len() == 1_u32, 'MULTI_CALL_NOT_SUPPORTED'); // Only single calls are supported\n"
"            let Call{to, selector, calldata } = calls.pop_front().unwrap();\n"
"\n"
"            // Call the target contract\n"
"            starknet::call_contract_syscall(\n"
"                address: to, entry_point_selector: selector, calldata: calldata.span()\n"
"            ).unwrap_syscall()\n"
"        }\n"
"```"
msgstr ""

#: src/ch04-03-standard-account.md:278
msgid "## Improvements to the Standard Account Contract"
msgstr ""

#: src/ch04-03-standard-account.md:280
msgid ""
"The implementation of the Standard Account Contract has a few\n"
"limitations:"
msgstr ""

#: src/ch04-03-standard-account.md:283
msgid ""
"- It currently supports only single calls. We could support multicalls\n"
"  to improve the flexibility and utility of the contract.\n"
"\n"
"- The ECDSA signature algorithm, while secure, can be computationally\n"
"  intensive. Future versions could explore using more efficient\n"
"  signature algorithms, such as Schnorr or BLS. Or quantum-resistant\n"
"  signature algorithms, such as the STARKs."
msgstr ""

#: src/ch04-03-standard-account.md:291
msgid ""
"Despite these limitations, the Standard Account Contract provides a\n"
"robust and secure foundation for creating and interacting with smart\n"
"contracts on Starknet."
msgstr ""

#: src/ch04-03-standard-account.md:297
msgid ""
"This time we have a constructor function that takes the public key as an\n"
"argument. We need to generate a private key with the corresponding\n"
"public key."
msgstr ""

#: src/ch04-03-standard-account.md:301
msgid "TODO: add section on how to generate a private key and public key."
msgstr ""

#: src/ch04-03-standard-account.md:316
msgid "starknet declare --contract target/release/starknetbook_chapter_7_Account.json --account vote_admin --max_fee 100000000000000000"
msgstr ""

#: src/ch04-03-standard-account.md:318
msgid ""
"The class hash is:\n"
"0x05501f7806d3d11cab101e19001e409dd4760200c2da2fe03761750f66e4a5e1"
msgstr ""

#: src/ch04-03-standard-account.md:323
msgid "TODO: add section on how to deploy the contract."
msgstr ""

#: src/ch04-03-standard-account.md:325
msgid ""
"Elliptic Curve Digital Signature Algorithm (ECDSA) is a popular choice\n"
"for ensuring data integrity and sender authenticity in blockchain\n"
"networks, but it’s not the only option. Other alternatives include:"
msgstr ""

#: src/ch04-03-standard-account.md:329
msgid ""
"- EdDSA (Edwards-curve Digital Signature Algorithm): EdDSA is another\n"
"  form of elliptic curve cryptography that is designed to be faster\n"
"  and more secure than ECDSA. EdDSA uses twisted Edwards curves, which\n"
"  have strong security properties and allow for more efficient\n"
"  computations. An example of EdDSA in use is Monero.\n"
"\n"
"- Schnorr Signatures: Schnorr signatures offer a level of security\n"
"  similar to ECDSA but with shorter signatures. They have the\n"
"  additional property of being linear, which allows for signature\n"
"  aggregation and multi-signatures. This can lead to increased\n"
"  efficiency and privacy. Bitcoin developers have proposed adding\n"
"  Schnorr signatures to the Bitcoin protocol with the Taproot upgrade.\n"
"\n"
"- RSA (Rivest–Shamir–Adleman): RSA is an older cryptographic algorithm\n"
"  that is widely used for secure data transmission. However, RSA\n"
"  requires larger key sizes for equivalent security levels, making it\n"
"  less efficient than elliptic curve techniques. RSA is not commonly\n"
"  used in modern blockchain systems, but it is still used in many\n"
"  traditional secure communication protocols.\n"
"\n"
"- BLS (Boneh-Lynn-Shacham) Signatures: BLS signatures, like Schnorr,\n"
"  allow for signature aggregation, making them useful in systems that\n"
"  require a large number of signatures. This property makes BLS\n"
"  signatures particularly useful for consensus algorithms in\n"
"  distributed systems and blockchains, such as Ethereum 2.0.\n"
"\n"
"- Post-Quantum Cryptography: With the advent of quantum computing,\n"
"  researchers are developing new cryptographic algorithms that are\n"
"  resistant to quantum attacks. One example are the STARKs used in\n"
"  Starknet."
msgstr ""

#: src/ch04-03-standard-account.md:360
msgid ""
"Each of these alternatives has its strengths and weaknesses in terms of\n"
"security, efficiency, complexity, and mathematical properties."
msgstr ""

#: src/ch04-03-standard-account.md:365
msgid ""
"In this chapter, we expanded on our understanding of account contracts\n"
"in Starknet by examining a more complex \"Standard Account Contract\". We\n"
"dove into the various components of the contract and learned how they\n"
"work together to validate and execute transactions."
msgstr ""

#: src/ch04-04-examples.md:3
msgid ""
"Here, we will explore numerous examples, elucidating the principles and\n"
"techniques to effectively design and implement Account contracts."
msgstr ""

#: src/ch04-04-examples.md:6
msgid ""
"Before delving into the examples, we would like to issue a disclaimer:\n"
"the contracts discussed in this chapter are for illustrative and\n"
"educational purposes, and they have not undergone formal auditing. This\n"
"signifies that, while we strive to provide accurate and informative\n"
"content, the implementation of these contracts in a live environment\n"
"should be approached with due diligence. We encourage users to\n"
"thoroughly test and validate these contracts before their deployment on\n"
"the mainnet."
msgstr ""

#: src/ch04-04-examples.md:15
msgid ""
"The goal of this chapter is not only to furnish a library of contract\n"
"examples but also to foster collaboration and knowledge sharing among\n"
"the Starknet community. We believe that the exchange of ideas and\n"
"constructive feedback is instrumental in advancing our collective\n"
"understanding and expertise."
msgstr ""

#: src/ch04-04-examples.md:21
msgid ""
"If you’ve developed or come across an innovative contract that could\n"
"serve as a valuable learning resource for others, we invite you to\n"
"contribute. Here are a few guidelines for your contribution:"
msgstr ""

#: src/ch04-04-examples.md:25
msgid ""
"1.  **Open a PR:** To submit a contract example or suggest changes to\n"
"    existing ones, simply open a Pull Request. Ensure that your PR\n"
"    contains a thorough explanation of the contract, its use cases, and\n"
"    its functionality.\n"
"\n"
"2.  **Code Standards:** Please ensure that the submitted code is\n"
"    well-documented and adheres to the standard code conventions of\n"
"    Starknet. This will facilitate the review process and enhance the\n"
"    readability and comprehensibility of the contract.\n"
"\n"
"3.  **Detailed Explanation:** Accompany your code with a detailed\n"
"    explanation of the contract logic. Wherever possible, use diagrams,\n"
"    flowcharts, or pseudocode to illustrate complex mechanisms or\n"
"    workflows."
msgstr ""

#: src/ch04-04-examples.md:40
msgid ""
"As we expand this repertoire of contract examples, we hope to equip the\n"
"Starknet community with a robust toolset and inspire further exploration\n"
"and innovation in the realm of custom account contracts."
msgstr ""

#: src/ch04-04-01-multicaller.md:1
msgid "# MultiCaller Account"
msgstr ""

#: src/ch04-04-01-multicaller.md:8
msgid ""
"[Multicall](https://github.com/joshstevens19/ethereum-multicall#readme)\n"
"is a powerful technique that allows multiple constant smart contract\n"
"function calls to be aggregated into a single call, resulting in a\n"
"consolidated output. With Starknet’s account abstraction feature,\n"
"multicalls can be seamlessly integrated into account contracts."
msgstr ""

#: src/ch04-04-01-multicaller.md:14
msgid "## Why Multicalls?"
msgstr ""

#: src/ch04-04-01-multicaller.md:16
msgid "Multicalls come handy in several scenarios. Here are some examples:"
msgstr ""

#: src/ch04-04-01-multicaller.md:18
msgid ""
"1.  **Token Swapping on Decentralized Exchanges**: In a typical token\n"
"    swap operation on a decentralized exchange (DEX), you first need to\n"
"    approve the spending of the tokens and then initiate the swap.\n"
"    Executing these operations separately could be cumbersome from a\n"
"    user experience perspective. With multicall, these calls can be\n"
"    combined into a single transaction, simplifying the user’s task.\n"
"\n"
"2.  **Fetching Blockchain Data**: When you want to query the prices of\n"
"    two different tokens from the blockchain, it’s beneficial to have\n"
"    them both come from the same block for consistency. Multicall\n"
"    returns the latest block number along with the aggregated results,\n"
"    providing this consistency."
msgstr ""

#: src/ch04-04-01-multicaller.md:31
msgid ""
"The benefits of multicall transactions can be realized more in the\n"
"context of account abstraction."
msgstr ""

#: src/ch04-04-01-multicaller.md:34
msgid "## Multicall Functionality in Account Contracts"
msgstr ""

#: src/ch04-04-01-multicaller.md:36
msgid ""
"To facilitate multicalls, we can introduce specific functions in the\n"
"account contract. Here are two core functions:"
msgstr ""

#: src/ch04-04-01-multicaller.md:39
msgid "### `_execute_calls` Function"
msgstr ""

#: src/ch04-04-01-multicaller.md:41
msgid ""
"The `_execute_calls` function is responsible for executing the\n"
"multicalls. It iterates over an array of calls, executes them, and\n"
"aggregates the results."
msgstr ""

#: src/ch04-04-01-multicaller.md:45
msgid ""
"```rust\n"
"    fn _execute_calls(mut calls: Array<AccountCall>, mut res:Array::<Array::<felt>>) -> Array::<Array::<felt>> {\n"
"        match calls.pop_front() {\n"
"            Option::Some(call) => {\n"
"                let _res = _call_contract(call);\n"
"                res.append(_res);\n"
"                return _execute_calls(calls, res);\n"
"            },\n"
"            Option::None(_) => {\n"
"                return res;\n"
"            },\n"
"        }\n"
"    }\n"
"```"
msgstr ""

#: src/ch04-04-01-multicaller.md:60
msgid ""
"Apart from the traditional **`execute`** function, adding the\n"
"**`_execute_calls`** function to your account contract can ensure that\n"
"you can make a multicall using your smart contract account."
msgstr ""

#: src/ch04-04-01-multicaller.md:64
msgid ""
"The above code is a simple example snippet where the **\"return\n"
"_execute_calls(calls, res);\"_ statement makes recursive calls to the\n"
"**`_execute_calls`** function thereby bundling the calls together.\n"
"The final result will be aggregated and returned in the \\***res\\*\\*\\*\n"
"variable."
msgstr ""

#: src/ch04-04-01-multicaller.md:70
msgid "### `_call_contract` Function"
msgstr ""

#: src/ch04-04-01-multicaller.md:72
msgid ""
"The `_call_contract` function is a helper function used to make\n"
"individual contract calls."
msgstr ""

#: src/ch04-04-01-multicaller.md:75
msgid ""
"```rust\n"
"    fn _call_contract(call: AccountCall) -> Array::<felt> {\n"
"        starknet::call_contract_syscall(\n"
"            call.to, call.selector, call.calldata\n"
"        ).unwrap_syscall()\n"
"    }\n"
"```"
msgstr ""

#: src/ch04-04-01-multicaller.md:85
msgid ""
"While multicall provides significant benefits in terms of UX and data\n"
"consistency, it’s important to note that it may not significantly reduce\n"
"gas fees compared to individual calls. However, the primary advantage of\n"
"using multicall is that it ensures results are derived from the same\n"
"block, providing a much-improved user experience."
msgstr ""

#: src/ch04-04-02-multisig.md:1
msgid "# Multi-Signature Accounts"
msgstr ""

#: src/ch04-04-02-multisig.md:8
msgid ""
"Multisignature (multisig) technology is an integral part of the modern\n"
"blockchain landscape. It enhances security by requiring multiple\n"
"signatures to confirm a transaction, hence reducing the risk of\n"
"fraudulent transactions and increasing control over asset management."
msgstr ""

#: src/ch04-04-02-multisig.md:13
msgid ""
"In Starknet, the concept of multisig accounts is abstracted at the\n"
"protocol level, allowing developers to implement custom account\n"
"contracts that embody this concept. In this chapter, we’ll delve into\n"
"the workings of a multisig account and see how it’s created in Starknet\n"
"using an account contract."
msgstr ""

#: src/ch04-04-02-multisig.md:19
msgid "## What is a Multisig Account?"
msgstr ""

#: src/ch04-04-02-multisig.md:21
msgid ""
"A multisig account is an account that requires more than one signature\n"
"to authorize transactions. This significantly enhances security,\n"
"requiring multiple entities' consent to transact funds or perform\n"
"critical actions."
msgstr ""

#: src/ch04-04-02-multisig.md:26
msgid "Key specifications of a multisig account include:"
msgstr ""

#: src/ch04-04-02-multisig.md:28
msgid ""
"- Public keys that form the account\n"
"\n"
"- Threshold number of signatures required"
msgstr ""

#: src/ch04-04-02-multisig.md:32
msgid ""
"A transaction signed by a multisig account must be individually signed\n"
"by the different keys specified for the account. If fewer than the\n"
"threshold number of signatures needed are present, the resultant\n"
"multisignature is considered invalid."
msgstr ""

#: src/ch04-04-02-multisig.md:37
msgid ""
"In Starknet, accounts are abstractions provided at the protocol level.\n"
"Therefore, to create a multisig account, one needs to code the logic\n"
"into an account contract and deploy it."
msgstr ""

#: src/ch04-04-02-multisig.md:41
msgid ""
"The contract below serves as an example of a multisig account contract.\n"
"When deployed, it can create a native multisig account using the concept\n"
"of account abstraction. Please note that this is a simplified example\n"
"and lacks comprehensive checks and validations found in a\n"
"production-grade multisig contract."
msgstr ""

#: src/ch04-04-02-multisig.md:47
msgid "## Multisig Account Contract"
msgstr ""

#: src/ch04-04-02-multisig.md:49
msgid "This is the Rust code for a multisig account contract:"
msgstr ""

#: src/ch04-04-02-multisig.md:51
msgid ""
"```rust\n"
"    #[account_contract]\n"
"    mod MultisigAccount {\n"
"        use ecdsa::check_ecdsa_signature;\n"
"        use starknet::ContractAddress;\n"
"        use zeroable::Zeroable;\n"
"        use array::ArrayTrait;\n"
"        use starknet::get_caller_address;\n"
"        use box::BoxTrait;\n"
"        use array::SpanTrait;\n"
"\n"
"        struct Storage {\n"
"            index_to_owner: LegacyMap::<u32, felt252>,\n"
"            owner_to_index: LegacyMap::<felt252, u32>,\n"
"            num_owners: usize,\n"
"            threshold: usize,\n"
"            curr_tx_index: felt252,\n"
"            //Mapping between tx_index and num of confirmations\n"
"            tx_confirms: LegacyMap<felt252, usize>,\n"
"            //Mapping between tx_index and its execution state\n"
"            tx_is_executed: LegacyMap<felt252, bool>,\n"
"            //Mapping between a transaction index and its hash\n"
"            transactions: LegacyMap<felt252, felt252>,\n"
"            has_confirmed: LegacyMap::<(ContractAddress, felt252), bool>,\n"
"        }\n"
"\n"
"        #[constructor]\n"
"        fn constructor(public_keys: Array::<felt252>, _threshold: usize) {\n"
"            assert(public_keys.len() <= 3_usize, 'public_keys.len <= 3');\n"
"            num_owners::write(public_keys.len());\n"
"            threshold::write(_threshold);\n"
"            _set_owners(public_keys.len(), public_keys);\n"
"        }\n"
"\n"
"        //GETTERS\n"
"        //Get number of confirmations for a given transaction index\n"
"        #[view]\n"
"        fn get_confirmations(tx_index : felt252) -> usize {\n"
"            tx_confirms::read(tx_index)\n"
"        }\n"
"\n"
"        //Get the number of owners of this account\n"
"        #[view]\n"
"        fn get_num_owners() -> usize {\n"
"            num_owners::read()\n"
"        }\n"
"\n"
"\n"
"        //Get the public key of the owners\n"
"        //TODO - Recursively add the owners into an array and return, maybe wait for loops to be enabled\n"
"\n"
"\n"
"        //EXTERNAL FUNCTIONS\n"
"\n"
"        #[external]\n"
"        fn submit_tx(public_key: felt252) {\n"
"\n"
"            //Need to check if caller is one of the owners.\n"
"            let tx_info = starknet::get_tx_info().unbox();\n"
"            let signature: Span<felt252> = tx_info.signature;\n"
"            let caller = get_caller_address();\n"
"            assert(signature.len() == 2_u32, 'INVALID_SIGNATURE_LENGTH');\n"
"\n"
"            //Updating the transaction index\n"
"            let tx_index = curr_tx_index::read();\n"
"\n"
"            //`true` if a signature is valid and `false` otherwise.\n"
"            assert(\n"
"                check_ecdsa_signature(\n"
"                    message_hash: tx_info.transaction_hash,\n"
"                    public_key: public_key,\n"
"                    signature_r: *signature.at(0_u32),\n"
"                    signature_s: *signature.at(1_u32),\n"
"                ),\n"
"                'INVALID_SIGNATURE',\n"
"            );\n"
"\n"
"            transactions::write(tx_index, tx_info.transaction_hash);\n"
"            curr_tx_index::write(tx_index + 1);\n"
"\n"
"        }\n"
"\n"
"        #[external]\n"
"        fn confirm_tx(tx_index: felt252, public_key: felt252) {\n"
"\n"
"            let transaction_hash = transactions::read(tx_index);\n"
"            //TBD: Assert that tx_hash is not null\n"
"\n"
"            let num_confirmations = tx_confirms::read(tx_index);\n"
"            let executed = tx_is_executed::read(tx_index);\n"
"\n"
"            assert(executed == false, 'TX_ALREADY_EXECUTED');\n"
"\n"
"            let caller = get_caller_address();\n"
"            let tx_info = starknet::get_tx_info().unbox();\n"
"            let signature: Span<felt252> = tx_info.signature;\n"
"\n"
"             assert(\n"
"                check_ecdsa_signature(\n"
"                    message_hash: tx_info.transaction_hash,\n"
"                    public_key: public_key,\n"
"                    signature_r: *signature.at(0_u32),\n"
"                    signature_s: *signature.at(1_u32),\n"
"                ),\n"
"                'INVALID_SIGNATURE',\n"
"            );\n"
"\n"
"            let confirmed = has_confirmed::read((caller, tx_index));\n"
"\n"
"            assert (confirmed == false, 'CALLER_ALREADY_CONFIRMED');\n"
"            tx_confirms::write(tx_index, num_confirmations+1_usize);\n"
"            has_confirmed::write((caller, tx_index), true);\n"
"\n"
"\n"
"        }\n"
"\n"
"        //An example function to validate that there are at least two signatures\n"
"        fn validate_transaction(public_key: felt252) -> felt252 {\n"
"            let tx_info = starknet::get_tx_info().unbox();\n"
"            let signature: Span<felt252> = tx_info.signature;\n"
"            let caller = get_caller_address();\n"
"            assert(signature.len() == 2_u32, 'INVALID_SIGNATURE_LENGTH');\n"
"\n"
"            //`true` if a signature is valid and `false` otherwise.\n"
"            assert(\n"
"                check_ecdsa_signature(\n"
"                    message_hash: tx_info.transaction_hash,\n"
"                    public_key: public_key,\n"
"                    signature_r: *signature.at(0_u32),\n"
"                    signature_s: *signature.at(1_u32),\n"
"                ),\n"
"                'INVALID_SIGNATURE',\n"
"            );\n"
"\n"
"            starknet::VALIDATED\n"
"        }\n"
"\n"
"        //INTERNAL FUNCTION\n"
"        //Function to add the public keys of the multisig in permanent storage\n"
"        fn _set_owners(owners_len: usize, public_keys: Array::<felt252>) {\n"
"            if owners_len == 0_usize {\n"
"            }\n"
"\n"
"            index_to_owner::write(owners_len, *public_keys.at(owners_len - 1_usize));\n"
"            owner_to_index::write(*public_keys.at(owners_len - 1_usize), owners_len);\n"
"            _set_owners(owners_len - 1_u32, public_keys);\n"
"        }\n"
"\n"
"\n"
"        #[external]\n"
"        fn __validate_deploy__(\n"
"            class_hash: felt252, contract_address_salt: felt252, public_key_: felt252\n"
"        ) -> felt252 {\n"
"            validate_transaction(public_key_)\n"
"        }\n"
"\n"
"        #[external]\n"
"        fn __validate_declare__(class_hash: felt252, public_key_: felt252) -> felt252 {\n"
"            validate_transaction(public_key_)\n"
"        }\n"
"\n"
"        #[external]\n"
"        fn __validate__(\n"
"            contract_address: ContractAddress, entry_point_selector: felt252, calldata: Array::<felt252>, public_key_: felt252\n"
"        ) -> felt252 {\n"
"            validate_transaction(public_key_)\n"
"        }\n"
"\n"
"        #[external]\n"
"        #[raw_output]\n"
"        fn __execute__(\n"
"            contract_address: ContractAddress, entry_point_selector: felt252, calldata: Array::<felt252>,\n"
"            tx_index: felt252\n"
"        ) -> Span::<felt252> {\n"
"            // Validate caller.\n"
"            assert(starknet::get_caller_address().is_zero(), 'INVALID_CALLER');\n"
"\n"
"            // Check the tx version here, since version 0 transaction skip the __validate__ function.\n"
"            let tx_info = starknet::get_tx_info().unbox();\n"
"            assert(tx_info.version != 0, 'INVALID_TX_VERSION');\n"
"\n"
"            //Multisig check here\n"
"            let num_confirmations = tx_confirms::read(tx_index);\n"
"            let owners_len = num_owners::read();\n"
"            //Subtracting one for the submitter\n"
"            let required_confirmations = threshold::read() - 1_usize;\n"
"            assert(num_confirmations >= required_confirmations, 'MINIMUM_50%_CONFIRMATIONS');\n"
"\n"
"            tx_is_executed::write(tx_index, true);\n"
"\n"
"            starknet::call_contract_syscall(\n"
"                contract_address, entry_point_selector, calldata.span()\n"
"            ).unwrap_syscall()\n"
"        }\n"
"    }\n"
"```"
msgstr ""

#: src/ch04-04-02-multisig.md:248
msgid "## Multisig Transaction Flow"
msgstr ""

#: src/ch04-04-02-multisig.md:250
msgid "The flow of a multisig transaction includes the following steps:"
msgstr ""

#: src/ch04-04-02-multisig.md:252
msgid ""
"1.  Submitting a transaction: Any of the owners can submit a transaction\n"
"    from the account.\n"
"\n"
"2.  Confirming the transaction: The owner who hasn’t submitted a\n"
"    transaction can confirm the transaction."
msgstr ""

#: src/ch04-04-02-multisig.md:258
msgid ""
"The transaction will be successfully executed if the number of\n"
"confirmations (including the submitter’s signature) is greater than or\n"
"equal to the threshold number of signatures, else it fails. This\n"
"mechanism of confirmation ensures that no single party can unilaterally\n"
"perform critical actions, thereby enhancing the security of the account."
msgstr ""

#: src/ch04-04-02-multisig.md:264
msgid "## Exploring Multisig Functions"
msgstr ""

#: src/ch04-04-02-multisig.md:266
msgid ""
"Let’s take a closer look at the various functions associated with\n"
"multisig functionality in the provided contract."
msgstr ""

#: src/ch04-04-02-multisig.md:269
msgid "### `_set_owners` Function"
msgstr ""

#: src/ch04-04-02-multisig.md:271
msgid ""
"This is an internal function designed to add the public keys of the\n"
"account owners to a permanent storage. Ideally, a multisig account\n"
"structure should permit adding and deleting owners as per the agreement\n"
"of the account owners. However, each change should be a transaction\n"
"requiring the threshold number of signatures."
msgstr ""

#: src/ch04-04-02-multisig.md:277
msgid ""
"```rust\n"
"    //INTERNAL FUNCTION\n"
"    //Function to add the public keys of the multisig in permanent storage\n"
"    fn _set_owners(owners_len: usize, public_keys: Array::<felt252>) {\n"
"        if owners_len == 0_usize {\n"
"        }\n"
"\n"
"        index_to_owner::write(owners_len, *public_keys.at(owners_len - 1_usize));\n"
"        owner_to_index::write(*public_keys.at(owners_len - 1_usize), owners_len);\n"
"        _set_owners(owners_len - 1_u32, public_keys);\n"
"    }\n"
"```"
msgstr ""

#: src/ch04-04-02-multisig.md:290
msgid "### `submit_tx` Function"
msgstr ""

#: src/ch04-04-02-multisig.md:292
msgid ""
"This external function allows the owners of the account to submit\n"
"transactions. Upon submission, the function checks the validity of the\n"
"transaction, ensures the caller is one of the account owners, and adds\n"
"the transaction to the transactions map. It also increments the current\n"
"transaction index."
msgstr ""

#: src/ch04-04-02-multisig.md:298
msgid ""
"```rust\n"
"    #[external]\n"
"    fn submit_tx(public_key: felt252) {\n"
"\n"
"        //Need to check if caller is one of the owners.\n"
"        let tx_info = starknet::get_tx_info().unbox();\n"
"        let signature: Span<felt252> = tx_info.signature;\n"
"        let caller = get_caller_address();\n"
"        assert(signature.len() == 2_u32, 'INVALID_SIGNATURE_LENGTH');\n"
"\n"
"        //Updating the transaction index\n"
"        let tx_index = curr_tx_index::read();\n"
"\n"
"        //`true` if a signature is valid and `false` otherwise.\n"
"        assert(\n"
"            check_ecdsa_signature(\n"
"                message_hash: tx_info.transaction_hash,\n"
"                public_key: public_key,\n"
"                signature_r: *signature.at(0_u32),\n"
"                signature_s: *signature.at(1_u32),\n"
"            ),\n"
"            'INVALID_SIGNATURE',\n"
"        );\n"
"\n"
"        transactions::write(tx_index, tx_info.transaction_hash);\n"
"        curr_tx_index::write(tx_index + 1);\n"
"\n"
"    }\n"
"```"
msgstr ""

#: src/ch04-04-02-multisig.md:328
msgid "### `confirm_tx` Function"
msgstr ""

#: src/ch04-04-02-multisig.md:330
msgid ""
"Similarly, the **_`confirm_tx`_** function provides a way to record\n"
"confirmations for each transaction. An account owner, who did not submit\n"
"the transaction, can confirm it, increasing its confirmation count."
msgstr ""

#: src/ch04-04-02-multisig.md:334
msgid ""
"```rust\n"
"        #[external]\n"
"        fn confirm_tx(tx_index: felt252, public_key: felt252) {\n"
"\n"
"            let transaction_hash = transactions::read(tx_index);\n"
"            //TBD: Assert that tx_hash is not null\n"
"\n"
"            let num_confirmations = tx_confirms::read(tx_index);\n"
"            let executed = tx_is_executed::read(tx_index);\n"
"\n"
"            assert(executed == false, 'TX_ALREADY_EXECUTED');\n"
"\n"
"            let caller = get_caller_address();\n"
"            let tx_info = starknet::get_tx_info().unbox();\n"
"            let signature: Span<felt252> = tx_info.signature;\n"
"\n"
"             assert(\n"
"                check_ecdsa_signature(\n"
"                    message_hash: tx_info.transaction_hash,\n"
"                    public_key: public_key,\n"
"                    signature_r: *signature.at(0_u32),\n"
"                    signature_s: *signature.at(1_u32),\n"
"                ),\n"
"                'INVALID_SIGNATURE',\n"
"            );\n"
"\n"
"            let confirmed = has_confirmed::read((caller, tx_index));\n"
"\n"
"            assert (confirmed == false, 'CALLER_ALREADY_CONFIRMED');\n"
"            tx_confirms::write(tx_index, num_confirmations+1_usize);\n"
"            has_confirmed::write((caller, tx_index), true);\n"
"        }\n"
"```"
msgstr ""

#: src/ch04-04-02-multisig.md:368
msgid "### _`execute`_ Function"
msgstr ""

#: src/ch04-04-02-multisig.md:370
msgid ""
"The _execute_ function serves as the final step in the transaction\n"
"process. It checks the validity of the transaction, whether it has been\n"
"previously executed, and if the threshold number of signatures has been\n"
"reached. The transaction is executed if all the checks pass."
msgstr ""

#: src/ch04-04-02-multisig.md:375
msgid ""
"```rust\n"
"    #[external]\n"
"        #[raw_output]\n"
"        fn __execute__(\n"
"            contract_address: ContractAddress, entry_point_selector: felt252, calldata: Array::<felt252>,\n"
"            tx_index: felt252\n"
"        ) -> Span::<felt252> {\n"
"            // Validate caller.\n"
"            assert(starknet::get_caller_address().is_zero(), 'INVALID_CALLER');\n"
"\n"
"            // Check the tx version here, since version 0 transaction skip the __validate__ function.\n"
"            let tx_info = starknet::get_tx_info().unbox();\n"
"            assert(tx_info.version != 0, 'INVALID_TX_VERSION');\n"
"\n"
"            //Multisig check here\n"
"            let num_confirmations = tx_confirms::read(tx_index);\n"
"            let owners_len = num_owners::read();\n"
"            //Subtracting one for the submitter\n"
"            let required_confirmations = threshold::read() - 1_usize;\n"
"            assert(num_confirmations >= required_confirmations, 'MINIMUM_50%_CONFIRMATIONS');\n"
"\n"
"            tx_is_executed::write(tx_index, true);\n"
"\n"
"            starknet::call_contract_syscall(\n"
"                contract_address, entry_point_selector, calldata.span()\n"
"            ).unwrap_syscall()\n"
"        }\n"
"```"
msgstr ""

#: src/ch04-04-02-multisig.md:404
msgid "## Closing Thoughts"
msgstr ""

#: src/ch04-04-02-multisig.md:406
msgid ""
"This chapter has introduced you to the concept of multisig accounts in\n"
"Starknet and illustrated how they can be implemented using an account\n"
"contract. However, it’s important to note that this is a simplified\n"
"example, and a production-grade multisig contract should contain\n"
"additional checks and validations for robustness and security."
msgstr ""

#: src/ch04-04-03-auto-payments.md:1
msgid "# Auto-Payments 🚧"
msgstr ""

#: src/ch04-04-04-alternative-signature-schemes.md:1
msgid "# Alternative Signature Schemes 🚧"
msgstr ""

#~ msgid "# Hello, World!"
#~ msgstr "# ¡Hola, Mundo!"
